from header_common import *
from header_operations import *
from header_mission_templates import *
from header_animations import *
from header_sounds import *
from header_music import *
from header_items import *
from module_constants import *

## CC begin
from header_skills import *
from header_terrain_types import *
#from module_my_mod_set import *  ## CC-D: not use
## CC end

####################################################################################################################
#   Each mission-template is a tuple that contains the following fields:
#  1) Mission-template id (string): used for referencing mission-templates in other files.
#     The prefix mt_ is automatically added before each mission-template id
#
#  2) Mission-template flags (int): See header_mission-templates.py for a list of available flags
#  3) Mission-type(int): Which mission types this mission template matches.
#     For mission-types to be used with the default party-meeting system,
#     this should be 'charge' or 'charge_with_ally' otherwise must be -1.
#     
#  4) Mission description text (string).
#  5) List of spawn records (list): Each spawn record is a tuple that contains the following fields:
#    5.1) entry-no: Troops spawned from this spawn record will use this entry
#    5.2) spawn flags.
#    5.3) alter flags. which equipment will be overriden
#    5.4) ai flags.
#    5.5) Number of troops to spawn.
#    5.6) list of equipment to add to troops spawned from here (maximum 8).
#  6) List of triggers (list).
#     See module_triggers.py for infomation about triggers.
#
#  Please note that mission templates is work in progress and can be changed in the future versions.
# 
####################################################################################################################

pilgrim_disguise = [itm_pilgrim_hood,itm_pilgrim_disguise,itm_practice_staff, itm_throwing_daggers]
#CC-C begin 
#af_castle_lord = af_override_horse | af_override_weapons| af_require_civilian
#af_castle_lord = af_override_horse | af_override_weapons | af_override_fullhelm
af_castle_lord = af_override_horse | af_override_weapons
#CC-C end




## CC-C begin: shield bash
## Shield Bash
sp_shield_bash_1 = (
   0, 0, 0,
   [
#     (eq, "$sp_shield_bash", 1),
   	  (eq, "$g_nmcml_use_shield_bash", 2),  ## CC-D add
      (game_key_is_down, gk_defend),
      (game_key_clicked, gk_attack),
   ],
   [
      (get_player_agent_no, ":agent"),
      (agent_is_active, ":agent"),
      (agent_is_alive, ":agent"),
      (neg|agent_slot_ge, ":agent", slot_agent_shield_bash_timer, 1), #Less than.  ## CC-D sp_agent->slot
      (agent_get_wielded_item, ":item", ":agent", 1), #Offhand.
      (gt, ":item", 0),
      (item_get_type, ":type", ":item"),
      (eq, ":type", itp_type_shield), #Shield equipped.
      (agent_get_defend_action, ":action", ":agent"),
      (eq, ":action", 2), #Blocking.
      (agent_get_horse, ":horse", ":agent"),
      (eq, ":horse", -1), #No horse.
      (agent_get_troop_id, ":troop", ":agent"),
      (store_skill_level, ":level", "skl_shield", ":troop"),
      (ge, ":level", 1), #If the :level is equal to or greater than to 4, then continue.
      (store_sub,":timer",15,":level"),
      (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":timer"),  ## CC-D sp_agent->slot
      (agent_set_animation, ":agent", "anim_shield_bash_c09"),  ## CC-D bash->bash_c09
      (agent_get_troop_id, ":troop", ":agent"),
      (troop_get_type, ":type", ":troop"),
      (try_begin),
         (eq, ":type", tf_male),
         (agent_play_sound, ":agent", "snd_man_yell"),
      (else_try),
		 (this_or_next|eq, ":type", tf_elf_female),
		 (this_or_next|eq, ":type", tf_gaolu_female),
         (this_or_next|eq, ":type", tf_girl),
         (eq, ":type", tf_female),
         (agent_play_sound, ":agent", "snd_woman_yell"),
      (try_end),
      (agent_get_position, pos1, ":agent"),
      (assign, ":victim", -1),
      (assign, ":minimum_distance", 150),
      (try_for_agents, ":suspect"),
          (agent_is_alive, ":suspect"),
         (agent_is_human, ":suspect"),
         (neg|agent_is_ally, ":suspect"),
         (agent_get_position, pos2, ":suspect"),
         (neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind basher.
         (get_distance_between_positions, ":distance", pos1, pos2),
         (le, ":distance", ":minimum_distance"),
         (assign, ":minimum_distance", ":distance"),
         (assign, ":victim", ":suspect"),
      (try_end),
      (ge, ":victim", 0),
      (agent_play_sound, ":victim", "snd_wooden_hit_low_armor_high_damage"),
      (agent_get_defend_action, ":action", ":victim"),
      (try_begin),
         (eq, ":action", 2), #Blocking.
         (neg|position_is_behind_position, pos1, pos2), #If basher isn't behind victim.
         (agent_get_wielded_item, ":item", ":victim", 1), #Offhand.
         (gt, ":item", 0),
         (item_get_type, ":type", ":item"),
         (eq, ":type", itp_type_shield),
         (agent_set_animation, ":victim", "anim_shield_bash_c09"),  ## CC-D bash->bash_c09
      (else_try),
		 #occc power bash perk
		 (try_begin),
			(agent_slot_eq, ":agent", slot_agent_can_powerbash, 1),
			(agent_set_animation, ":victim", "anim_strike_knockback_rolling", 0),
			(agent_deliver_damage_to_agent, ":agent", ":victim", 10),
		 (else_try),
			(agent_set_animation, ":victim", "anim_shield_strike_c09"),## CC-D strike->strike_c09
		 (try_end),
      (try_end),      
   ])
sp_shield_bash_2 = (
   1, 0, 0, [
#     (eq, "$sp_shield_bash", 1)
   	  (eq, "$g_nmcml_use_shield_bash", 2),  ## CC-D add
   ],
   [
      (get_player_agent_no, ":agent"),
      (agent_is_active, ":agent"),
      (agent_is_alive, ":agent"),
      (agent_get_troop_id, ":troop", ":agent"),
      (store_skill_level, ":level", "skl_shield", ":troop"),
      (ge, ":level", 1), #If the :level is equal to or greater than to 4, then continue.
      (agent_get_slot, ":timer", ":agent", slot_agent_shield_bash_timer),  ## CC-D sp_agent->slot
      (val_sub, ":timer", 1),
      (val_max, ":timer", 0),
      (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":timer"),  ## CC-D sp_agent->slot
   ])
sp_shield_bash_3 = (
   1, 0, 0, [
#     (eq, "$sp_shield_bash_ai", 1)
   	  (eq, "$g_nmcml_use_shield_bash", 2),  ## CC-D add
   ],
   [
       (get_player_agent_no, ":player_agent"),
       (try_for_agents, ":agent"),
         (neq, ":agent", ":player_agent"),
         (agent_is_alive, ":agent"),
         (agent_is_human, ":agent"),
         (agent_get_troop_id, ":troop", ":agent"),
         (store_skill_level, ":level", "skl_shield", ":troop"),
         (ge, ":level", 4), #If the :level is equal to or greater than to 4, then continue.
         (try_begin),
            (neg|agent_slot_ge, ":agent", slot_agent_shield_bash_timer, 1), #Less than.  ## CC-D sp_agent->slot
            (agent_slot_eq, ":agent", slot_agent_is_running_away, 0), #Isn't routing.
            (agent_get_wielded_item, ":item", ":agent", 1), #Offhand.
            (gt, ":item", 0),
            (item_get_type, ":type", ":item"),
            (eq, ":type", itp_type_shield), #Shield equipped.
            (agent_get_attack_action, ":action", ":agent"),
            (eq, ":action", 0), #Free.
            (agent_get_horse, ":horse", ":agent"),
            (eq, ":horse", -1), #No horse.
            (agent_get_team, ":team", ":agent"),
            (agent_get_position, pos1, ":agent"),
            (assign, ":victim", -1),
            (assign, ":minimum_distance", 125),
            (try_for_agents, ":suspect"),
               (agent_is_alive, ":suspect"),
               (agent_is_human, ":suspect"),
               (agent_get_position, pos2, ":suspect"),
               (neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind basher.
               
               (agent_get_team, ":suspect_team", ":suspect"),
               (teams_are_enemies, ":suspect_team", ":team"),
               #(neq, ":suspect_team", ":team"),
               
               (get_distance_between_positions, ":distance", pos1, pos2),
               (le, ":distance", ":minimum_distance"),
               (assign, ":minimum_distance", ":distance"),
               (assign, ":victim", ":suspect"),
            (try_end),
            (ge, ":victim", 0),
            (agent_get_horse, ":horse", ":victim"),
            (eq, ":horse", -1),
            (agent_get_troop_id,":troop_no",":agent"),
            (try_begin),
              (troop_is_hero,":troop_no"),
              (store_sub,":timer",15,":level"),
            (else_try),
              (store_random_in_range, ":timer", 30, 60),
            (try_end),
            (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":timer"), #20 is 20*0.25=5seconds.  ## CC-D sp_agent->slot
            (agent_set_animation, ":agent", "anim_shield_bash_c09"),  ## CC-D bash->bash_c09
            (agent_get_troop_id, ":troop", ":agent"),
            (troop_get_type, ":type", ":troop"),
            (try_begin),
               (eq, ":type", tf_male),
               (agent_play_sound, ":agent", "snd_man_yell"),
            (else_try),
				(this_or_next|eq, ":type", tf_elf_female),
			   (this_or_next|eq, ":type", tf_gaolu_female),
			   (this_or_next|eq, ":type", tf_girl),
               (eq, ":type", tf_female),
               (agent_play_sound, ":agent", "snd_woman_yell"),
            (try_end),
            (agent_play_sound, ":victim", "snd_wooden_hit_low_armor_high_damage"),
            (agent_get_defend_action, ":action", ":victim"),
            (try_begin),
               (eq, ":action", 2), #Blocking.
               (neg|position_is_behind_position, pos1, pos2), #If basher isn't behind victim.
               (agent_get_wielded_item, ":item", ":victim", 1), #Offhand.
               (gt, ":item", 0),
               (item_get_type, ":type", ":item"),
               (eq, ":type", itp_type_shield),
               (agent_set_animation, ":victim", "anim_shield_bash_c09"),  ## CC-D bash->bash_c09
            (else_try),
				 #occc power bash perk
				 (try_begin),
					(agent_slot_eq, ":agent", slot_agent_can_powerbash, 1),
					(agent_set_animation, ":victim", "anim_strike_knockback_rolling", 0),
					(agent_deliver_damage_to_agent, ":agent", ":victim", 10),
				 (else_try),
					(agent_set_animation, ":victim", "anim_shield_strike_c09"),## CC-D strike->strike_c09
				 (try_end),
            (try_end),               
         (try_end),
         (agent_get_slot, ":timer", ":agent", slot_agent_shield_bash_timer),  ## CC-D sp_agent->slot
         (val_sub, ":timer", 1),
         (val_max, ":timer", 0),
         (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":timer"),  ## CC-D sp_agent->slot
      (try_end),
   ])
## Shield Bash End
##CC-C end

#occc start

occc_female_lords_show_face_in_castle = (ti_on_agent_spawn, 0, 0, [],
   [
      (store_trigger_param_1, ":agent_no"),
      (agent_is_non_player, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (is_between, ":troop_no", lords_begin, lords_end),#knight_2_michelle
      (neg|is_between, ":troop_no", "trp_knight_7_1", "trp_knight_8_1"),#not dark knight lords
	  (neq,":troop_no","trp_knight_2_michelle"),#michelle should wear her bicorn
	  (call_script, "script_cf_dplmc_troop_is_female", ":troop_no"),#female lords
	  (agent_get_item_slot,":item_id",":agent_no",4),#check head items
	  (gt, ":item_id", -1),
	  (agent_has_item_equipped,":agent_no",":item_id"),
	  (agent_unequip_item,":agent_no",":item_id"),

   ])


# Force mounted NPCs to switch their lance to other weapons. 
occc_siege_lance_switch = (ti_on_agent_spawn, 0, 0, [],
   [
      (store_trigger_param_1, ":agent_no"),
      (agent_is_non_player, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      #(agent_get_team, ":agent_team", ":agent_no"),
      #(this_or_next|eq, ":agent_team", "$defender_team"),
      #(eq, ":agent_team", "$defender_team_2"),
	  #(agent_get_troop_id, ":p_id", ":agent_no"),
      #(eq, ":agent_no", "trp_taiga_bandit"),
      #(agent_get_slot, ":lance", ":agent_no", slot_agent_use_polearm),
	  (agent_get_wielded_item, ":lance", ":agent_no", 0),
      (is_between, ":lance", ccc_charge_weapons_begin, ccc_charge_weapons_end),
      #(assign, ":cur_item", ":lance"),
      (try_begin),
        (agent_has_item_equipped, ":agent_no", ":lance"),
        (agent_unequip_item, ":agent_no", ":lance"),
        (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
        (try_begin),
          (eq, ":polearm_item", ":lance"),
          (agent_set_slot, ":agent_no", slot_agent_use_polearm, 0),
        (try_end),
        (assign, ":new_item", 0),
        (try_begin),
          (neg|agent_slot_eq, ":agent_no", slot_agent_use_two_hand, 0),
          (agent_get_slot, ":new_item", ":agent_no", slot_agent_use_two_hand),
        (else_try),
          (neg|agent_slot_eq, ":agent_no", slot_agent_use_one_hand, 0),
          (agent_get_slot, ":new_item", ":agent_no", slot_agent_use_one_hand),
        (try_end),
        (try_begin),
          (neq, ":new_item", 0),
          (agent_set_wielded_item, ":agent_no", ":new_item"),
        (try_end),
      (try_end),
   ])

#behind attack bonus from Brytenwalda
occc_custom_commander_critical_strike =(
  ti_on_agent_hit, 0, 0, [         (eq, "$g_occc_backattack_bonus", 1),
],
    [
      (store_trigger_param_1, ":inflicted_agent"),
      (store_trigger_param_2, ":dealer_agent"),
      (store_trigger_param_3, ":inflicted_damage"),
      
	  #(set_trigger_result, -1),
	  (gt, ":inflicted_damage", 0),
	  #(set_trigger_result, ":inflicted_damage"),
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (agent_is_human, ":dealer_agent"),
        (assign, ":dealer_item_id", reg0),
        (gt, ":dealer_item_id", -1),
        
        (try_begin), 
          ## knock_back between humans with melee weapons
          (agent_is_alive, ":inflicted_agent"),
          (agent_is_human, ":inflicted_agent"),
          (agent_get_position, pos1, ":inflicted_agent"),
          (agent_get_position, pos2, ":dealer_agent"),
          (try_begin),
            (position_is_behind_position, pos2, pos1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_polearm),
            # dest damage ratio is 1/2
            (assign, ":dest_damage", ":inflicted_damage"),
            (val_div, ":dest_damage", 2),
			
			##occc perk begin!!
			(try_begin),
				(agent_slot_eq, ":dealer_agent", slot_agent_can_backstab, 1),#occc perk backstab
				#gain twice damage
				(val_mul,":dest_damage",2),
			(try_end),
			##occc perk end!!

            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            (val_sub, ":inflicted_agent_hp", ":dest_damage"),
            #occc viking conquest process begin
            (try_begin),
              (lt,":inflicted_agent_hp",2),
              (assign,":inflicted_agent_hp",2), #no fatal.
            (try_end),
            #occc viking conquest process end
			
            (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
            # messages for player
            (assign, reg1, ":dest_damage"),
            (try_begin),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@Delivered {reg1} extra damage from behind!", 0xFF0000),

            (else_try),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@Received {reg1} extra damage from behind!", 0xFF0000),
            (try_end),
          (try_end),
        (else_try),
          # inflicted_agent is horse, dealer_troop is on foot and uses polearm or thrust
          (neg|agent_is_human, ":inflicted_agent"),
          (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
          (eq, ":dealer_agent_horse_id", -1),
          (agent_get_action_dir, ":action_dir", ":dealer_agent"),
          (item_get_type, ":item_type", ":dealer_item_id"),
          
          (assign, ":extra_damage_rate", 0),
          (try_begin),
            (eq, ":item_type", itp_type_polearm),
            (try_begin),
              (eq, ":action_dir", 0),
              (assign, ":extra_damage_rate", 180), #chief incrementa
		(store_random_in_range, ":random_no", 1, 100),
		(try_begin), #el caballo retrocede chief
			(le, ":random_no", 50),
			(agent_set_animation, ":inflicted_agent","anim_horse_rear"),
		(try_end),
            (else_try),
              (assign, ":extra_damage_rate", 120), #chief incrementa
            (try_end),
          (else_try),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":action_dir", 0),
            (assign, ":extra_damage_rate", 75),
          (try_end),
          (gt, ":extra_damage_rate", 0),
          (store_mul, ":extra_damage", ":inflicted_damage", ":extra_damage_rate"),
          (val_div, ":extra_damage", 100),
          (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
          (val_sub, ":inflicted_agent_hp", ":extra_damage"),
          #(val_max, ":inflicted_agent_hp", 0), occc - try to investigate companion "dies" bug
          (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
          # messages for player
          (assign, reg1, ":extra_damage"),
          (try_begin),
            (eq, ":dealer_agent", ":player_agent"),
            (try_begin),
              (agent_get_rider, ":rider_agent", ":inflicted_agent"),
              (gt, ":rider_agent", -1),
              (display_message, "@Delivered {reg1} extra damage to horse."),
            (else_try),
              (display_message, "@Delivered {reg1} extra damage."),
            (try_end),
          (try_end),
          (try_begin),
            (agent_get_horse, ":player_horse_id", ":player_agent"),
            (eq, ":player_horse_id", ":inflicted_agent"),
            (display_message, "@Horse received {reg1} extra damage."),
          (try_end),
        (try_end),
      (try_end),
    ])

occc_onehand_polearm_fix  = (ti_on_agent_hit, 0, 0, [(eq, "$g_occc_onehand_polearm_fix", 1)],
   [
    (store_trigger_param_1, ":agent"),
	(store_trigger_param_2, ":attacker"),
	(store_trigger_param_3, ":damage"),
	(assign, ":weapon", reg0),
	
	(assign, ":orig_damage", ":damage"),

	(le,":orig_damage",9),#
	#(assign, ":damage", 0),

		(agent_is_active, ":agent"),#
		(agent_is_alive, ":agent"),#
		(agent_is_human, ":agent"),#
		(gt, ":weapon", 0),
		(item_get_weapon_length, ":cur_weapon_le", ":weapon"), 
		(item_get_speed_rating, ":cur_weapon_sp", ":weapon"), 
		(ge, ":cur_weapon_sp", 78),  
        (item_get_type, ":wpn_type", ":weapon"),
        (eq, ":wpn_type", itp_type_polearm),
		(agent_get_horse, ":horse", ":attacker"),
		(eq, ":horse", -1),#while the attacker on foot
		(agent_get_wielded_item, ":item", ":attacker", 1), #Offhand.
		(gt, ":item", 0),
		(item_get_type, ":type", ":item"),
		(eq, ":type", itp_type_shield), #Shield equipped.

		(item_get_thrust_damage, ":damage_cal", ":weapon"),  #average 25
	
		(try_begin),
			(eq, ":orig_damage", 0),#0 penalty
			(val_sub, ":damage_cal", 7),#6->7 v0.2
		(try_end),
		
		#v0.1
		# (val_div, ":cur_weapon_le", 100),
		# (val_sub, ":damage", ":cur_weapon_le"),#the longer, more weaker
		
		#v0.2
		(val_div, ":cur_weapon_le", 40),
		(val_sub, ":cur_weapon_le", 1),
		(val_add, ":damage_cal", ":cur_weapon_le"),#the more longer spear, the more stronger bonus
		

		(agent_get_troop_id, ":troop", ":attacker"),
		(store_skill_level, ":level", "skl_power_strike", ":troop"),
		# (val_mul, ":level", 3),
		# (val_div, ":level", 2),
		
			##occc perk begin!!
		(try_begin),
			(agent_slot_eq, ":attacker", slot_agent_hoplite_bonus, 1),#occc perk hoplite
			#gain twice power strike bonus + more max damage
			(val_mul,":level",3),
			(assign,":maxdamage",7),
		(else_try),
			(assign,":maxdamage",4),
		(try_end),
			##occc perk end!!

		
		(val_add, ":damage_cal", ":level"),

		(agent_get_item_slot, ":body_armor", ":agent", 5),
		(try_begin),
			(gt,":body_armor",0),
			(item_get_body_armor, ":armor", ":body_armor"),  
			
			#*reduction ratio*
			#1  4  9 16 25   36 v0.1 [armor/10]^2
			#1  8 13 32 62 108 v0.1 [armor/10]^3/2
			#6 12 18 24 30 36 v0.2 [armor]*3/5
			
			# (val_mul, ":armor", 3), #2->3 v0.2
			# (val_div, ":armor", 5), #3->5 v0.2
			(val_add, ":armor", 5),
			(val_div, ":armor", 10),
			(store_mul,":reduction" ,":armor", ":armor"),
			(val_mul, ":reduction", ":armor"),
			(val_div, ":reduction", 2),

			(val_sub, ":damage_cal", ":reduction"),
		(try_end),

	#(try_end), 
	
	(gt, ":damage_cal", 0),
	(val_min, ":damage_cal", ":maxdamage"),
    (store_random_in_range, ":r", 0, 2),
	(val_add, ":damage_cal", ":r"),
	(store_add, ":orig_damage", ":damage_cal"),

	(try_begin),
		(ge, ":orig_damage", 3),	
	    (agent_play_sound,":agent","snd_metal_hit_low_armor_high_damage"),
		
		#agent grunt
		(agent_get_troop_id, ":p_id", ":agent"),	   
		(troop_get_type, ":is_female", ":p_id"),
		(try_begin),
			 (this_or_next|eq,":is_female",  12),#tf_elf_female
			 (this_or_next|eq, ":is_female", 10),#tf_gaolu_female
			 (this_or_next|eq, ":is_female", 9),#tf_girl
			 (eq, ":is_female", 1),#tf_female
			 (agent_play_sound, ":agent", "snd_woman_hit"),
		(else_try),
			 (agent_play_sound, ":agent", "snd_man_hit"),
		(try_end),

		(try_begin),
			(agent_get_horse, ":victim_horse", ":agent"),
			(eq, ":victim_horse", -1),#while the victim on foot
			(store_random_in_range,":anim",0,2),
			(try_begin),
				(eq,":anim",0),
				(agent_set_animation, ":agent", "anim_onehand_pole_chest_front"),#
			(else_try),
				(agent_set_animation, ":agent", "anim_onehand_pole_chest_front"),
			(try_end),
		(try_end),

	(else_try),
		(agent_play_sound,":agent","snd_metal_hit_low_armor_low_damage"),
	(try_end),
	
    (store_agent_hit_points, ":orig_hitpoints" , ":agent", 1),
	#(agent_deliver_damage_to_agent, ":attacker", ":agent", ":damage"),
	(assign, ":hit_change", ":orig_hitpoints"),
    (val_sub, ":hit_change", ":damage_cal"),
	
    (try_begin),
        (lt,":hit_change",2),
        (assign,":hit_change",2), #no fatal.
    (try_end),

	(agent_set_hit_points, ":agent", ":hit_change", 1),	

    #(store_agent_hit_points, ":hitpoints" , ":agent", 1),
    (val_sub, ":orig_hitpoints", ":hit_change"),
	(try_begin),
		(gt, ":orig_hitpoints", 0),
		(try_begin),
			(eq, ":agent", "$fplayer_agent_no"),
			(assign, reg1, ":damage_cal"),		
			(display_message, "@You received {reg1} extra damage!",0xff4040),
		(else_try),
			(eq, ":attacker", "$fplayer_agent_no"),
			(assign, reg1, ":damage_cal"),	
			(display_message, "@You strike for {reg1} bonus damage!"),
		(try_end),
	(try_end),
   ])

occc_elephant_trampling = (ti_on_agent_hit, 0, 0, [(neq|party_slot_eq, "p_main_party", slot_party_pref_dmg_tweaks, 1),],
    # Elephant Trample buff  
   [
    (store_trigger_param_1, ":agent"),
	(store_trigger_param_2, ":attacker"),
	(store_trigger_param_3, ":damage"),
	(assign, ":weapon", reg0),
	
	(assign, ":orig_damage", ":damage"),
	
	(agent_is_active, ":agent"), 
	(agent_is_alive, ":agent"), 
    (agent_is_human, ":agent"), 
	(try_begin),
	    (try_begin), #Horse Trample Buff
		    (neg|agent_is_human, ":attacker"),
            (eq, ":weapon", -1),
            (agent_get_item_id, ":horse", ":attacker"),
			
			(is_between, ":horse", "itm_occc_elephant1","itm_occc_donkey"),

			(gt, ":orig_damage", 2),#3->2
			(item_get_horse_charge_damage, ":horse_charge", ":horse"), #Approximation for weight  #1.161
            (try_begin),      
				(val_div, ":horse_charge", 9),#10->9
                (val_max, ":damage", ":horse_charge"),      
            (try_end),
			(try_begin),
				(agent_get_speed, pos0, ":attacker"),
				(position_get_y, ":forward_speed", pos0),
				(position_get_x, ":lateral_speed", pos0), #Double check
				(val_max, ":forward_speed", ":lateral_speed"), #Double check
				(convert_from_fixed_point, ":forward_speed"),
				(gt, ":forward_speed", 6),
				(val_mul, ":damage", 3),  ## CC-D adjust CtA Lv: x2 -> x1.5
				(val_div, ":damage", 2),  ## CC-D adjust CtA Lv
			(try_end),
        (try_end),
	(try_end), #Human v Horse
	
	(gt, ":damage", ":orig_damage"),
	(val_sub, ":damage", ":orig_damage"),
    (store_agent_hit_points, ":hitpoints" , ":agent", 1),
    (val_sub, ":hitpoints", ":damage"),
	(agent_set_hit_points, ":agent", ":hitpoints", 1),	
	
	(assign, reg2, -1),
	#(agent_get_horse,":playerhorse","$fplayer_agent_no"),
	(try_begin),
		#(try_begin),
	        #(eq, ":agent", ":playerhorse"),
			#(assign, reg2, 0),
		#(try_end),
		(neq, reg2, -1),
	    (assign, reg1, ":damage"),		
	    (display_message, "@{reg2?You:Your mount} received {reg1} extra damage!",0xff4040),
    (else_try),
	    #(try_begin),
		    #(eq, ":attacker", ":playerhorse"),
			#(assign, reg2, 0),
		#(try_end),
		(neq, reg2, -1),
		(assign, reg1, ":damage"),	
		(display_message, "@{reg2?You strike:Your horse charges} for {reg1} bonus damage!"),
    (try_end),
   ])
  

occc_extra_music_set =  (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
		 #occc extramusic
		 	#occc start
		(try_begin),
			(ge,"$occc_extramusic",1),
			(call_script, "script_occc_encounter_extra_music"),
			(assign,"$occc_extramusic",0),
		(try_end),#occc

         ])

occc_AI_horse_archer = (1, 0, 0, [(eq,"$g_occc_ai_improvement",1),],
  [       
        (set_fixed_point_multiplier, 1000),
        (get_player_agent_no, ":player_agent"),
        (agent_get_team,":player_team",":player_agent"),
        (try_begin),
            (eq,":player_team",0), #def=0
            (assign,":ally_num","$ccc_def_all_num"),
            (assign,":enemy_num","$ccc_atk_all_num"),
        (else_try),
            (assign,":ally_num","$ccc_atk_all_num"),
            (assign,":enemy_num","$ccc_def_all_num"),
        (try_end),

        (try_for_agents, ":agent_no"),
			(try_begin),
				(agent_is_alive, ":agent_no"),
				(agent_is_human, ":agent_no"),
				(agent_is_non_player, ":agent_no"),
                (agent_get_team,":agent_team",":agent_no"),
                
                (try_begin),
                    (eq,":agent_team",":player_team"), #def
                    (assign, ":check_agent_num", ":ally_num"),
                (else_try),
                    (assign, ":check_agent_num", ":enemy_num"),
                (try_end),
                (ge,":check_agent_num",9),#you need at least 8 ally to act effectively
                
				(agent_get_troop_id, ":troop", ":agent_no"),
				
				(neq,":troop","trp_kingdom_7_lord"),#Let Sauron Charge and guts his enemies
				(neg|is_between,":troop",lords_begin, lords_end),#not lords
				(neg|is_between,":troop","trp_foot_gunner","trp_new_array_a"),#not engineers
                
				#apply to only those upper 5 horse-archer skl lv troops
				(try_begin),
					(store_skill_level, ":level", "skl_horse_archery", ":troop"),
					(ge,":level",5),

					(neg|agent_slot_eq, ":agent_no", 1003, 1),
					(agent_get_horse, ":horse_no", ":agent_no"),
					(assign, ":melee_weapon", -1),
					(try_begin),
						(agent_slot_eq, ":agent_no", slot_agent_is_running_away, 0),
						#occc force rethink begin
						(try_begin),
							(gt, ":horse_no", -1),
							(assign,":cont",1),
						(else_try),
							(assign,":cont",0),
							(agent_clear_scripted_mode, ":agent_no"),
							#(agent_force_rethink, ":agent_no"),
						(try_end),
						(eq,":cont",1),
						#occc force rethink end
						(agent_get_team, ":team_no", ":agent_no"),
						(agent_get_division, ":class_no", ":agent_no"),
						(team_get_weapon_usage_order, ":weapon_usage_order", ":team_no", ":class_no"),
						(team_get_movement_order, ":movement_order", ":team_no", ":class_no"),
						(team_get_hold_fire_order, ":hold_fire", ":team_no", ":class_no"),
						(assign, ":thrown_ammo", 0),
						(assign, ":ranged_weapon", -1),
						(try_for_range, ":item", 0, 4),
						  (agent_get_item_slot, ":item_weapon", ":agent_no", ":item"),
						  (gt, ":item_weapon", 0),
						  (item_get_type, ":item_weapon_type", ":item_weapon"),
						  (try_begin),
							(eq, ":item_weapon_type", itp_type_thrown),
							(agent_get_ammo_for_slot, ":ammo_for_slot", ":agent_no", ":item"),
							(val_add, ":thrown_ammo", ":ammo_for_slot"),
						  (else_try),
							(this_or_next|eq, ":item_weapon_type", itp_type_bow),
							(this_or_next|eq, ":item_weapon_type", itp_type_pistol),
							(this_or_next|eq, ":item_weapon_type", itp_type_crossbow),#occc
							(eq, ":item_weapon_type", itp_type_musket),
							(assign, ":ranged_weapon", ":item_weapon"),
						  (else_try),
							(this_or_next|eq, ":item_weapon_type", itp_type_one_handed_wpn),
							(this_or_next|eq, ":item_weapon_type", itp_type_two_handed_wpn),
							(eq, ":item_weapon_type", itp_type_polearm),
							(assign, ":melee_weapon", ":item_weapon"),
						  (try_end),
						(try_end),
						(gt, ":ranged_weapon", -1),            
						(neg|item_has_property, ":ranged_weapon", itp_cant_reload_on_horseback),
						(neg|item_has_property, ":ranged_weapon", itp_cant_use_on_horseback),
						(agent_get_ammo, ":ammo", ":agent_no", 0),
						(val_sub, ":ammo", ":thrown_ammo"),
						#occc force rethink begin
						(try_begin),
							(gt, ":ammo", 0),
							(assign,":cont",1),
						(else_try),
							(assign,":cont",0),
							(agent_clear_scripted_mode, ":agent_no"),
							#(agent_force_rethink, ":agent_no"),
						(try_end),
						(eq,":cont",1),
						#occc force rethink end
						(agent_set_slot, ":agent_no", 1003, 2),
						(neg|eq, ":hold_fire", aordr_hold_your_fire),
						(neg|eq, ":weapon_usage_order", wordr_use_melee_weapons),
						(eq, ":movement_order", mordr_charge),
						(agent_get_position, pos50, ":agent_no"), 
						(agent_get_speed, pos31, ":agent_no"),
						(position_get_y,":speed_y",pos31),
						(assign, ":distance_closest", 100000),#1000m
						(assign, ":enemies_closest", -1),
						(try_for_agents, ":enemies"),
							(agent_is_alive, ":enemies"),
							(agent_is_human, ":enemies"),
							(agent_get_position, pos36, ":enemies"),
							(agent_get_team, ":enemies_team", ":enemies"),
							(teams_are_enemies, ":team_no", ":enemies_team"),
							(get_distance_between_positions, ":distance", pos50, pos36),
							(try_begin),
							  (agent_slot_eq, ":enemies", slot_agent_is_running_away, 1),
							  (val_add, ":distance", 10000),
							(try_end),
							(try_begin),
							  (agent_get_horse, ":enemies_horse", ":enemies"),
							  (gt, ":enemies_horse", -1),
							  (agent_get_speed, pos32, ":enemies"),
							  (position_get_y,":speed_y_enemies",pos32),
							  (val_sub, ":speed_y_enemies", ":speed_y"),
							  (store_div, ":distance_cavalry", ":speed_y_enemies",5),
							  (val_max, ":distance_cavalry", 0),
							  (val_add, ":distance_cavalry", 500),
							  (val_sub, ":distance", ":distance_cavalry"),
							(else_try),
							  (agent_get_wielded_item, ":weapon_hold", ":enemies", 1),
							  (neg|gt, ":weapon_hold", 1),
							  (val_sub, ":distance", 500),
							(try_end),
							(lt, ":distance", ":distance_closest"),
							(assign, ":distance_closest", ":distance"),
							(assign, ":enemies_closest", ":enemies"),
						(try_end),
						(neq, ":enemies_closest", -1),
						(agent_get_position, pos51, ":enemies_closest"),
						(get_distance_between_positions, ":distance_true", pos50, pos51),
						(try_begin),
						  (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
						  (gt,":distance_true",200),
						  (agent_set_wielded_item, ":agent_no", ":ranged_weapon"),
						(else_try),
						  (le, ":distance_true", 200),
						  (gt, ":melee_weapon", -1),
						  (agent_set_wielded_item, ":agent_no", ":melee_weapon"),
						(try_end),
						(assign, ":speed_limit", 1000),
						(try_begin),
							(agent_get_wielded_item, ":weapon_hold", ":agent_no", 0),
							(gt, ":weapon_hold", 0),
							(item_get_type, ":weapon_type", ":weapon_hold"),
							(this_or_next|eq, ":weapon_type", itp_type_bow),
							(this_or_next|eq, ":weapon_type", itp_type_pistol),
							(this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
							(eq, ":weapon_type", itp_type_musket),
							(agent_get_bone_position, pos53, ":agent_no", 8, 1),
							(agent_get_bone_position, pos54, ":enemies_closest", 9, 1),
							(position_has_line_of_sight_to_position, pos53, pos54),
							(agent_set_look_target_agent, ":agent_no", ":enemies_closest"),
							(try_begin),
							  (assign, ":shoot_distance", 4000),
							  (agent_get_attack_action, ":attack_action", ":agent_no"),
							  (eq, ":attack_action", 1),
							  (try_begin),
								(gt, ":distance_closest", 700),
								(le, ":distance_closest", ":shoot_distance"),
								(store_div, ":speed_limit", ":speed_y",2000),#
								(val_max, ":speed_limit", 0),
							  (try_end),
							  (this_or_next|eq, ":weapon_type", itp_type_pistol),
							  (this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
							  (this_or_next|eq, ":weapon_type", itp_type_musket),
							  (eq, ":weapon_type", itp_type_bow),
							  (try_begin),
								(le, ":distance_true", ":shoot_distance"),
								(agent_set_defend_action, ":agent_no", -2, 1),
								(agent_set_attack_action, ":agent_no", 3, 0),
							  (else_try),
								(gt, ":distance_true", ":shoot_distance"),
								(agent_set_attack_action, ":agent_no", -2, 1),
								(agent_set_defend_action, ":agent_no", 3, 1),
							  (try_end),
							(else_try),
							  (this_or_next|eq, ":weapon_type", itp_type_pistol),
							  (this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
							  (this_or_next|eq, ":weapon_type", itp_type_musket),
							  (eq, ":weapon_type", itp_type_bow),
							  (le, ":distance_true", ":shoot_distance"),#
							  (agent_get_combat_state, ":combat_state", ":agent_no"),
							  (neq, ":combat_state", 8),
							  (agent_set_attack_action, ":agent_no", 3, 1),
							(try_end),
						(try_end),
						(agent_set_speed_limit, ":agent_no", ":speed_limit"),
						(try_begin),
						  (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
						  (lt, ":distance_closest", 10000),
						  (try_begin),
							(get_scene_boundaries, pos2, pos3),
							(position_transform_position_to_local, pos4, pos2,pos50),
							(position_get_x, ":left", pos4),
							(position_get_y, ":down", pos4),
							(position_transform_position_to_local, pos4, pos2,pos3),
							(position_get_x, ":map_width", pos4),
							(position_get_y, ":map_height", pos4),
							(store_sub, ":right", ":map_width", ":left"),
							(store_sub, ":up", ":map_height", ":down"),
							(position_transform_position_to_local, pos4, pos50, pos51),
							(position_get_x, ":enemies_x", pos4),
							(position_get_y, ":enemies_y", pos4),
							(assign, ":effect", 0),
							(try_begin),
							  (neg|gt, ":distance_closest", 1000),
							  (assign, ":effect", -78000),
							(else_try),
							  (gt, ":distance_closest", 2000),#
							  (store_sub,":effect", ":distance_closest", 0),
							  (val_mul, ":effect", 5),
							  (val_clamp, ":effect", 35000, 90000),
							(try_end),
							(assign, ":distance_to_boundary", 30000),
							(val_min, ":distance_to_boundary", ":left"),
							(val_min, ":distance_to_boundary", ":up"),
							(val_min, ":distance_to_boundary", ":right"),
							(val_min, ":distance_to_boundary", ":down"),
							(try_begin),
							  (lt, ":distance_to_boundary", 30000),
							  (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
							  (store_div, ":map_middle_x", ":map_width", 20),
							  (store_div, ":map_middle_y", ":map_height", 20),
							  (position_copy_origin, pos4, pos2),
							  (position_move_x, pos4, ":map_middle_x", 1),
							  (position_move_y, pos4, ":map_middle_y", 1),
							  (get_distance_between_positions,":distance_middle", pos4, pos50),
							  (position_transform_position_to_local, pos4, pos50, pos4),
							  (position_get_x, ":map_middle_x", pos4),
							  (position_get_y, ":map_middle_y", pos4),
							  (val_mul, ":map_middle_x", 100),
							  (val_mul, ":map_middle_y", 100),
							  (val_mul, ":enemies_x", 100),
							  (val_mul, ":enemies_y", 100),
							  (store_div,":cos_middle",":map_middle_x",":distance_middle"),
							  (store_div,":sin_middle",":map_middle_y",":distance_middle"),
							  (store_div,":cos_enemies",":enemies_x",":distance_true"),
							  (store_div,":sin_enemies",":enemies_y",":distance_true"),
							  (store_acos, ":angle_cos", ":cos_middle"),
							  (store_asin, ":angle_sin", ":sin_middle"),
							  (store_acos, ":angle_cos_enemies", ":cos_enemies"),
							  (store_asin, ":angle_sin_enemies", ":sin_enemies"),
							  (try_begin),
								(lt, ":angle_sin", 0),
								(val_mul,":angle_cos", -1),
								(val_add,":angle_cos", 360000),
							  (try_end),
							  (try_begin),
								(lt, ":angle_sin_enemies", 0),
								(val_mul,":angle_cos_enemies", -1),
								(val_add,":angle_cos_enemies", 360000),
							  (try_end),
							  (store_sub, ":k2", ":angle_cos", ":angle_cos_enemies"),
							  (val_sub, ":k2", 270000),
							  (val_sub, ":k2", ":effect"),
							  (store_add, ":effect", ":k2", ":effect"),
							  (try_begin),
								(lt, ":angle_cos", ":angle_cos_enemies"),
								(val_add, ":effect", 360000),
							  (try_end),
							  (val_clamp,":effect",-210000, 15000),
							  (agent_set_attack_action, ":agent_no", -2, 1),
							  (agent_set_defend_action, ":agent_no", 3, 1),
							(try_end),
							(store_cos, ":cos", ":effect"),
							(store_sin, ":sin", ":effect"),
							(store_mul, ":k_x1", ":cos", ":enemies_y",),
							(store_mul, ":k_x2", ":sin", ":enemies_x",),
							(store_mul, ":k_y1", ":sin", ":enemies_y",),
							(store_mul, ":k_y2", ":cos", ":enemies_x",),
							(store_add, ":move_x",":k_x1", ":k_x2"),
							(store_sub, ":move_y",":k_y1", ":k_y2"),
							(position_move_x, pos50, ":move_x", 0),
							(position_move_y, pos50, ":move_y", 0),
						  (try_end),
						  (agent_set_scripted_destination, ":agent_no", pos50, 1),
						(else_try),
						  (agent_clear_scripted_mode, ":agent_no"),
						  (agent_force_rethink, ":agent_no"),
						(try_end),
					(else_try),
						(try_begin),
						  (agent_slot_eq, ":agent_no", 1003, 0),
						  (agent_set_slot, ":agent_no", 1003, 1),
						(else_try),
						  (agent_slot_eq, ":agent_no", 1003, 2),
						  (this_or_next|agent_slot_eq, ":agent_no", slot_agent_is_running_away, 1),
						  (this_or_next|lt, ":horse_no", 0),
						  (this_or_next|eq, ":ammo", 0),
						  (this_or_next|eq, ":hold_fire", aordr_hold_your_fire),
						  (this_or_next|eq, ":weapon_usage_order", wordr_use_melee_weapons),
						  (neq, ":movement_order", mordr_charge),
						  (agent_clear_scripted_mode, ":agent_no"),
						  (agent_set_speed_limit, ":agent_no", 100),
						  (agent_force_rethink, ":agent_no"),
						  (agent_set_slot, ":agent_no", 1003, 3),
						  (this_or_next|eq, ":hold_fire", aordr_hold_your_fire),
						  (eq, ":ammo", 0),
						  (gt, ":melee_weapon", -1),
						  (agent_set_wielded_item, ":agent_no", ":melee_weapon"),
						(try_end),
					(try_end),
				(else_try),
					(agent_clear_scripted_mode, ":agent_no"),
				(try_end),
			(try_end),
        (try_end),
  ])

#OSP decapitation

occc_dismemberment_mod_decap = (ti_on_agent_hit, 0, 0, [(eq,"$g_occc_decapitation",1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   
   (neq, ":victim_agent", -1),
    #(agent_is_alive, ":victim_agent"),
   (try_begin), #-- Decapitations --#
 	 # (agent_is_active, ":victim_agent"),
	  (agent_is_alive, ":victim_agent"),#to avoid error
      (agent_is_human, ":victim_agent"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (neq, ":victim_troop", "trp_player"),
	  (neg|is_between, ":victim_troop", "trp_kingdom_heroes_including_player_begin", "trp_heroes_end"),
	  (troop_get_type,":victim_gender",":victim_troop"),
	  (lt, ":victim_gender", 2),#undeads and others wont get decapitated
	  (ge, ":attacker_item", 0),
	  
	  (item_get_swing_damage_type, ":swing_type", ":attacker_item"),#check swing damage type
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),#item_get_swing_damage_type
		  (neq,":swing_type", 2),#Not Blunt type
		  #(neg|is_between, ":attacker_item", "itm_wooden_stick", "itm_scythe"),### List of weapons that cannot decapitate 
		  #(neg|is_between, ":attacker_item", "itm_staff", "itm_glaive"),## This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neg|is_between, ":attacker_item", "itm_kanasaibo", "itm_katana_shield"),
		  
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  
	  
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", 30), ### Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  (agent_get_item_slot, ":item", ":victim_agent", 4), #check head slot
	  (neq,":item", "itm_ccc_ghost_head"),#you cant behead ghost
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", 3), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game). 
		  #occc 4->3
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, 100), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
#	  (assign, ":head_type", "itm_cut_off_head_male"),#%%%%%%%%%%%%%%
#	  #(agent_get_troop_id, ":victim_troop", ":victim_agent"),
#	  (try_begin),
#	    (ge, ":victim_troop", 0),
#		#(troop_get_type,":victim_gender",":victim_troop"),
#		(eq, ":victim_gender", 1),
#		(assign, ":head_type", "itm_cut_off_head_female"),#%%%%%%%%%%%%%%
#	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      #(agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_ccc_ghost_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_occc_decapitation", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	 (try_begin), 
	  #(neq, ":item", "itm_occc_shadow_skull_head"), #
	  #(neq,":item", "itm_ccc_skull_head"),#
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(this_or_next|eq, ":victim_gender", tf_elf_female),
		(this_or_next|eq, ":victim_gender", tf_gaolu_female),
		(this_or_next|eq, ":victim_gender", tf_girl),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	 (try_end),


	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		#(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		#(str_store_troop_name, s0, ":attacker_troop"),

		#(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		#(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  #(get_player_agent_no, ":my_agent"),
	  #(agent_get_team, ":my_team", ":my_agent"),
	  #(agent_get_team, ":victim_team", ":victim_agent"),
	  #(try_begin), ### Display it!
	#	  (neq, ":my_team", ":victim_team"),
	#	  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  #(else_try),
	#	  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  #(try_end),
   (try_end), #-- Decapitations END --#
   
   ])

  

  		# for leeching effects such as the doom jav and healing armour.
occc_item_passive_effect = (5, 0, 0, [],
		[
          (try_for_agents, ":agent_no"),
            (agent_is_active, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_get_item_slot, ":body_armour", ":agent_no", 4),
            (try_begin),
              (eq, ":body_armour", "itm_mm_pagan_wolfmask"),
              (store_agent_hit_points, ":agent_health", ":agent_no", 1),
              (val_add, ":agent_health", 5),
              (agent_set_hit_points, ":agent_no", ":agent_health", 1),
              (store_agent_hit_points, ":agent_health", ":agent_no", 0),
              (val_min, ":agent_health", 100),
              (agent_set_hit_points, ":agent_no", ":agent_health", 0),
            (try_end),            

		])#LEGACY

  
# OSP kick
# AI Kick by Zarthas (modified by Garedyr)
occc_AI_kick =  (
         3, 0, 0,
       [(eq,"$g_occc_ai_improvement",1),], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 12),
		(le,":kickchance",2), 
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		#only those upper 5 athletics skl lv troops use kick
		(agent_get_troop_id, ":troop", ":agent"),
		(store_skill_level, ":level", "skl_athletics", ":troop"),
		(ge,":level",5),
		(agent_is_active, ":agent"),
		#-----------------------------------Garedyr begin
		(agent_get_horse, ":horse", ":agent"),
		(eq, ":horse", -1), #agent cannot be mounted
		#-----------------------------------Garedyr end
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 85),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		#-----------------------------------Garedyr begin
		(agent_get_horse, ":suspect_horse", ":suspect"),
		(eq, ":suspect_horse", -1), #suspect agent cannot be mounted too
		#-----------------------------------Garedyr end
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
				#(display_message, "@Agent kicks."),
		(agent_set_animation, ":agent", "anim_prepare_kick_0"),
		(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),


		(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
        (agent_play_sound, ":suspect", "snd_wooden_hit_low_armor_high_damage"),#occc plus
	(try_end),])

occc_hit_effects = (ti_on_agent_hit, 0, 0, [],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage_orig"),
   
   # (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   # (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   
   (neq, ":victim_agent", -1),
   (assign,":damage",":damage_orig"),
   (try_begin), 
  	  (agent_is_active, ":victim_agent"),
	  (agent_is_alive, ":victim_agent"),#to avoid error
      (agent_is_human, ":victim_agent"),

	  
	  (try_begin),##############occc force reflect################
		  (agent_slot_eq, ":victim_agent", slot_agent_saber_reflect, 1),#occc
		  (agent_get_wielded_item, ":item", ":victim_agent", 0), 
		  (gt,":item",0),
          (item_get_type, ":item_type", ":item"),
		  (is_between, ":item", "itm_occc_moonlight","itm_occc_ccd_smart_full_body_test"),#has lightsaber

		  (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
          (agent_get_position, pos1, ":victim_agent"),
          (agent_get_position, pos2, ":attacker_agent"),
          (try_begin),
            (neg|position_is_behind_position, pos2, pos1),
			(gt,reg0,0),
            (item_get_type, ":item_type", reg0),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (this_or_next|eq, ":item_type", itp_type_thrown),
			(eq, ":item_type", itp_type_musket),
			#(str_store_item_name, s5, reg0),
			# (agent_set_max_hit_points, ":victim_agent", 300, 1),#for test
            (agent_play_sound,":victim_agent", "snd_occc_saber_hit"),

            # (store_agent_hit_points, ":inflicted_agent_hp", ":victim_agent", 1),
            # (val_add, ":inflicted_agent_hp", ":damage"),
			(get_distance_between_positions, ":distance", pos1, pos5), 
			(try_begin), ###head
				(is_between, ":distance", 145, 200), ### Check to see if the hit is within the allowed area
				(agent_set_animation, ":victim_agent", "anim_vader_parry_head_1", 1),
				
			(else_try),  ###body
				(is_between, ":distance", 90, 145), 
				(store_random_in_range,":rand",0,2),
				(try_begin),
					(eq,":rand", 0),
					(agent_set_animation, ":victim_agent", "anim_vader_parry_right_1", 1),
				(else_try),
					(agent_set_animation, ":victim_agent", "anim_vader_parry_left_1", 1),
				(try_end),
				
			(else_try),  ###foot
				(agent_set_animation, ":victim_agent", "anim_vader_parry_low_1", 1),
			(try_end),
	  

            #(agent_set_hit_points, ":victim_agent", ":inflicted_agent_hp", 1),
			(set_trigger_result, 0),
            # messages for player
            (assign, reg1, ":damage"),
			(get_player_agent_no, ":player_agent"),
			
            (try_begin),
              (eq, ":attacker_agent", ":player_agent"),
              (display_message, "@Damn! Deflected!"),
            (else_try),
              (eq, ":victim_agent", ":player_agent"),
              (display_message, "@Deflected!"),
            (try_end),
			
          (try_end),
	  (else_try),##############occc sword master reflect################
		  (agent_slot_eq, ":victim_agent", slot_agent_doublehanded_reflect, 1),#occc
		  (agent_get_horse, ":horse_no", ":victim_agent"),
          (neg|gt, ":horse_no", 0),#not mounted
		  (agent_get_wielded_item, ":item", ":victim_agent", 0), 
		  (gt,":item",0),
          (item_get_type, ":item_type", ":item"),
		  (eq, ":item_type", itp_type_two_handed_wpn),#has twohanded weapon
		  (item_get_swing_damage_type, ":swing_type", ":item"),#check swing damage type
		  (neq,":swing_type", 2),#Not Blunt type

		  (agent_get_troop_id, ":victim_troop", ":victim_agent"),	
 		  (store_proficiency_level, ":twohanded_skill", ":victim_troop", wpt_two_handed_weapon),#get proficiency
		  (ge,":twohanded_skill",270),#need atleast 270 skill level
		  
		  
		  
		  
		  
		  (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
          (agent_get_position, pos1, ":victim_agent"),
          (agent_get_position, pos2, ":attacker_agent"),
          (try_begin),
            (neg|position_is_behind_position, pos2, pos1),
			(gt,reg0,0),
            (item_get_type, ":item_type", reg0),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (eq, ":item_type", itp_type_crossbow),#bow or musket
			#(str_store_item_name, s5, reg0),
			# (agent_set_max_hit_points, ":victim_agent", 300, 1),#for test

			(item_get_slot,":broadness",":item",slot_item_broadness),
			
			(get_distance_between_positions, ":distance", pos1, pos5), 
			(get_player_agent_no, ":player_agent"),
			(try_begin),#if only not player
				(neq, ":victim_agent", ":player_agent"),
				(store_random_in_range,":r",0,99),
				(val_div,":twohanded_skill",12),
				(val_add,":twohanded_skill",":broadness"),
				(le,":r",":twohanded_skill"),
				
				(try_begin), ###head
					(is_between, ":distance", 145, 200), ### Check to see if the hit is within the allowed area
					(agent_set_animation, ":victim_agent", "anim_vader_parry_head_1", 1),

				(else_try),  ###body
					(is_between, ":distance", 90, 145), 
					(store_random_in_range,":rand",0,2),
					(try_begin),
						(eq,":rand", 0),
						(agent_set_animation, ":victim_agent", "anim_vader_parry_right_1", 1),
					(else_try),
						(agent_set_animation, ":victim_agent", "anim_vader_parry_left_1", 1),
					(try_end),
					
				(else_try),  ###foot
					(agent_set_animation, ":victim_agent", "anim_vader_parry_low_1", 1),
					
				(try_end),
		  
               (agent_play_sound,":victim_agent", "snd_hit_metal_metal"),

				#(agent_set_hit_points, ":victim_agent", ":inflicted_agent_hp", 1),
				(set_trigger_result, 0),
				# messages for player
				(assign, reg1, ":damage"),
				
				(try_begin),
				  (eq, ":attacker_agent", ":player_agent"),
				  (display_message, "@Damn! Deflected!"),
				(try_end),
			(else_try),#Player
               (agent_get_defend_action, ":defend_action", ":player_agent"),
               (eq, ":defend_action", 2), #you must be blocking
               (agent_get_action_dir, ":action_dir_defender", ":player_agent"),

 			    (assign, ":actions_match", 0),
				(try_begin), ###head
					(eq, ":action_dir_defender", 3),
					(store_sub,":cover",145,":broadness"),
					(is_between, ":distance", ":cover", 200), ### Check to see if the hit is within the allowed area
					(agent_set_animation, ":victim_agent", "anim_vader_parry_head_1", 1),
					(assign, ":actions_match", 1),
				(else_try),  ###body
					(this_or_next|eq, ":action_dir_defender", 2), #left
					(eq, ":action_dir_defender", 1), #right
					(store_add,":cover",145,":broadness"),
					(is_between, ":distance", 80, ":cover"), 
					(try_begin),
						(eq, ":action_dir_defender", 1),
						(agent_set_animation, ":victim_agent", "anim_vader_parry_right_1", 1),
					(else_try),
						(agent_set_animation, ":victim_agent", "anim_vader_parry_left_1", 1),
					(try_end),
					(assign, ":actions_match", 1),
				(else_try),  ###foot
					(is_between, ":distance", 0, 80), 
					(eq, ":action_dir_defender", 0),
					(agent_set_animation, ":victim_agent", "anim_vader_parry_low_1", 1),
					(assign, ":actions_match", 1),
				(try_end),
		  
				(eq,":actions_match", 1),#parry successful 
				#(agent_set_hit_points, ":victim_agent", ":inflicted_agent_hp", 1),
				(set_trigger_result, 0),
				# messages for player
				(assign, reg1, ":damage"),
                (display_message, "@Deflected!"),
				(agent_play_sound,":victim_agent", "snd_hit_metal_metal"),

            (try_end),
      (try_end),
      (try_end),
	  
	  (try_begin),#LAST STAND
		  (agent_slot_eq, ":victim_agent", slot_agent_can_laststand, 1),#occc perk laststand
		  (try_begin),
			(ge, "$cheat_mode", 1),
			(display_message,"@OCCC DEBUG:Laststand checked."),
		  (try_end),
		  (store_agent_hit_points, ":hp", ":victim_agent", 0),
		  (le, ":hp", 55), ### have less than 55% HP
		  (ge, ":damage", 1),#at least 1 damage
		  #gain bonus!
		  (call_script,"script_occc_tweak_use_speed_modifier",":victim_agent",20),
		  (call_script,"script_occc_tweak_damage_modifier",":victim_agent",20),
		  (call_script,"script_occc_tweak_speed_modifier",":victim_agent",15),


		  (agent_set_slot, ":victim_agent", slot_agent_can_laststand, 0),
		  
		  
		  # (agent_get_troop_id, ":troop_no", ":victim_agent"),	   
          # (troop_get_type,":type",":troop_no"),
          # (try_begin),
		    # (this_or_next|eq,":type",tf_nordic_man),
            # (eq,":type",0), #man
            # (agent_play_sound,":victim_agent", "snd_man_yell"),
          # (else_try),
            # (agent_play_sound,":victim_agent", "snd_woman_yell"),
          # (try_end),

          # messages for player
          (try_begin),
			  (get_player_agent_no, ":player_agent"),
			  (eq, ":victim_agent", ":player_agent"),
			  (play_sound, "snd_ccd_mind_arrow_charge"),
			  (display_message, "@You gain Last Stand Bonus!", 0xFF0000),
          (try_end),

	  
	  (try_end),

	  
	  (try_begin),#NINELIVES
		  (agent_slot_eq, ":victim_agent", slot_agent_can_ninelives, 1),#occc perk ninelives
		  (assign,":damage",":damage_orig"),
		  (try_begin),
			(ge, "$cheat_mode", 1),
			(display_message,"@OCCC DEBUG:Ninelives checked."),
		  (try_end),
		  (le, ":damage", 110),
		  (store_agent_hit_points, ":hp", ":victim_agent", 1),
		  (val_add, ":hp", 3), ### Victim must have the negative of this hp or below after hit
		  (ge, ":damage", ":hp"),#receiving killing blow

		  (store_add,":restore_hp",":damage",5),
          (agent_set_hit_points, ":victim_agent", ":restore_hp", 1),
		  (agent_set_slot, ":victim_agent", slot_agent_can_ninelives, 0),
		  # (store_sub,":damage",":hp",6),
		  
		  # (set_trigger_result, ":damage"),

		  (agent_get_troop_id, ":troop_no", ":victim_agent"),	   
          (troop_get_type,":type",":troop_no"),
          (try_begin),
		    (this_or_next|eq,":type",tf_nordic_man),
            (eq,":type",0), #man
            (agent_play_sound,":victim_agent", "snd_man_yell"),
          (else_try),
            (agent_play_sound,":victim_agent", "snd_woman_yell"),
          (try_end),

          # messages for player
          (try_begin),
			  (get_player_agent_no, ":player_agent"),
			  (eq, ":victim_agent", ":player_agent"),
			  (display_message, "@You have managed to survive!", 0xFF0000),
          (try_end),
		  
		  (try_begin),
			(ge, "$cheat_mode", 1),
			(display_message,"@OCCC DEBUG:Ninelives triggered."),
		  (try_end),
	  (try_end),
		  
   	  ##############occc horo################
	  (try_begin),
		(agent_get_item_slot, ":armor", ":victim_agent", 5),
		(agent_get_troop_id, ":troop_no", ":victim_agent"),	#Skeletons
        (troop_get_type,":type",":troop_no"),#Skeletons
        
        (this_or_next|eq, ":type", tf_skeleton),
		(is_between, ":armor", horo_armors_begin, horo_armors_end),#
		
		(gt,reg0,0),
		(item_get_type, ":item_type", reg0),
		(this_or_next|eq, ":item_type", itp_type_crossbow),
        (eq, ":item_type", itp_type_bow),
		
		(copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
		(agent_get_position, pos4, ":victim_agent"),
		(get_distance_between_positions, ":distance", pos4, pos5), 
		(agent_get_horse, ":is_mounted", ":victim_agent"),
		(try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
			(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
			(assign, ":min_distance", 160),
			(assign, ":max_distance", 240),
		(else_try),  ### If the agent is on foot, these values are used
			(assign, ":min_distance", 80), 
			(assign, ":max_distance", 160), 
		(try_end),
		(is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area

		(val_div, ":damage", 3),
		(set_trigger_result, ":damage"),
					

		
	  (try_end),
	  
   (try_end), 
   
   ])

occc_set_agents_variable = (0, 0, ti_once, [],
[
	(assign,"$occc_is_there_cheerer",0),
	(assign,"$occc_is_there_musician",0),
    (party_get_current_terrain, "$g_occc_fight_terrain", "p_main_party"),
])

occc_spawn_legionary_gurantee_pilum = (ti_on_agent_spawn, 0, 0, [],
   [
      (store_trigger_param_1, ":agent_no"),
      #(agent_is_non_player, ":agent_no"),
      (agent_is_human, ":agent_no"),
      # (agent_is_alive, ":agent_no"),
	  # (agent_is_active, ":agent_no"),

	  (agent_get_troop_id, ":p_id", ":agent_no"),	   
	  (is_between,":p_id",legionary_begin, legionary_end),#legionaries

	  
	  (assign,":need_pilum",1),
      (try_for_range, ":cur_slot", 0, 4),#check no pilum
              (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
              (gt, ":cur_weapon", 0),
			  (item_get_type, ":type", ":cur_weapon"),
			  (try_begin),
				  (eq, ":type", itp_type_thrown),
				  (assign,":need_pilum",0),
			  (try_end),
      (try_end),
	  (eq,":need_pilum",1),#if he has no pilum at first, continue
	  
	  
	  #check trp id 
	  (try_begin),
		(is_between,":p_id",legionary_begin, "trp_occc_rhodok_late_cohors"),#Early Rhodoks
		(try_begin),
			(store_character_level, ":level", ":p_id"),
			(ge,":level",23),#upper than 23 lv
			(agent_equip_item, ":agent_no", "itm_ccc_throwing_spear_roma_pilum_w"),
		(else_try),
			(agent_equip_item, ":agent_no", "itm_ccc_throwing_spear_roma_pilum"),
		(try_end),
	  (else_try),
		(is_between,":p_id","trp_occc_rhodok_late_legio", "trp_occc_undead_centurion"),#Late Rhodoks
		(agent_equip_item, ":agent_no", "itm_war_darts"),
	  (try_end),
	  
		# (try_begin),#debug
		 # (eq, "$cheat_mode", 1),
		 # (display_message, "@OCCC DEBUG : pilum given to a legionary!"),
		# (try_end),


   ])

occc_spawn_agents_setting = (ti_on_agent_spawn, 0, 0, [],
   [
      (store_trigger_param_1, ":agent_no"),
      #(agent_is_non_player, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
	  (agent_is_active, ":agent_no"),

	  (agent_get_troop_id, ":p_id", ":agent_no"),	
      
      #race check
      (troop_get_type,":type",":p_id"),#Skeletons
        
      
	  (try_begin),
		(eq, ":type", tf_skeleton),#skeleton penalty
		(call_script,"script_occc_tweak_reload_speed_modifier",":agent_no",-10),
		(call_script,"script_occc_tweak_use_speed_modifier",":agent_no",-10),
	  (try_end),
      
	  #check trp id 
	  (try_begin),
		(eq, ":p_id", "trp_occc_rhodok_signifer"),#signifer
		(assign,"$occc_is_there_cheerer",1),
	  (else_try),
		(eq, ":p_id", "trp_occc_vaegir_musician"),#musician
		(assign,"$occc_is_there_musician",1),
	  # (else_try),
		# (eq, ":p_id", "trp_knight_7_vader"),#vader
		# (eq, "$occc_boss_agent", 0),
		
		# (assign,"$occc_boss_agent",":agent_no"),#set

	  #weather bonus start 
	  (else_try),#dark knight troops night bigger bonus 
		(is_currently_night),
		(this_or_next|eq,":p_id","trp_ccc_vaegir_legend_gunman_2"),#vaegir highlanders
		(this_or_next|is_between,":p_id","trp_ore_shadow_recruit","trp_sunset_peasant"),#ninjas
		(this_or_next|is_between,":p_id","trp_ccc_yamato_kunoiti","trp_ccc_yamato_miko"),#kunoitis
		(is_between,":p_id","trp_ccc_dark_knight_tribesman","trp_occc_hellas_tribesman"),
		(call_script,"script_occc_tweak_speed_modifier",":agent_no",12),
		(call_script,"script_occc_tweak_reload_speed_modifier",":agent_no",12),
		(call_script,"script_occc_tweak_use_speed_modifier",":agent_no",12),
		(call_script,"script_occc_tweak_accuracy_modifier",":agent_no",12),

	  (else_try),#nord raider troops night bonus
		(is_currently_night),
		(is_between, ":p_id", "trp_ccc_nord_barbarian","trp_ccc_nord_long_bow"),
		(call_script,"script_occc_tweak_speed_modifier",":agent_no", 4),
		(call_script,"script_occc_tweak_accuracy_modifier",":agent_no", 4),
		(call_script,"script_occc_tweak_use_speed_modifier",":agent_no",4),
	  (else_try),#sarranid troops get desert bonus 
		(is_between, ":p_id", "trp_sarranid_recruit2","trp_ccc_dark_knight_tribesman"),
		(eq, "$g_occc_fight_terrain", rt_desert),
		(call_script,"script_occc_tweak_speed_modifier",":agent_no",4),
		(call_script,"script_occc_tweak_accuracy_modifier",":agent_no",4),
	  (else_try),#cossacks get big snow bonus  
		(is_between,":p_id",cossacks_begin,cossacks_end),
		(this_or_next|eq, "$g_occc_fight_terrain", rt_snow_forest),
		(eq, "$g_occc_fight_terrain", rt_snow),
		(call_script,"script_occc_tweak_speed_modifier",":agent_no",20),
		(call_script,"script_occc_tweak_reload_speed_modifier",":agent_no",20),
		(call_script,"script_occc_tweak_use_speed_modifier",":agent_no",20),

		(call_script,"script_occc_tweak_accuracy_modifier",":agent_no",20),
	  (else_try),#vaegir red coats
		(eq,":p_id","trp_occc_vaegir_red_coat"),
		(call_script,"script_occc_tweak_reload_speed_modifier",":agent_no",10),#fast reload

	  (try_end),

	  #weather bonus end
	  #perk system begin
	  (try_begin),#general
		(this_or_next|eq,":p_id","trp_player"),#player
		(this_or_next|is_between,":p_id",kingdom_ladies_begin,kingdom_ladies_end),#ladies
		(is_between,":p_id",companions_begin,companions_end),#companions
		(try_begin),
			(ge, "$cheat_mode", 1),
			(display_message,"@OCCC DEBUG:Perk Activating."),
		(try_end),
		(call_script,"script_occc_apply_perk_modify_to_agent",":agent_no",":p_id"),
	  (else_try),#BERSERK
		(this_or_next|eq,":p_id","trp_sunset_jaguar"),
		(this_or_next|eq,":p_id","trp_occ_rhodok_gladiator"),#Gladiator
		(is_between,":p_id","trp_ccc_nord_barbarian_veteran_cave","trp_occc_nord_fenrir"),#Nordic Barbarians
		(agent_set_slot, ":agent_no", slot_agent_can_lifesteal, 1),
	  (else_try),#BACKSTAB
		(this_or_next|eq,":p_id","trp_sunset_el_eagle"),
		(this_or_next|eq,":p_id","trp_occc_sarranid_assassin"),
		(this_or_next|eq,":p_id","trp_occc_cult_assassin"),
		(this_or_next|is_between,":p_id","trp_ccc_yamato_kunoiti","trp_ccc_yamato_miko"),
		(is_between,":p_id","trp_ccc_nord_thief","trp_occc_nord_shieldmaiden"),
		(agent_set_slot, ":agent_no", slot_agent_can_backstab, 1),
	  (else_try),#NINELIVES 
		(this_or_next|eq,":p_id","trp_occc_montypython_blackknight"),
		(this_or_next|eq,":p_id","trp_ccc_vaegir_elite_support_inf"),
		(this_or_next|eq,":p_id","trp_occc_nord_fenrir"),
		(eq,":p_id","trp_occc_swadian_doppelsoldnar"),
		(agent_set_slot, ":agent_no", slot_agent_can_ninelives, 1),
	  (else_try),#SWORD MASTER ONLY 
		(this_or_next|eq,":p_id","trp_occc_jedi_knight"),
		(eq,":p_id","trp_ccc_dark_knight_berserker"),
		(agent_set_slot, ":agent_no", slot_agent_doublehanded_reflect, 1),
	  (else_try),#NINELIVES ONLY IN NIGHT 
		(is_currently_night),
		(eq,":p_id","trp_ccc_dark_knight_monster_rider"),
		(agent_set_slot, ":agent_no", slot_agent_can_ninelives, 1),
	  (else_try),#HOPLITE
		(this_or_next|is_between,":p_id","trp_ccc_rhodok_hastati_spear","trp_occc_rhodok_herculiani_seniores"),
		(is_between,":p_id",hoplites_begin,hoplites_end),
		(agent_set_slot, ":agent_no", slot_agent_hoplite_bonus, 1),
	  (else_try),#LAST STAND 
		(this_or_next|eq,":p_id","trp_sunset_coyote"),#trp_ccc_vaegir_grenadier_inf
		(this_or_next|is_between,":p_id","trp_ccc_vaegir_red_coat_line_inf","trp_occc_vaegir_red_coat"),
		(this_or_next|eq,":p_id","trp_taikou_umanori_bushou"),#Highest Tier Samurais 
		(this_or_next|eq,":p_id","trp_albion_champion"),#Albion Teulu
		#loyal guards begin
		(this_or_next|eq,":p_id","trp_occc_vaegir_extra_guards"),#Vaegir_Elite_Druzhina
		(this_or_next|eq,":p_id","trp_occc_rhodok_varanger"),#Rhodok Praetorian Guard
		(this_or_next|eq,":p_id","trp_occc_rhodok_varanger_guard"),#Rhodok Varanger
		(this_or_next|eq,":p_id","trp_occc_wardog_chef"),#Zendar Wardog Chef 
		(this_or_next|eq,":p_id","trp_occc_sarranid_saintcross_guard"),#Sarranid Saint Cross Guard
		#loyal guards end
		(eq,":p_id","trp_occc_helvetia_guard"),#Papal guard
		(agent_set_slot, ":agent_no", slot_agent_can_laststand, 1),
	  (else_try),#LAST STAND and NINELIVES
		(eq,":p_id","trp_occc_nord_veteran_huscarl"),#Veteran Huscarl
		(agent_set_slot, ":agent_no", slot_agent_can_ninelives, 1),
		(agent_set_slot, ":agent_no", slot_agent_can_laststand, 1),
	  (else_try),#JEDI MASTERS  
		(this_or_next|eq,":p_id","trp_ccc_bandit_bk_npc13"),#Berserk
		(this_or_next|eq,":p_id","trp_occc_adventurer_foot_hero"),#
		(this_or_next|eq,":p_id","trp_occc_jedi_master"),#
		(eq,":p_id","trp_knight_7_vader"),#
		(agent_set_slot, ":agent_no", slot_agent_saber_reflect, 1),
	  (else_try),#Kensei
		(this_or_next|eq,":p_id","trp_taikou_kihoro"),
		(eq,":p_id","trp_taikou_bushou"),
		(agent_set_slot, ":agent_no", slot_agent_doublehanded_reflect, 1),
		(agent_set_slot, ":agent_no", slot_agent_can_laststand, 1),
	  (try_end),
	  

   ])

	
occc_troop_cheering = (
  30, 0, 0, [(eq,"$g_occc_troop_unique_action",1),(eq,"$occc_is_there_cheerer",1),],#
  [
    (try_for_agents,":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
	  (agent_get_troop_id, ":p_id_orig", ":cur_agent"),	   
	  (get_player_agent_no, ":player_agent"),
	  (neq, ":cur_agent", ":player_agent"),#not player agent

	  (this_or_next|agent_slot_eq, ":cur_agent", slot_agent_is_cheerer, 1),#occc
      (eq, ":p_id_orig", "trp_occc_rhodok_signifer"),#can expand
	  
		(agent_get_team, ":user_team", ":cur_agent"),
		(agent_set_animation, ":cur_agent", "anim_cheer", 1),
		(agent_play_sound, ":cur_agent", "snd_man_victory"),#yeahh!!
        (agent_get_position,pos1,":cur_agent"),

							  (try_for_agents,":agent"),
                              (agent_is_alive,":agent"),
                              (agent_is_human,":agent"),
							  (agent_is_active, ":agent"),
							  (agent_get_position,pos2,":agent"),
							  (get_distance_between_positions,":dist",pos1,pos2),
							  (lt,":dist",3000),#30m
							  (agent_get_team, ":cur_team", ":agent"),
							  (neg|teams_are_enemies, ":user_team", ":cur_team"),
       (agent_get_slot, ":agent_courage_score", ":agent", slot_agent_courage_score),
       (val_add, ":agent_courage_score", 500),#gaining courage
       (agent_set_slot, ":agent", slot_agent_courage_score, ":agent_courage_score"),           
       (store_agent_hit_points,":life",":agent",0),
       (val_add,":life",5),
       (agent_set_hit_points,":agent",":life",0),
		(agent_get_troop_id, ":p_id", ":agent"),	   
		(troop_get_type, ":is_female", ":p_id"),
		
		#buff troops
		(try_begin),
			(eq, ":p_id_orig", "trp_occc_rhodok_signifer"),#Rhodok Signifer
			(agent_slot_eq, ":agent", slot_agent_got_buff, 0),
			(neg|troop_is_hero,":p_id"),
			(store_troop_faction, ":is_rhodok", ":p_id"),
			(eq,":is_rhodok","fac_kingdom_5"),#rhodok troops
			(call_script,"script_occc_tweak_speed_modifier",":agent",8),
			(call_script,"script_occc_tweak_reload_speed_modifier",":agent",8),
			(call_script,"script_occc_tweak_use_speed_modifier",":agent",8),
			(call_script,"script_occc_tweak_accuracy_modifier",":agent",8),
			(call_script,"script_occc_tweak_damage_modifier",":agent",8),

			(agent_set_slot, ":agent", slot_agent_got_buff, 1),
		(try_end),
		
		#yell
		(try_begin),
		  (this_or_next|eq,":is_female",  12),#tf_elf_female
		  (this_or_next|eq, ":is_female", 10),#tf_gaolu_female
		  (this_or_next|eq, ":is_female", 9),#tf_girl
		  (eq, ":is_female", 1),#tf_female
		  (agent_play_sound, ":agent", "snd_woman_victory"),
		(else_try),
		  (agent_play_sound, ":agent", "snd_man_victory"),
		(try_end),
       (try_end),           
       (store_add,":recovery",5),
       (assign,reg1,":recovery"),
	   (try_end),
	

    ])

	
occc_play_vaegir_musician = (
  18, 0, 0, [(eq,"$g_occc_troop_unique_action",1),(eq,"$occc_is_there_musician",1),],
  [#play music every 18 seconds
    (try_for_agents,":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
	  (agent_get_troop_id, ":p_id", ":cur_agent"),	   
      (eq, ":p_id", "trp_occc_vaegir_musician"),
		(agent_get_team, ":user_team", ":cur_agent"),
		(agent_play_sound, ":cur_agent", "snd_occc_marchsong"),#yeahh!!
        (agent_get_position,pos1,":cur_agent"),

		(try_for_agents,":agent"),
           (agent_is_alive,":agent"),
           (agent_is_human,":agent"),
		   (agent_is_active, ":agent"),
		   (agent_get_position,pos2,":agent"),
		   (get_distance_between_positions,":dist",pos1,pos2),
		   (lt,":dist",5000),#50m
		   (agent_get_team, ":cur_team", ":agent"),
		   (neg|teams_are_enemies, ":user_team", ":cur_team"),
		   
			(agent_get_troop_id, ":p_id", ":agent"),	   
			(store_troop_faction, ":is_vaegir", ":p_id"),
			(eq,":is_vaegir","fac_kingdom_2"),#revolutionary vaegir troops

		   
		   
			(agent_get_slot, ":agent_courage_score", ":agent", slot_agent_courage_score),
			(val_add, ":agent_courage_score", 300),#gaining courage
			(agent_set_slot, ":agent", slot_agent_courage_score, ":agent_courage_score"),           
			(store_agent_hit_points,":life",":agent",0),
			(val_add,":life",5),
			(agent_set_hit_points,":agent",":life",0),
			(store_add,":recovery",5),
			(assign,reg1,":recovery"),    
			
			
			#buff troops
			(try_begin),
				(agent_slot_eq, ":agent", slot_agent_got_buff, 0),
				(neg|troop_is_hero,":p_id"),
				(call_script,"script_occc_tweak_speed_modifier",":agent",10),
				(call_script,"script_occc_tweak_reload_speed_modifier",":agent",10),
				(call_script,"script_occc_tweak_use_speed_modifier",":agent",10),
				(call_script,"script_occc_tweak_accuracy_modifier",":agent",10),
				(call_script,"script_occc_tweak_damage_modifier",":agent",10),
				(agent_set_slot, ":agent", slot_agent_got_buff, 1),
			(try_end),

			
		(try_end),
	(try_end),

    ])

#jacobhinds form musket square BEGIN

jacobhinds_form_square_init = (
	ti_before_mission_start, 0, 0, [],
	[
		(try_for_range, ":square_id", 0, 150), #clears dummy troop array for infantry squares
			(troop_set_slot, "trp_jacobhinds_form_musket_square_size", ":square_id", 0),
		(try_end),
	])

jacobhinds_form_square = (
	0, 0, 0, [(neg|key_is_down, key_left_control),(key_clicked, key_t)],
	[
		#find player team
		(get_player_agent_no, ":player"),
		(agent_get_team, ":playerteam", ":player"),

		(try_for_range, ":class", 0, 9),
			(class_is_listening_order, ":playerteam", ":class"),
			(store_mul, ":square_id", ":playerteam", 10),
			(val_add, ":square_id", ":class"),
			(val_add, ":square_id", 1),
			#make sure they aren't already in square, otherwise end
			(try_begin),
				(troop_slot_eq, "trp_jacobhinds_form_musket_square_size", ":square_id", 0), 
				(call_script, "script_cf_create_infantry_square", 3, ":playerteam", ":class", 1),
				(str_store_class_name, s1, ":class"),
				(display_message, "@Forming square with {s1}"),
			(else_try),
				(call_script, "script_cf_end_infantry_square", ":playerteam", ":class"),
				(str_store_class_name, s1, ":class"),
				(display_message, "@Disbanding square with {s1}"),
			(try_end),
		(try_end),
	],
						)

jacobhinds_infantry_square_check = (
  ti_on_agent_killed_or_wounded, 0, 0, [],

	#every time someone dies, flees or gets wounded,
	#reduce the infantry square size until it's below 
	#30, then remove the square.
	[
    (store_trigger_param_1, ":dead_agent_no"),
	(call_script, "script_cf_agent_remove_from_square", ":dead_agent_no"),
	])

#jacobhinds form musket square END
#TEMPERED   CAMP OVER RUN, SUPPLY LOSS
common_camp_supply = ( 5,0,0,[(ge,"$camp_supply",1)],
						[
							(set_fixed_point_multiplier, 100),
							(scene_prop_get_instance,":inventory_tent", "spr_bell_tent_inventory",0),
							(prop_instance_get_position,pos1,":inventory_tent"),
							(scene_prop_get_instance,":replacement_tent", "spr_bell_tent_noinventory",0),
							(prop_instance_get_position,pos4,":replacement_tent"),
							(assign,":in_range",0),
							(try_for_agents,":cur_agent"),							
								(agent_is_alive,":cur_agent"),
								(agent_is_human,":cur_agent"),
								(agent_get_team, ":agent_team", ":cur_agent"),
								(try_begin),
									(this_or_next|eq, ":agent_team", "$attacker_team"),
									(eq, ":agent_team", "$attacker_team_2"),								
									(agent_get_position,pos2,":cur_agent"),
									(get_distance_between_positions, ":cur_distance", pos1, pos2),
									(le,":cur_distance",800),									
									(val_add,":in_range",1),
								(try_end),
							(try_end),
							(try_begin),
								(ge,":in_range",3),
								(val_sub,"$camp_supply",1),								
								(prop_instance_animate_to_position,":replacement_tent",pos1,0),
								(prop_instance_animate_to_position,":inventory_tent",pos4,0),
								(scene_prop_get_instance,":supply_cart", "spr_cart",0),
							    (prop_instance_get_position,pos3,":supply_cart"),
								(particle_system_burst, "psys_village_fire_big", pos3,400),
								(particle_system_burst, "psys_village_fire_smoke_big", pos3, 9999),
								(call_script,"script_loot_camp"),
							(try_end),							
						]
					 )

# occc_vyrn_ai_continue = (	
 # 1, 0, 0, [],
  # [
		# #(store_mission_timer_c, ":timerc"),
		
		# (get_player_agent_no, ":play"),
		# (agent_is_active, ":play"),
		# (agent_is_alive, ":play"),
	  # #player setup
   # (try_for_agents, ":agse"),
		# (neq, ":agse", ":play"), #Agent is not player
		# (agent_is_active, ":agse"),
		# (agent_is_alive, ":agse"), 
		# (agent_is_human, ":agse"),
		# (agent_slot_eq, ":agse", slot_agent_is_running_away, 0), #isnt fleeing
		
		# (agent_get_troop_id, ":agstrpe",":agse"),
		# (troop_get_slot, ":is_AIe", ":agstrpe", slot_agent_has_vyrn_AI), #if agent has vyrn AI
		# (eq, ":is_AIe", 1), #yes
		# (troop_get_slot, ":chance_AIe", ":agstrpe", slot_vyrn_AI_chance),
	 
		# (agent_get_team, ":ags_teame", ":agse"), 
	 
		# #(assign, ":max_distance", 300), #distance between agents
		
		# (agent_ai_get_look_target,":possiblee",":agse"),
		# (gt,":possiblee",0), #there is at least someone
		
		# (agent_is_active, ":possiblee"),
		# (agent_is_alive, ":possiblee"),
		# (agent_is_human, ":possiblee"),
		
		# (agent_get_team, ":possible_teame", ":possiblee"),
		# (neq, ":possible_teame", ":ags_teame"), #unfriendly teams
		
		# (agent_get_position, pos13, ":possiblee"),
	    # (agent_get_position, pos14, ":agse"),
		# (neg|position_is_behind_position, pos13, pos14), #agents are not behind each other
		# (get_distance_between_positions, ":diste", pos13, pos14),
		
	   # # (agent_get_defend_action, ":pos_defe", ":possiblee"), #attack action
		# #(agent_get_action_dir, ":pos_atkdire", ":possiblee"),
	   # # (agent_get_attack_action, ":pos_atke", ":possiblee"), #attack action
		# (agent_get_animation, ":agse_anime", ":agse", 1),
		# (agent_get_wielded_item, ":l_wielded_itema", ":agse", 0),
		# #(agent_get_wielded_item, ":r_wielded_itema", ":agse", 1),
		# #(agent_get_animation, ":pos_anime", ":possiblee", 1),
		# (store_random_in_range, ":chance_strengthe", 1, ":chance_AIe"), #chance is based on troop
		# (eq, ":chance_strengthe", 1),
			# #Jump Charge
			# # (try_begin),
				# # (is_between, ":diste", 600, 800),
				# # (neq, ":agse_anime", "anim_jump_charge"),
				# # (agent_set_animation, ":agse", "anim_jump_charge"),
				# # (le, ":diste", 600),
				# # (agent_set_attack_action, ":agse", 3, 0),
				# # (agent_set_position, ":agse", pos13),
			# # (try_end),
				# # #Brutal Strike
			# # (try_begin),
				# # (store_random_in_range, ":dice", 1, 200),
				# # (eq, ":dice", 1),
				# # (le, ":diste", 200),
				# # (agent_set_animation, ":agse", "anim_brutal_strike"),
				# # (agent_get_bone_position, pos9, ":agse", hb_hand_r, 1),
				# # (get_distance_between_positions, ":dist_brutal", pos9, pos13),
				# # (le, ":dist_brutal", 200),
				# # (store_random_in_range, ":brutal_damage", 35, 70),
				# # (agent_deliver_damage_to_agent, ":agse", ":possiblee", ":brutal_damage", ":l_wielded_itema"),
				# # (agent_set_animation, ":possiblee", "anim_vyrn_AI_fall", 1),							
			# # (try_end),
	# (try_end),
    # ])

	
#vyrn_ai start
occc_vyrn_ai = (
  0, 0, 0, [(eq,"$g_occc_enable_cave_extra_ai",1),], [
    
		(get_player_agent_no, ":pla"),
		(agent_is_active, ":pla"),
		(agent_is_alive, ":pla"),
	  #player setup
   (try_for_agents, ":ags"),
		(neq, ":ags", ":pla"), #Agent is not player
		(agent_is_active, ":ags"),
		(agent_is_alive, ":ags"), 
		(agent_is_human, ":ags"),
		(agent_get_horse, ":horse", ":ags"),
		(eq, ":horse", -1), #agent cannot be mounted
		(agent_slot_eq, ":ags", slot_agent_is_running_away, 0), #isnt fleeing
		
		(agent_get_troop_id, ":agstrp",":ags"),
		(troop_get_slot, ":is_AI", ":agstrp", slot_agent_has_vyrn_AI), #if agent has vyrn AI
		
		#occc companipons check
		(try_begin),
			# (this_or_next|is_between,":agstrp",kingdom_ladies_begin,kingdom_ladies_end),#ladies
			# (is_between,":agstrp",companions_begin,companions_end),
			(eq, ":is_AI", 2),#AI Activated Companions
			(store_character_level, ":char_lv", ":agstrp"),
			(try_begin),
				(gt,":char_lv",9),#upper 9lv
				(lt,":char_lv",18),
				(troop_set_slot, ":agstrp", slot_vyrn_AI_chance, 6),#rank6
			(else_try),
				(lt,":char_lv",18),#upper 18lv
				(troop_set_slot, ":agstrp", slot_vyrn_AI_chance, 5),#rank5
			(else_try),
				(lt,":char_lv",27),#upper 18lv
				(troop_set_slot, ":agstrp", slot_vyrn_AI_chance, 4),#rank4
			(else_try),
				(lt,":char_lv",36),#upper 27lv
				(troop_set_slot, ":agstrp", slot_vyrn_AI_chance, 3),#rank3
			(else_try),
				(ge,":char_lv",36),#upper 35lv
				(troop_set_slot, ":agstrp", slot_vyrn_AI_chance, 2),#rank2
			(try_end),
		(try_end),
		#companions check end
		
		(ge, ":is_AI", 1), #yes
		(troop_get_slot, ":chance_AI", ":agstrp", slot_vyrn_AI_chance),
	 
		(agent_get_team, ":ags_team", ":ags"), 
	 
		#(assign, ":max_distance", 300), #distance between agents
		
		(agent_ai_get_look_target,":possible",":ags"),
		(assign,":cont",0),
		(try_begin),
			(gt,":possible",0), #there is at least someone
			(assign,":cont",1),
		(else_try),
            (agent_clear_scripted_mode, ":ags"),
		(try_end),
		
		(eq,":cont",1),
		
		(agent_is_active, ":possible"),
		(agent_is_alive, ":possible"),
		(agent_is_human, ":possible"),
		
		(agent_get_team, ":possible_team", ":possible"),
		(neq, ":possible_team", ":ags_team"), #unfriendly teams
		
		(agent_get_position, pos11, ":possible"),
	    (agent_get_position, pos12, ":ags"),
		(try_begin),
			(neg|position_is_behind_position, pos11, pos12), #agents are not behind each other
			(assign,":heading_to_enemy",1),
		(else_try),
			(assign,":heading_to_enemy",0),
			(agent_clear_scripted_mode, ":ags"),
		(try_end),
		(eq,":heading_to_enemy",1),#occc agents are not behind each other confirmed
		
		(get_distance_between_positions, ":dist", pos11, pos12),
		
	    (agent_get_defend_action, ":pos_def", ":possible"), #defend action
		(agent_get_action_dir, ":pos_atkdir", ":possible"),
	    (agent_get_attack_action, ":pos_atk", ":possible"), #attack action
		(agent_get_slot, ":pos_shield", ":possible", slot_agent_use_shield),#occc if target has a shield or not

		#(agent_get_animation, ":ags_anim", ":ags", 1),
		#(agent_get_animation, ":pos_anim", ":possible", 1),
		(store_random_in_range, ":chance_strength", 1, ":chance_AI"), #chance is based on troop
		(eq, ":chance_strength", 1),
		#Footwork
		(try_begin),
			(try_begin),
			#occc begin
				(ge, ":dist", 500),
                (agent_clear_scripted_mode, ":ags"),
                #(agent_force_rethink, ":ags"),

			#occc end
			(else_try),#duel mode
				(lt, ":dist", 500),
				(ge, ":dist", 250),#so close
				(agent_get_wielded_item, ":l_wielded_itema", ":ags", 0),
				#occc ranged unequip start
				(assign,":try_equip_melee",0),
				(assign,":thrust",0),
				(try_begin),
					(ge, ":l_wielded_itema", 1),
					#check whether the weapon can thrust attack
					(item_get_thrust_damage,":thrust",":l_wielded_itema"),#
					(item_get_type, ":weapon_type", ":l_wielded_itema"),
                    (this_or_next|eq, ":weapon_type", itp_type_thrown),
                    (this_or_next|eq, ":weapon_type", itp_type_bow),
                    (this_or_next|eq, ":weapon_type", itp_type_pistol),
                    (this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
                    (eq, ":weapon_type", itp_type_musket),
					(agent_unequip_item, ":ags", ":l_wielded_itema"), #
					(assign,":try_equip_melee",1),
				(else_try),
					(le, ":l_wielded_itema", 0),#wielding nothing
					(assign,":try_equip_melee",1),
				(try_end),
				
				(try_begin),
					(eq,":try_equip_melee",1),
					(agent_get_slot, ":two_hand_item", ":ags", slot_agent_use_two_hand),
					(agent_get_slot, ":one_hand_item", ":ags", slot_agent_use_one_hand),
					(agent_get_slot, ":polearm_item", ":ags", slot_agent_use_polearm),
					(try_begin),
						(ge, ":two_hand_item", 1),
						(agent_equip_item, ":ags", ":two_hand_item"),
					(else_try),
						(ge, ":one_hand_item", 1),
						(agent_equip_item, ":ags", ":one_hand_item"),
						(agent_get_slot, ":shield", ":ags", slot_agent_use_shield),
						(ge, ":shield", 1),
						(agent_equip_item, ":ags", ":shield"),
					(else_try),
						(ge, ":polearm_item", 1),
						(agent_equip_item, ":ags", ":polearm_item"),
					(try_end),
				(try_end),
				#occc end
				(agent_force_rethink, ":ags"),
				(agent_set_scripted_destination, ":ags", pos11, 0, 1),
			(else_try),
				(agent_get_wielded_item, ":l_wielded_itema", ":ags", 0),
				#occc ranged unequip start
				(assign,":try_equip_melee",0),
				(assign,":thrust",0),
				(try_begin),
					(ge, ":l_wielded_itema", 1),
					#check whether the weapon can thrust attack
					(item_get_thrust_damage,":thrust",":l_wielded_itema"),#
					(item_get_type, ":weapon_type", ":l_wielded_itema"),
                    (this_or_next|eq, ":weapon_type", itp_type_thrown),
                    (this_or_next|eq, ":weapon_type", itp_type_bow),
                    (this_or_next|eq, ":weapon_type", itp_type_pistol),
                    (this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
                    (eq, ":weapon_type", itp_type_musket),
					(agent_unequip_item, ":ags", ":l_wielded_itema"), #
					(assign,":try_equip_melee",1),
				(else_try),
					(le, ":l_wielded_itema", 0),#wielding nothing
					(assign,":try_equip_melee",1),
				(try_end),
				
				(try_begin),
					(eq,":try_equip_melee",1),
					(agent_get_slot, ":two_hand_item", ":ags", slot_agent_use_two_hand),
					(agent_get_slot, ":one_hand_item", ":ags", slot_agent_use_one_hand),
					(agent_get_slot, ":polearm_item", ":ags", slot_agent_use_polearm),
					(try_begin),
						(ge, ":two_hand_item", 1),
						(agent_equip_item, ":ags", ":two_hand_item"),
					(else_try),
						(ge, ":one_hand_item", 1),
						(agent_equip_item, ":ags", ":one_hand_item"),
						(agent_get_slot, ":shield", ":ags", slot_agent_use_shield),
						(ge, ":shield", 1),
						(agent_equip_item, ":ags", ":shield"),
					(else_try),
						(ge, ":polearm_item", 1),
						(agent_equip_item, ":ags", ":polearm_item"),
					(try_end),
				(try_end),

				(is_between, ":dist", 0, 250),
				(agent_force_rethink, ":ags"),
				(store_random_in_range, ":dice_for_footwork", 0, 5),
				(eq, ":dice_for_footwork", 1),
				(store_random_in_range, ":random", -60, 60),
				(position_move_x, pos11, ":random", 0),
				(position_move_y, pos11, ":random", 0),
				(position_rotate_x, pos11, ":random", 0),
				(position_rotate_y, pos11, ":random", 0),
				(agent_set_scripted_destination, ":ags", pos11, 0, 1),
			(try_end),
		(try_end),
		#Chambering
			(try_begin),
				(le, ":dist", 200),
				(store_random_in_range, ":extra_dice", 1, 80),
				(neq, ":pos_atk", 1),
				(eq, ":pos_atk", 2),
				(eq, ":extra_dice", 1),
				(try_begin),					
					(eq, ":pos_atkdir", 0),
					(ge,":thrust",1),
					(agent_set_attack_action, ":ags", 0, 0),
				(else_try),
					(eq, ":pos_atkdir", 1),
					(agent_set_attack_action,":ags", 2, 0),
				(else_try),
					(eq, ":pos_atkdir", 2),
					(agent_set_attack_action, ":ags", 1, 0),
				(else_try),
					(eq, ":pos_atkdir", 3),
					(agent_set_attack_action, ":ags", 3, 0),
				(try_end),
			(try_end),
			#Chamber disarming
			# (try_begin),
				# (eq, ":pos_def", 1),
				# (neq, ":pos_def", 2),
				# (eq, ":pos_atkdir", 1),
				# (eq, ":pos_atkdir", 2),
				# (neq, ":pos_atk", 1),
				# (eq, ":pos_atk", 2),
				# (agent_is_in_parried_animation, ":possible"),
				# (agent_get_wielded_item, ":weapon", ":ags", 0),
				# (agent_unequip_item, ":ags", ":weapon"),
				# (agent_get_bone_position, pos2, ":ags", hb_hand_r, 1),
				# (store_random_in_range, ":z_rotation", 0, 360),
				# (store_random_in_range, ":y_rotation", -60, 60),
				# (store_random_in_range, ":x_pos", -90, 90),
				# (store_random_in_range, ":y_pos", -90, 90),
				# (position_rotate_z, pos2,":z_rotation"),
				# (position_rotate_y, pos2,":y_rotation"),
				# (position_move_x, pos2, ":x_pos"),
				# (position_move_y, pos2, ":y_pos"),
				# (position_set_z_to_ground_level, pos2),
				# (position_move_z, pos2, 5),
				# (set_spawn_position, pos2),
				# (spawn_item, ":weapon"),
			# (try_end),
			#Feinting
			(try_begin),
					(store_random_in_range, ":dice", 1, 60),
					(store_random_in_range, ":style", 1, 5),
					(try_begin),
						(eq,":thrust",0),#cant thrust
						(store_random_in_range, ":random_dir", 1, 3),
					(else_try),
						(store_random_in_range, ":random_dir", 0, 3),
					(try_end),
					(store_random_in_range, ":random_action", 0, 1),
					(le, ":dist", 200),
					(eq, ":dice", 1),
					(eq, ":pos_def", 2),
					(le, ":pos_shield", 0),#target has no shield
					(assign, ":continue", 0),
					(eq, ":continue", 0),
				(try_begin),
					(eq, ":style", 1),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 1),
				(else_try),
					(eq, ":style", 2),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 1),
				(else_try),
					(eq, ":style", 3),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 1),
				(else_try),
					(eq, ":style", 4),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 0),
					(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					(assign, ":continue", 1),
				(try_end),
			(try_end),
			#Counter-attack
			(try_begin),
				(le, ":dist", 200),
				(this_or_next|eq, ":pos_atk", 6),
				(eq, ":pos_atk", 3),
				(store_random_in_range, ":random_dir", 1, 3),
				(store_random_in_range, ":random_action", 0, 1),
				(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			(try_end),
			#Attacking
			(try_begin),
				(le, ":dist", 300),
				(try_begin),
					(eq,":thrust",0),#cant thrust
					(store_random_in_range, ":random_dir", 1, 3),
				(else_try),
					(store_random_in_range, ":random_dir", 0, 3),
				(try_end),
				(store_random_in_range, ":random_action", 0, 1),
				(eq, ":pos_def", 2),
				(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			(else_try),
				(le, ":dist", 200),
				(store_random_in_range, ":random_dir", 1, 3),
				(store_random_in_range, ":random_action", 0, 1),
				(eq, ":pos_def", 2),
				(agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			(try_end),
			#Blocking
		(try_begin),
		(neq, ":pos_atk", 1), #readying attack
		(eq, ":pos_atk", 2), #releasing attack	
		(le, ":dist", 200),
		#(store_random_in_range, ":random_chance", 1, 150),
			(try_begin),
				(eq, ":pos_atkdir", 0),
				(agent_set_defend_action, ":ags", 0, 0),
			(else_try),
				(eq, ":pos_atkdir", 1),
				(agent_set_defend_action, ":ags", 1, 0),
			(else_try),
				(eq, ":pos_atkdir", 2),
				(agent_set_defend_action, ":ags", 2, 0),
			(else_try),
				(eq, ":pos_atkdir", 3),
				(agent_set_defend_action, ":ags", 3, 0),
			(try_end),
		(try_end),
		#Avoid
		# (try_begin),
			# (le, ":dist", 200),
		    # (neq, ":pos_atk", 1), #readying attack
			# (eq, ":pos_atk", 2), #releasing attack
			# (this_or_next|eq, ":pos_atkdir", 0),
			# (eq, ":pos_atkdir", 3),
			# (store_random_in_range, ":dice_for_avoid", 0, 15),
			# (store_random_in_range, ":chance", 0, 2),
			# (eq, ":dice_for_avoid", 1),
				# (try_begin),
					# (eq, ":chance", 1),
					# (agent_set_defend_action, ":ags", -2, 0),
					# (agent_set_animation, ":ags", "anim_avoid_right_start"),
				# (else_try),
					# (eq, ":chance", 2),
					# (agent_set_defend_action, ":ags", -2, 0),
					# (agent_set_animation, ":ags", "anim_avoid_left_start"),
				# (try_end),
		# (try_end),
		#AI kick
		# (try_begin),
			# (neq, ":ags_anim", "anim_brutal_strike"),
			# (le, ":dist", 100),
			# (store_random_in_range,":kickchance", 1, 360),	
			# (eq,":kickchance",1), #5-ish% chance per check
			# (agent_set_animation, ":ags", "anim_vyrn_AI_kick"),
			# (agent_get_bone_position, pos5, ":ags", hb_foot_r, 1),
			# (get_distance_between_positions, ":dist_to_leg", pos5, pos11),
			# (le, ":dist_to_leg", 150),
			# (store_random_in_range, ":rndm_damage", 0, 5),# anim_prepare_kick_0 exists as well
			# (agent_deliver_damage_to_agent, ":ags", ":possible", ":rndm_damage"),#3 damage done atm.
			# (agent_set_animation, ":possible", "anim_strike3_abdomen_front"),#Get Kicked
			# (eq, ":pos_anim", "anim_strike3_abdomen_front"),
			# (store_random_in_range, ":random_dir", 0, 3),
			# (store_random_in_range, ":random_action", 0, 1),
			# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
	    # (try_end),
   (try_end),])



# occc_vader_extra_ai = (
  # 0, 0, 0, [(eq,"$g_occc_ai_improvement",1),(eq,"$g_occc_troop_unique_action",1),(gt,"$occc_boss_agent",0),], [
    
	  # #player setup
		# (assign, ":ags","$occc_boss_agent"),
		# (agent_is_active, ":ags"),
		# (agent_is_alive, ":ags"), 
		# (agent_is_human, ":ags"),
		# (agent_get_horse, ":horse", ":ags"),
		# (eq, ":horse", -1), #agent cannot be mounted
		# (agent_slot_eq, ":ags", slot_agent_is_running_away, 0), #isnt fleeing
		
		# (assign,":chance_AI",1),#vader has best AI
		# (agent_get_team, ":ags_team", ":ags"), 
	 
		# #(assign, ":max_distance", 300), #distance between agents
		
		# (agent_ai_get_look_target,":possible",":ags"),
		# (gt,":possible",0), #there is at least someone
		
		# (agent_is_active, ":possible"),
		# (agent_is_alive, ":possible"),
		# (agent_is_human, ":possible"),
		
		# (agent_get_team, ":possible_team", ":possible"),
		# (neq, ":possible_team", ":ags_team"), #unfriendly teams
		
		# (agent_get_position, pos11, ":possible"),
	    # (agent_get_position, pos12, ":ags"),
		# (neg|position_is_behind_position, pos11, pos12), #agents are not behind each other
		# (get_distance_between_positions, ":dist", pos11, pos12),
		
	    # (agent_get_defend_action, ":pos_def", ":possible"), #attack action
		# (agent_get_action_dir, ":pos_atkdir", ":possible"),
	    # (agent_get_attack_action, ":pos_atk", ":possible"), #attack action
		# #(agent_get_animation, ":ags_anim", ":ags", 1),
		# #(agent_get_animation, ":pos_anim", ":possible", 1),
		# (store_random_in_range, ":chance_strength", 1, ":chance_AI"), #chance is based on troop
		# (eq, ":chance_strength", 1),
		# #Footwork
		# (try_begin),
			# (try_begin),
				# (le, ":dist", 500),
				# (agent_get_wielded_item, ":l_wielded_itema", ":ags", 0),
				# #occc ranged unequip start
				# (assign,":try_equip_melee",0),
				# (assign,":thrust",0),
				# (try_begin),
					# (ge, ":l_wielded_itema", 1),
					# #check whether the weapon can thrust attack
					# (item_get_thrust_damage,":thrust",":l_wielded_itema"),#
					# (item_get_type, ":weapon_type", ":l_wielded_itema"),
                    # (this_or_next|eq, ":weapon_type", itp_type_thrown),
                    # (this_or_next|eq, ":weapon_type", itp_type_bow),
                    # (this_or_next|eq, ":weapon_type", itp_type_pistol),
                    # (this_or_next|eq, ":weapon_type", itp_type_crossbow),#occc
                    # (eq, ":weapon_type", itp_type_musket),
					# (agent_unequip_item, ":ags", ":l_wielded_itema"), #
					# (assign,":try_equip_melee",1),
				# (else_try),
					# (eq, ":l_wielded_itema", 0),#wielding nothing
					# (assign,":try_equip_melee",1),
				# (try_end),
				
				# (try_begin),
					# (eq,":try_equip_melee",1),
					# (agent_get_slot, ":two_hand_item", ":ags", slot_agent_use_two_hand),
					# (agent_get_slot, ":one_hand_item", ":ags", slot_agent_use_one_hand),
					# (agent_get_slot, ":polearm_item", ":ags", slot_agent_use_polearm),
					# (try_begin),
						# (ge, ":two_hand_item", 1),
						# (agent_equip_item, ":ags", ":two_hand_item"),
					# (else_try),
						# (ge, ":one_hand_item", 1),
						# (agent_equip_item, ":ags", ":one_hand_item"),
						# (agent_get_slot, ":shield", ":ags", slot_agent_use_shield),
						# (ge, ":shield", 1),
						# (agent_equip_item, ":ags", ":shield"),
					# (else_try),
						# (ge, ":polearm_item", 1),
						# (agent_equip_item, ":ags", ":polearm_item"),
					# (try_end),
				# (try_end),
				# #occc end
				# (agent_force_rethink, ":ags"),
				# (agent_set_scripted_destination, ":ags", pos11, 0, 1),
			# (else_try),
				# (is_between, ":dist", 0, 300),
				# (agent_force_rethink, ":ags"),
				# (store_random_in_range, ":dice_for_footwork", 0, 5),
				# (eq, ":dice_for_footwork", 1),
				# (store_random_in_range, ":random", -60, 60),
				# (position_move_x, pos11, ":random", 0),
				# (position_move_y, pos11, ":random", 0),
				# (position_rotate_x, pos11, ":random", 0),
				# (position_rotate_y, pos11, ":random", 0),
				# (agent_set_scripted_destination, ":ags", pos11, 0, 1),
			# (try_end),
		# (try_end),
		# #Chambering
			# (try_begin),
				# (le, ":dist", 200),
				# (store_random_in_range, ":extra_dice", 1, 80),
				# (neq, ":pos_atk", 1),
				# (eq, ":pos_atk", 2),
				# (eq, ":extra_dice", 1),
				# (try_begin),					
					# (eq, ":pos_atkdir", 0),
					# (ge,":thrust",1),
					# (agent_set_attack_action, ":ags", 0, 0),
				# (else_try),
					# (eq, ":pos_atkdir", 1),
					# (agent_set_attack_action,":ags", 2, 0),
				# (else_try),
					# (eq, ":pos_atkdir", 2),
					# (agent_set_attack_action, ":ags", 1, 0),
				# (else_try),
					# (eq, ":pos_atkdir", 3),
					# (agent_set_attack_action, ":ags", 3, 0),
				# (try_end),
			# (try_end),
			# #Chamber disarming
			# # (try_begin),
				# # (eq, ":pos_def", 1),
				# # (neq, ":pos_def", 2),
				# # (eq, ":pos_atkdir", 1),
				# # (eq, ":pos_atkdir", 2),
				# # (neq, ":pos_atk", 1),
				# # (eq, ":pos_atk", 2),
				# # (agent_is_in_parried_animation, ":possible"),
				# # (agent_get_wielded_item, ":weapon", ":ags", 0),
				# # (agent_unequip_item, ":ags", ":weapon"),
				# # (agent_get_bone_position, pos2, ":ags", hb_hand_r, 1),
				# # (store_random_in_range, ":z_rotation", 0, 360),
				# # (store_random_in_range, ":y_rotation", -60, 60),
				# # (store_random_in_range, ":x_pos", -90, 90),
				# # (store_random_in_range, ":y_pos", -90, 90),
				# # (position_rotate_z, pos2,":z_rotation"),
				# # (position_rotate_y, pos2,":y_rotation"),
				# # (position_move_x, pos2, ":x_pos"),
				# # (position_move_y, pos2, ":y_pos"),
				# # (position_set_z_to_ground_level, pos2),
				# # (position_move_z, pos2, 5),
				# # (set_spawn_position, pos2),
				# # (spawn_item, ":weapon"),
			# # (try_end),
			# #Feinting
			# (try_begin),
					# (store_random_in_range, ":dice", 1, 60),
					# (store_random_in_range, ":style", 1, 5),
					# (try_begin),
						# (eq,":thrust",0),#cant thrust
						# (store_random_in_range, ":random_dir", 1, 3),
					# (else_try),
						# (store_random_in_range, ":random_dir", 0, 3),
					# (try_end),
					# (store_random_in_range, ":random_action", 0, 1),
					# (le, ":dist", 200),
					# (eq, ":dice", 1),
					# (eq, ":pos_def", 2),
					# (assign, ":continue", 0),
					# (eq, ":continue", 0),
				# (try_begin),
					# (eq, ":style", 1),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 1),
				# (else_try),
					# (eq, ":style", 2),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 1),
				# (else_try),
					# (eq, ":style", 3),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 1),
				# (else_try),
					# (eq, ":style", 4),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 0),
					# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
					# (assign, ":continue", 1),
				# (try_end),
			# (try_end),
			# #Counter-attack
			# (try_begin),
				# (le, ":dist", 200),
				# (this_or_next|eq, ":pos_atk", 6),
				# (eq, ":pos_atk", 3),
				# (store_random_in_range, ":random_dir", 1, 3),
				# (store_random_in_range, ":random_action", 0, 1),
				# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			# (try_end),
			# #Attacking
			# (try_begin),
				# (le, ":dist", 300),
				# (try_begin),
					# (eq,":thrust",0),#cant thrust
					# (store_random_in_range, ":random_dir", 1, 3),
				# (else_try),
					# (store_random_in_range, ":random_dir", 0, 3),
				# (try_end),
				# (store_random_in_range, ":random_action", 0, 1),
				# (eq, ":pos_def", 2),
				# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			# (else_try),
				# (le, ":dist", 200),
				# (store_random_in_range, ":random_dir", 1, 3),
				# (store_random_in_range, ":random_action", 0, 1),
				# (eq, ":pos_def", 2),
				# (agent_set_attack_action, ":ags", ":random_dir", ":random_action"),
			# (try_end),
			# #Blocking
		# (try_begin),
		# (neq, ":pos_atk", 1), #readying attack
		# (eq, ":pos_atk", 2), #releasing attack	
		# (le, ":dist", 200),
		# #(store_random_in_range, ":random_chance", 1, 150),
			# (try_begin),
				# (eq, ":pos_atkdir", 0),
				# (agent_set_defend_action, ":ags", 0, 0),
			# (else_try),
				# (eq, ":pos_atkdir", 1),
				# (agent_set_defend_action, ":ags", 1, 0),
			# (else_try),
				# (eq, ":pos_atkdir", 2),
				# (agent_set_defend_action, ":ags", 2, 0),
			# (else_try),
				# (eq, ":pos_atkdir", 3),
				# (agent_set_defend_action, ":ags", 3, 0),
			# (try_end),
		# (try_end),
		# #Avoid
   # (try_end),])
   
   
#vyrn_ai end

#occc end


#CC-C begin

ccc_healing_item_used = ( 0, 0, 1, 
  [
    (key_is_down, key_h),
  ],
  [(get_player_agent_no, ":player_agent"), 
    (agent_is_alive, ":player_agent"), 
    (store_agent_hit_points, ":player_hp", ":player_agent"),
    (lt, ":player_hp", 100),
    (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
    
    (assign, ":healing_item_slot", -1),
    (try_for_range, ":slot_no", 0, ":inv_cap"),
        (troop_get_inventory_slot,":item_id","trp_player",":slot_no"),
        (eq, ":item_id", "itm_ccc_healing_wine"),
        (assign, ":healing_item_slot", ":slot_no"),
    (try_end),
    (try_begin),
      (eq, ":healing_item_slot", -1),
      (display_message, "@No Healing Wine!"),
    (else_try),
      (store_agent_hit_points, ":player_hp", ":player_agent", 1),
      (val_add, ":player_hp", 20), #hp to add
      (agent_set_hit_points, ":player_agent", ":player_hp", 1),
      
      (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":healing_item_slot"),
      (val_sub, ":cur_amount", 1),
      (troop_inventory_slot_set_item_amount,"trp_player",":healing_item_slot", ":cur_amount"),

      (agent_play_sound,":player_agent", "snd_ccd_healpot"),
      (display_message, "@You were healed for 20 hp"),
    (try_end)
  ])

ccc_battle_init = (ti_before_mission_start,0,0,[],[
    ## CC-D begin: over hp fix
    #(options_get_damage_to_player, reg10),
    #(assign,"$g_ccc_option_player_damage_fix",reg10),
    #(options_get_damage_to_friends, reg11),
    #(assign,"$g_ccc_option_ally_damage_fix",reg11),
    ## CC-D end
    (assign,"$g_ccc_ai_player_army_flag",0),
    (assign,"$g_ccc_shiled_crouch_flag",0),
    (assign,"$ccc_help_msg_flag",0),
    (assign,"$ccc_help_msg_str","str_ccc_help_message_lead"),
    (assign,"$ccc_start_def_num",0),
    (assign,"$ccc_start_atk_num",0),
    (assign, "$ccc_def_all_num", 0),
    (assign, "$ccc_atk_all_num", 0),
    
    ## CC-D begin: cave09 del but difor keep
    (try_for_range, ":troop_no", customizable_troops_begin, customizable_troops_end),
      (neg|troop_is_hero, ":troop_no"),
      (call_script,"script_ccc_set_slot_raise_item",":troop_no"),
    (try_end),
    ## CC-D end
  ])

ccc_hard_core_dead_flag = ( 5, 0, ti_once, 
  [
    (eq,"$g_ccc_option_hard_core_mode",1),
    (main_hero_fallen),
  ],
  [
	#occc tweak
	(try_begin),
	           (assign, ":max_surgery_level", 0),
	            (assign, ":best_surgeon", -1),
	            (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
	            (try_for_range, ":i_stack", 1, ":num_stacks"),
	              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
	              (troop_is_hero, ":stack_troop"),
	              (store_skill_level, ":cur_surgery_skill", skl_surgery, ":stack_troop"),
	              (gt, ":cur_surgery_skill", ":max_surgery_level"),
	              (assign, ":max_surgery_level", ":cur_surgery_skill"),
	              (assign, ":best_surgeon", ":stack_troop"),
	            (try_end),
		(ge,":best_surgeon",2),
		(val_div,":max_surgery_level",2),
		(val_max,":max_surgery_level",1),
		(store_random_in_range,":deadchance", 0, ":max_surgery_level"),#surgery level affects deadchance
		(try_begin),
			(eq,":deadchance",0),
			(assign,"$g_ccc_option_hard_core_mode",2),
			(str_store_troop_name,s1,":best_surgeon"),
			(display_message, "@Despite_{s1}'s_desperate_surgery,_your life,_at_last,_has_ended.", 0xFF0000),
			(call_script, "script_fail_quest", "qst_ccc_hard_core"),
			## CC-D begin: over hp fix
			(call_script, "script_ccc_last_agent_hp_fix"),
			## CC-D end
			(finish_mission),
			(jump_to_menu,"mnu_hard_core_dead_end"),
		(else_try),
		(str_store_troop_name,s1,":best_surgeon"),
		(display_message, "@{s1}'s_desperate_surgery_has_saved_you_from_death."),
		(try_end),
	(else_try),
		(assign,"$g_ccc_option_hard_core_mode",2),
		(call_script, "script_fail_quest", "qst_ccc_hard_core"),
		## CC-D begin: over hp fix
		(call_script, "script_ccc_last_agent_hp_fix"),
		## CC-D end
		(finish_mission),
		(jump_to_menu,"mnu_hard_core_dead_end"),
	(try_end),
  ])

ccc_player_ai_flag = ( 0, 0, 1, 
  [
    (key_is_down, key_y),  ## CC-D
    (key_is_down, key_left_control),  ## CC-D add
  ],
  [
      (try_begin),
        (eq, "$g_ccc_ai_player_army_flag",0),
        (assign,"$g_ccc_ai_player_army_flag",1),
        (try_begin),
          (eq,"$g_ccc_option_select_player_ai",0),
          (display_message, "@My army AI ON:Charge AI"),
        (else_try),
          (eq,"$g_ccc_option_select_player_ai",1),
          (display_message, "@My army AI ON:Defence AI"),
        (else_try),
          (eq,"$g_ccc_option_select_player_ai",2),
          (display_message, "@My army AI ON:The Strongest AI"),
        (try_end),
      (else_try),
        (assign,"$g_ccc_ai_player_army_flag",0),
        (display_message, "@My army AI OFF"),
      (try_end),
  ])
  
## CC-D begin: not use
#ccc_test_z = ( 0, 0, 1, 
#  [
#    (key_is_down, key_z),
#  ],
#  [
#      #(get_player_agent_no, ":player_agent"),
#      #(agent_set_animation,":player_agent","anim_spring_jump",0),
#  ])
## CC-D end

ccc_agent_shout_on_mount = (1.1,0,5,[(eq,"$g_ccc_option_npc_shout",1),],
  [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents,":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        #(agent_get_horse,":horse",":agent_no"),
        #(gt,":horse",0),
        (neq,":player_agent",":agent_no"),
        #(store_random_in_range,":r",0,2),
        #(eq,":r",0),
        (agent_get_wielded_item, ":now_eq_item",":player_agent", 0),
        (gt,":now_eq_item",0),
        (agent_get_attack_action,":anima",":agent_no"),
        (try_begin),
          (this_or_next|eq,":anima",1), #readying_attack
          (eq,":anima",2), #releasing_attack
          (agent_get_troop_id,":troop_no",":agent_no"),
          (troop_get_type,":type",":troop_no"),
          (try_begin),
            (eq,":type",0), #man
            (agent_play_sound,":agent_no", "snd_man_attack_talk"),
          (else_try),
            (agent_play_sound,":agent_no", "snd_woman_yell"),
          (try_end),
        (try_end),
      (try_end),
  ])

ccc_player_shout_on_mount = (1.1,0,1,
  [
    (eq,"$g_ccc_option_player_shout",1),
    (get_player_agent_no, ":player_agent"),
    (agent_is_alive, ":player_agent"),
    (agent_get_horse,":horse",":player_agent"),
    (gt,":horse",0),
    (agent_get_wielded_item, ":now_eq_item",":player_agent", 0),
    (gt,":now_eq_item",0),
    (item_get_type, ":type", ":now_eq_item"),
    (is_between, ":type", itp_type_one_handed_wpn, itp_type_arrows),
    (agent_get_attack_action,":anima",":player_agent"),
    (this_or_next|eq,":anima",1), #readying_attack
    (eq,":anima",2), #releasing_attack
  ],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_troop_id,":troop_no",":player_agent"),
    (troop_get_type,":type",":troop_no"),
    (try_begin),
      (eq,":type",0), #man
      (agent_play_sound,":player_agent", "snd_man_yell"),
    (else_try),
      (agent_play_sound,":player_agent", "snd_woman_yell"),
    (try_end),
  ])


ccc_shiled_crouch_flag = ( 0, 0, 1, 
  [
    (key_is_down, key_n),
  ],
  [
      (try_begin),
        (eq, "$g_ccc_shiled_crouch_flag",0),
        (assign,"$g_ccc_shiled_crouch_flag",1),
        (display_message, "@Shiled keep Crouch mode : ON"),
      (else_try),
        (assign,"$g_ccc_shiled_crouch_flag",0),
        (display_message, "@Shiled keep Crouch mode : OFF"),
        (try_for_agents,":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_get_animation, ":anima", ":agent_no", 1),
          (eq,":anima","anim_defend_shield_keep_crouch"),
          (agent_set_animation,":agent_no","anim_end",1),
        (try_end),
      (try_end),
  ])

#occc modified
ccc_set_shield_crouch = ( 0.1, 0, 0, 
  [(this_or_next|eq, "$g_ccc_shiled_crouch_flag",1),(eq,"$g_occc_troop_unique_action",1),],
  [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team,":player_team",":player_agent"),
      (set_fixed_point_multiplier, 100),
      (try_for_agents,":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_animation, ":anima", ":agent_no", 1),
        (eq,":anima","anim_defend_shield_keep"),
        (agent_get_team  ,":agent_team", ":agent_no"),
		(try_begin),#Player Agent
			(eq,":player_agent",":agent_no"),
			(eq, "$g_ccc_shiled_crouch_flag",1),
			(agent_get_horse,":horse_agent",":agent_no"),
			(lt, ":horse_agent", 0),
			(agent_set_animation,":agent_no","anim_defend_shield_keep_crouch",1),

		(else_try),#Player troops
			(eq,":player_team",":agent_team"),
			(eq, "$g_ccc_shiled_crouch_flag",1),
			
			(agent_get_horse,":horse_agent",":agent_no"),
			(lt, ":horse_agent", 0),
			(agent_get_division, ":agent_division", ":agent_no"),
			(team_get_movement_order, ":mov_order", ":agent_team", ":agent_division"),
			(try_begin),
			  (eq,":mov_order",mordr_hold),
			  (agent_set_animation,":agent_no","anim_defend_shield_keep_crouch",1),
			(else_try),
			  (eq,":anima","anim_defend_shield_keep_crouch"),
			  (agent_set_animation,":agent_no","anim_end",1),
			(try_end),
		(else_try),#Enemy and Ally
			(neq,":player_team",":agent_team"),
			(team_slot_eq, ":agent_team", slot_team_shield_crouch, 1),#Crouching Ordered
				
			(agent_get_horse,":horse_agent",":agent_no"),
			(lt, ":horse_agent", 0),
			(agent_get_division, ":agent_division", ":agent_no"),
			(team_get_movement_order, ":mov_order", ":agent_team", ":agent_division"),
			(try_begin),
			  (eq,":mov_order",mordr_hold),
			  (agent_set_animation,":agent_no","anim_defend_shield_keep_crouch",1),
			(else_try),
			  (eq,":anima","anim_defend_shield_keep_crouch"),
			  (agent_set_animation,":agent_no","anim_end",1),
			(try_end),
		(try_end),
      (try_end),
  ])
  
ccc_help_msg = ( 0, 0, 1, 
  [
    (neg|key_is_down, key_left_control),#occc
    (key_is_down, key_slash),
  ],
  [
    (try_begin),
      (eq,"$ccc_help_msg_flag",1),
      (assign,"$ccc_help_msg_flag",0),
      (tutorial_message, -1),
    (else_try),
      (assign,"$ccc_help_msg_flag",1),
        (try_end),        
                
    (try_begin),
      (eq,"$ccc_help_msg_flag",1),
      (tutorial_message_set_background, 1),
      (tutorial_message, "$ccc_help_msg_str"),
    (try_end),
  ])
    
#Reinforcement

ccc_init_reinforcement = (1,0,ti_once,
      [
          (store_mission_timer_a,":time_a"),
          (ge,":time_a",25),
      ],
      [
          (call_script,"script_ccc_battle_ally_and enemy_info",0),
          (assign,"$ccc_start_def_num",reg1),
          (assign,"$ccc_start_atk_num",reg7),
          
          (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
          (assign, ":ally_all_num", reg0),
          (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
          (assign, ":enemy_all_num", reg0),
          
          (get_player_agent_no, ":player_agent"),
          (agent_get_team,":player_team",":player_agent"),
          (try_begin),
            (eq,":player_team",0), #def
            (assign, "$ccc_def_all_num", ":ally_all_num"),
            (assign, "$ccc_atk_all_num", ":enemy_all_num"),
          (else_try),
            (assign, "$ccc_def_all_num", ":enemy_all_num"),
            (assign, "$ccc_atk_all_num", ":ally_all_num"),
          (try_end),
          ## CC-D begin: reinforcement count
          (assign, "$defender_reinforcement_stage", 0),
          (assign, "$attacker_reinforcement_stage", 0),
          ## CC-D end
      ])

ccc_lead_reinforcement = (2.4, 0, 0, 
  [
    (store_mission_timer_a,":time_a"),
    (ge,":time_a",15),  ## CC-D 30->15
    (call_script,"script_ccc_battle_ally_and enemy_info",0),
    (assign,":num_def_men",reg1),
    (assign,":num_def_down_men",reg5),
    (assign,":num_atk_men",reg7),
    (assign,":num_atk_down_men",reg11),
    
    #(assign,reg11,"$ccc_def_all_num"),
    #(store_add,reg2,reg1,reg5),
    #(display_message,"@CCC_DEBUG def all:{reg11} atk_a:{reg1} atk_down:{reg5} +{reg2}"),
    
    (store_add,":def_fight_num",":num_def_down_men",":num_def_men"),
    (store_add,":atk_fight_num",":num_atk_down_men",":num_atk_men"),
    
    (val_add,":num_def_men",5),
    (val_add,":num_atk_men",5),
    
    (get_player_agent_no, ":player_agent"),
    (agent_get_team,":player_team",":player_agent"),
    
    (assign,":view_flag",0),
    (store_sub,":def_rest","$ccc_def_all_num",":def_fight_num"),
    (val_max,":def_rest",0),
    (try_begin),#defender_reinforcement
      (lt,":num_def_men","$ccc_start_def_num"),
      (gt,":def_rest",0),
      ## CC-D begin: reinforcement count
      (this_or_next|eq, "$g_reinforcement_stage", -1),
      (lt, "$defender_reinforcement_stage", "$g_reinforcement_stage"),
      (val_add, "$defender_reinforcement_stage", 1),
      ## CC-D end
      (add_reinforcements_to_entry,0,5),  ## CC-D 2->5
      (assign,":view_flag",1),
    (try_end),
    
    (store_sub,":atk_rest","$ccc_atk_all_num",":atk_fight_num"),
    (val_max,":atk_rest",0),
    (try_begin),#attacker_reinforcement
      (lt,":num_atk_men","$ccc_start_atk_num"),
      (gt,":atk_rest",0),
      ## CC-D begin: reinforcement count
      (this_or_next|eq, "$g_reinforcement_stage", -1),
      (lt, "$attacker_reinforcement_stage", "$g_reinforcement_stage"),
      (val_add, "$attacker_reinforcement_stage", 1),
      ## CC-D end
      (add_reinforcements_to_entry,3,5),  ## CC-D 2->5
      (assign,":view_flag",1),
    (try_end),
    
    (try_begin),
      (eq,":view_flag",1),
      (try_begin),
        (eq,":player_team",0),
        (store_sub,reg1,"$ccc_def_all_num",":num_def_down_men"),
        (store_sub,reg2,"$ccc_atk_all_num",":num_atk_down_men"),
        (assign,reg3,":def_rest"),
        (assign,reg4,":atk_rest"),
      (else_try),
        (store_sub,reg2,"$ccc_def_all_num",":num_def_down_men"),
        (store_sub,reg1,"$ccc_atk_all_num",":num_atk_down_men"),
        (assign,reg4,":def_rest"),
        (assign,reg3,":atk_rest"),
      (try_end),
      (display_message,"str_ccc_military_power_text"),
      ## CC-D begin: reinforcement count
      (try_begin),
        (neq, "$g_reinforcement_stage", -1),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, reg5, "$defender_reinforcement_stage"),
          (assign, reg6, "$attacker_reinforcement_stage"),
        (else_try),
          (assign, reg6, "$defender_reinforcement_stage"),
          (assign, reg5, "$attacker_reinforcement_stage"),
        (try_end),
        (display_message, "@Ally Wave:{reg5} Enemy Wave:{reg6}"),
      (try_end),
      ## CC-D end
    (try_end),
  ],[])
    
ccc_siege_get_good_entry = (
  1.1, 0, ti_once,
  [],
  [
    (call_script, "script_ccc_siege_get_good_entry_init"),
    (assign,"$ccc_good_entry",4),
    
    (get_player_agent_no, ":player_agent"),
    (agent_get_team,":player_team",":player_agent"),
    
    (try_begin),
      (eq,":player_team",1), #atk
      (team_give_order, ":player_team",grc_everyone, mordr_stand_ground),
    (try_end),
  ])

ccc_siege_reinforcement = (2.4, 0, 0,
  [
    (store_mission_timer_a,":time_a"),
    (ge,":time_a",18),  ## CC-D 43->18
    (call_script,"script_ccc_battle_ally_and enemy_info",0),
    (assign,":num_def_men",reg1),
    (assign,":num_def_down_men",reg5),
    (assign,":num_atk_men",reg7),
    (assign,":num_atk_down_men",reg11),
    
    #(assign,reg11,"$ccc_def_all_num"),
    #(store_add,reg2,reg7,reg11),
    #(display_message,"@CCC_DEBUG def all:{reg11} atk_a:{reg1} atk_down:{reg5} +{reg2}"),
    
    (store_add,":def_fight_num",":num_def_down_men",":num_def_men"),
    (store_add,":atk_fight_num",":num_atk_down_men",":num_atk_men"),
    
    (val_add,":num_def_men",8),
    (val_add,":num_atk_men",8),
    
    (get_player_agent_no, ":player_agent"),
    (agent_get_team,":player_team",":player_agent"),
    
    (assign,":view_flag",0),
    (store_sub,":def_rest","$ccc_def_all_num",":def_fight_num"),
    (val_max,":def_rest",0),
    (try_begin),#defender_reinforcement
      (lt,":num_def_men","$ccc_start_def_num"),
      (gt,":def_rest",0),
      (add_reinforcements_to_entry,4,5),  ## CC-D 3->5
      (assign,":view_flag",1),
    (try_end),
    
    (store_sub,":atk_rest","$ccc_atk_all_num",":atk_fight_num"),
    (val_max,":atk_rest",0),
    (try_begin),#attacker_reinforcement
      (lt,":num_atk_men","$ccc_start_atk_num"),
      (gt,":atk_rest",0),
      (add_reinforcements_to_entry,1,4),  ## CC-D 3->4
      (assign,":view_flag",1),
    (try_end),
    
    #check good entry
    (call_script,"script_ccc_siege_get_good_entry",500),
    (assign,"$ccc_good_entry",reg0),
    
    (try_begin),
      (eq,":view_flag",1),
      (try_begin),
        (eq,":player_team",0),
        (store_sub,reg1,"$ccc_def_all_num",":num_def_down_men"),
        (store_sub,reg2,"$ccc_atk_all_num",":num_atk_down_men"),
        (assign,reg3,":def_rest"),
        (assign,reg4,":atk_rest"),
      (else_try),
        (store_sub,reg2,"$ccc_def_all_num",":num_def_down_men"),
        (store_sub,reg1,"$ccc_atk_all_num",":num_atk_down_men"),
        (assign,reg4,":def_rest"),
        (assign,reg3,":atk_rest"),
      (try_end),
      (display_message,"str_ccc_military_power_text"),
    (try_end),
  ],[])

ccc_siege_spawn_good_entry = (ti_on_agent_spawn, 0, 0, 
  [(store_mission_timer_a,":time_a"),(ge,":time_a",3),],
  [
      (store_trigger_param_1, ":cur_agent"),
      (set_fixed_point_multiplier, 100),
      (try_begin),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_is_defender,":cur_agent"),
        (entry_point_get_position, pos41,"$ccc_good_entry"),
        (agent_set_position,":cur_agent",pos41),
      (try_end),
  ])

ccc_siege_troop_type_init = (ti_on_agent_spawn, 0, 0,[],
  [
      (store_trigger_param_1, ":cur_agent"),
      
      (try_begin),
        (agent_is_human,":cur_agent"),
        (get_player_agent_no, ":player_agent"),
        (ge,":player_agent",0),
        (agent_get_team,":player_team",":player_agent"),
        (agent_get_team,":agent_team",":cur_agent"),
        (neq,":player_team",":agent_team"),
        (agent_get_troop_id,":troop_no",":cur_agent"),
        (call_script,"script_ccc_get_troop_type",":troop_no"),
        (assign,":troop_type",reg0),
        
        (store_troop_faction,":faction_no",":troop_no"),
        (try_begin),
          (eq,":faction_no","fac_kingdom_3"),
          (eq,":troop_type",grc_cavalry_archers),
          (store_random_in_range,":r",0,4),
          (neq,":r",3),
          (agent_set_division, ":cur_agent",grc_archers),
        (else_try),
          (eq,":troop_type",grc_cavalry_archers),
          (agent_set_division, ":cur_agent",grc_archers),
        (try_end),
      (try_end),
  ])

ccc_init_troop_hp = (
  ti_on_agent_spawn, 0, 0, [],
  [
    (store_trigger_param_1, ":agent_no"),
    #(get_player_agent_no, ":player_agent"),
    
    (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 0),
    (try_begin),
      #(neq, ":agent_no", ":player_agent"),
      (agent_is_human, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      
      (call_script, "script_get_troop_max_hp", ":troop_no"),
      (assign, ":sys_max_hp", reg0),
      (agent_set_slot, ":agent_no", slot_agent_sys_max_hp, ":sys_max_hp"),
      
      (call_script, "script_ccc_get_troop_max_hp", ":troop_no"),
      (assign, ":max_hp", reg0),
	  
	  ##occc perk begin!!
	  (troop_get_slot, ":perk", ":troop_no", slot_troop_perk_type),#get perk
	  (try_begin),#has perk?
		  (gt,":perk",0),
		  (store_mod, ":perk_1",":perk",100),
		  (store_div, ":perk_2",":perk",100),
		  (this_or_next|eq,":perk_1",perk_colossus),#has colossus?
		  (eq,":perk_2",perk_colossus),
		  #gain 15% bonus max hp
		  (val_mul,":max_hp",115),
		  (val_div,":max_hp",100),
		  #(display_message,"@OCCC DEBUG:Perk Colossus Activated."),
	  (try_end),
	  ##occc perk end!!
	  
	  
      #(assign, ":horse_max_hp", reg1),
      (agent_set_slot, ":agent_no", slot_agent_max_hp, ":max_hp"),
      ## CC-D begin: over hp fix
      #(agent_set_slot, ":agent_no", slot_agent_backup_hp, ":max_hp"),
      
      (try_begin), #hero no fix
        #(lt,":max_hp",":sys_max_hp"),
        #(agent_set_hit_points, ":agent_no", ":max_hp", 1),
      #(else_try),
        #(gt,":max_hp",":sys_max_hp"),
        (neq, ":max_hp", ":sys_max_hp"),
        (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 1),
        #(agent_set_no_death_knock_down_only, ":agent_no", 1),
        
        #(troop_is_hero,":troop_no"),
        (store_agent_hit_points,":now_hp",":agent_no",1),
        (store_agent_hit_points,":per",":agent_no",0),
        (agent_set_max_hit_points, ":agent_no", ":max_hp", 1),
        (gt,":now_hp",0),
        (try_begin),
          (le,":now_hp",":sys_max_hp"),
          (agent_set_hit_points, ":agent_no", ":per", 0),
        (else_try),
          (val_min, ":now_hp", ":max_hp"),
          (agent_set_hit_points, ":agent_no", ":now_hp", 1),
        (try_end),
        #(val_mul,":now_hp",100),
        #(store_div,":per",":now_hp",":sys_max_hp"),
        #(store_mul,":fix_hp",":max_hp",":per"),
        #(gt,":fix_hp",0),
        #(val_div,":fix_hp",100),
        #(val_max,":fix_hp",1),
        #(agent_set_slot, ":agent_no", slot_agent_backup_hp,":fix_hp"),
        #(le,":fix_hp",":sys_max_hp"),
        #(agent_set_hit_points, ":agent_no",":fix_hp",1),
        #(agent_set_no_death_knock_down_only, ":agent_no", 0),
      ## CC-D end
      (try_end),
    (try_end),
  ])
  
## CC-D begin: over hp fix
## Trigger Param 1: damage inflicted agent_id
## Trigger Param 2: damage dealer agent_id
## Trigger Param 3: inflicted damage
## Register 0: damage dealer item_id
## Position Register 0: position of the blow
##                      rotation gives the direction of the blow
#ccc_agent_refill_hp = (
#ti_on_agent_hit, 0, 0, [], 
#  [
#    (store_trigger_param_1, ":agent_no"),
#    #(store_trigger_param_2, ":attker_agent_no"),
#    #(store_trigger_param_3, ":damage"),
#        
#    (try_begin),
#      (agent_slot_ge, ":agent_no", slot_agent_over_hp_flag, 1),
#      (try_begin),
#        #playe damage fix
#        (get_player_agent_no, ":player_agent"),
#        (try_begin),
#          (gt,"$g_ccc_option_player_damage_fix",0),
#          (gt,":damage",0),
#          (eq,":agent_no",":player_agent"),
#          (try_begin),
#            (eq,"$g_ccc_option_player_damage_fix",1),
#            (val_div,":damage",2),
#          (else_try),
#            (eq,"$g_ccc_option_player_damage_fix",2),
#            (val_div,":damage",4),
#          (try_end),
#        (try_end),
#        
#        #ally damage fix
#        (try_begin),
#          (gt,"$g_ccc_option_ally_damage_fix",0),
#          (gt,":damage",0),
#          (neq,":agent_no",":player_agent"),
#          (agent_get_team,":player_team",":player_agent"),
#          (agent_get_team,":agent_team",":agent_no"),
#          (eq,":player_team",":agent_team"),
#          (try_begin),
#            (eq,"$g_ccc_option_ally_damage_fix",1),
#            (val_div,":damage",4),
#            (val_mul,":damage",3),
#          (else_try),
#            (eq,"$g_ccc_option_ally_damage_fix",2),
#            (val_div,":damage",2),
#          (try_end),
#        (try_end),
#        
#        (agent_get_slot, ":backup_hp", ":agent_no", slot_agent_backup_hp),
#        (val_sub,":backup_hp",":damage"),
#        (val_max, ":backup_hp", 0),
#        (agent_set_slot, ":agent_no", slot_agent_backup_hp, ":backup_hp"),
#        (agent_get_slot, ":sys_max_hp", ":agent_no", slot_agent_sys_max_hp),
#        (agent_slot_eq, ":agent_no", slot_agent_over_hp_flag, 1),
#        (try_begin),
#          (gt,":backup_hp", ":sys_max_hp"),
#          (agent_set_hit_points, ":agent_no",100, 0),
#        (else_try),
#          (agent_set_no_death_knock_down_only, ":agent_no", 0),
#          (agent_get_troop_id,":troop_no",":agent_no"),
#          (agent_set_hit_points,":agent_no",":backup_hp", 1),
#          (agent_get_troop_id,":troop_no",":agent_no"),
#          (try_begin),
#            (troop_is_hero,":troop_no"),
#            (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 2),
#          (else_try),
#            (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 0),
#          (try_end),
#        (try_end),
#      (try_end),
#    (try_end),
#  ])
## CC-D end
    
ccc_agent_weapons_set2 =(
  ti_on_agent_spawn, 0, 0, [(eq,"$g_ccc_option_weapons_ai",1),],
  [
    (store_trigger_param_1, ":agent_no"),

    (try_begin),
      (agent_is_human, ":agent_no"),
      (get_player_agent_no, ":player_agent"),
      (neq, ":agent_no", ":player_agent"),
      
      #init
      (try_for_range,":slot",slot_agent_use_one_hand,slot_agent_use_shield+1),
        (agent_set_slot,":agent_no", ":slot", 0),
      (try_end),
      (agent_set_slot, ":agent_no", slot_agent_weapons_priority, 0),
      
      #0-7, order is weapon1, weapon2, weapon3, weapon4, head_armor, body_armor, leg_armor, hand_armor
      #(agent_get_item_slot, ":weapon", ":agent_no", 0),
      
      (assign,":cnt",0),
      (try_for_range, ":troop_no",itp_type_one_handed_wpn, itp_type_thrown),
        (party_set_slot, "trp_ccc_temp_troop", ":cnt", ":troop_no"),
        (val_add,":cnt",1),
      (try_end),

      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (troop_get_inventory_capacity, ":inv_end", ":troop_no"),
      (assign,":weapon_cnt",0),
      (try_for_range, ":i_slot", 0, ":inv_end"),
        (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
        (gt, ":item_id", 0),
        (item_get_type, ":type", ":item_id"),
        (this_or_next|is_between,":type",itp_type_one_handed_wpn,itp_type_thrown),
        (is_between,":type",itp_type_one_handed_wpn,itp_type_thrown),
      (try_end),
    (try_end),
  ])

ccc_agent_weapons_set =(
  ti_on_agent_spawn, 0, 0, [(eq,"$g_ccc_option_weapons_ai",2),],
    [
      (store_trigger_param_1, ":agent_no"),

      (try_begin),
        (agent_is_human, ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent_no", ":player_agent"),
    
        #ini
        (agent_set_slot, ":agent_no", slot_agent_use_one_hand, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_two_hand, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_polearm, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_range, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown1, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown2, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown3, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown4, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_shield, 0),
        (agent_set_slot, ":agent_no", slot_agent_eq_timer, 0),
        
        (agent_set_slot, ":agent_no", slot_agent_weapons_priority, 0),
        
        (assign,":one_hand_cnt",0),
        (assign,":two_hand_cnt",0),
        (assign,":polearm_cnt",0),
        (assign,":range_cnt",0),
        (assign,":shield_cnt",0),
        (assign,":thrown_cnt",0),
        (assign,":thrown_eq_cnt",0),
        (assign,":ammo_cnt",0),
        (assign,":ammo_eq_cnt",0),
        (assign,":item_ammo1",0),
        (assign,":eq_cnt",0),
        
        (assign,":one_hand_temp",0),
        (assign,":two_hand_temp",0),
        (assign,":polearm_temp",0),
        (assign,":thrown_temp",0),
        (assign,":range_temp",0),
       #(assign,":shield_temp",0),

        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (troop_get_inventory_capacity, ":end_cond", ":troop_no"),
        (try_for_range, ":i_slot", 0, ":end_cond"),
          (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
          (gt, ":item_id", 0),
          (item_get_type, ":type", ":item_id"),
          (try_begin),
            (eq, ":type", itp_type_one_handed_wpn),
            (val_add,":one_hand_cnt",1),
            (assign,":one_hand_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_one_hand, ":item_id"),
              (agent_unequip_item,":agent_no",":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_two_handed_wpn),
            (val_add,":two_hand_cnt",1),
            (assign,":two_hand_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_two_hand, ":item_id"),
              (agent_unequip_item,":agent_no",":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_polearm),
            (val_add,":polearm_cnt",1),
            (assign,":polearm_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_polearm, ":item_id"),
              (agent_unequip_item,":agent_no",":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (this_or_next|is_between, ":type", itp_type_bow, itp_type_thrown),
            (is_between, ":type", itp_type_pistol, itp_type_bullets),
            (assign,":range_temp",":item_id"),
            (val_add,":range_cnt",1),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_range, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_shield),
            (val_add,":shield_cnt",1),
            #(assign,":shield_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_shield, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_thrown),
            (assign,":thrown_temp",":item_id"),
            (val_add,":thrown_cnt",1),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (try_begin),
                (eq,":thrown_eq_cnt",0),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":item_id"),
                (else_try),
                (eq,":thrown_eq_cnt",1),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown2, ":item_id"),
                (else_try),
                (eq,":thrown_eq_cnt",2),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown3, ":item_id"),
              (try_end),
              (val_add,":thrown_eq_cnt",1),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (this_or_next|is_between, ":type", itp_type_arrows, itp_type_shield),
            (eq, ":type", itp_type_bullets),
            (val_add,":ammo_cnt",1),
            (assign,":item_ammo1",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (val_add,":ammo_eq_cnt",1),
              (val_add,":eq_cnt",1),
            (try_end),
      
          (try_end),
        (try_end),

        (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
        (agent_get_slot, ":two_hand_item", ":agent_no", slot_agent_use_two_hand),
        (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (agent_get_slot, ":thrown_item", ":agent_no", slot_agent_use_thrown1),
        (agent_get_slot, ":shield_item", ":agent_no", slot_agent_use_shield),

        #ammo check
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (gt,":range_item",0),
          (eq,":item_ammo1",0),
          (eq,":ammo_eq_cnt",0),
          #(agent_unequip_item,":agent_no",":range_item"),
          (agent_set_slot,":agent_no", slot_agent_use_range,0),
        (try_end),
        
        #one_hand
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":one_hand_item",0),
          (gt,":one_hand_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_one_hand, ":one_hand_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #two_hand
        (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":two_hand_item",0),
          (eq,":one_hand_item",0),
          (gt,":two_hand_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_two_hand, ":two_hand_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #polearm
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":polearm_item",0),
          (gt,":polearm_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_polearm, ":polearm_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #shield
        #(try_begin),
          #(lt,":eq_cnt",4),
          #(eq,":shield_item",0),
          #(gt,":shield_temp",0),
          #(agent_set_slot, ":agent_no", slot_agent_use_shield, ":shield_temp"),
          #(agent_equip_item,":agent_no",":shield_temp"),
          #(val_add,":eq_cnt",1),
        #(try_end),

        #range
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":range_item",0),
          (gt,":range_temp",0),
          (gt,":item_ammo1",0),
          (gt,":ammo_eq_cnt",0),
          (agent_set_slot, ":agent_no", slot_agent_use_range, ":range_temp"),
          (agent_equip_item,":agent_no",":range_temp"),
          (val_add,":eq_cnt",1),
        (try_end),
        
        #ammo
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (lt,":eq_cnt",4),
          (gt,":range_item",0),
          (gt,":item_ammo1",0),
          (eq,":ammo_eq_cnt",0),
          (agent_equip_item,":agent_no",":item_ammo1"),
          (val_add,":eq_cnt",1),
        (try_end),

        #thrown
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":thrown_item",0),
          (gt,":thrown_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":thrown_temp"),
          (agent_equip_item,":agent_no",":thrown_temp"),
          (val_add,":eq_cnt",1),
        (try_end),
        
        #Don,t use weapons ai
        (try_begin),
          (eq,":one_hand_cnt",0), # no melee
          (eq,":two_hand_cnt",0),
          (eq,":polearm_cnt",0),
          (eq,":shield_item",0),
          (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai), #99999 = Don,t use weapons ai
        (else_try),
          (eq,":two_hand_cnt",0),
          (eq,":polearm_cnt",0),
          (eq,":thrown_cnt",0),
          (eq,":shield_item",0),
          (eq,":range_item",0),
          (eq,":ammo_cnt",0),
          (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
          (agent_equip_item,":agent_no",":one_hand_item"),
          (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        (else_try),
          (eq,":one_hand_cnt",0),
          (eq,":polearm_cnt",0),
          (eq,":thrown_cnt",0),
          (eq,":shield_item",0),
          (eq,":range_item",0),
          (eq,":ammo_cnt",0),
          (agent_get_slot, ":two_hand_item", ":agent_no", slot_agent_use_two_hand),
          (agent_equip_item,":agent_no",":two_hand_item"),
          (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        (else_try),
          (eq,":one_hand_cnt",0),
          (eq,":two_hand_cnt",0),
          (eq,":thrown_cnt",0),
          (eq,":shield_item",0),
          (eq,":range_item",0),
          (eq,":ammo_cnt",0),
          (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
          (agent_equip_item,":agent_no",":polearm_item"),
          (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        (try_end),

     (try_end),
    ])
	
	
occc_agent_weapons_set_cave =(
  ti_on_agent_spawn, 0, 0, [],
    [
      (store_trigger_param_1, ":agent_no"),

      (try_begin),
        (agent_is_human, ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent_no", ":player_agent"),
    
        #ini
        (agent_set_slot, ":agent_no", slot_agent_use_one_hand, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_two_hand, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_polearm, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_range, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown1, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown2, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown3, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_thrown4, 0),
        (agent_set_slot, ":agent_no", slot_agent_use_shield, 0),
        (agent_set_slot, ":agent_no", slot_agent_eq_timer, 0),
        
        (agent_set_slot, ":agent_no", slot_agent_weapons_priority, 0),
        
        (assign,":one_hand_cnt",0),
        (assign,":two_hand_cnt",0),
        (assign,":polearm_cnt",0),
        (assign,":range_cnt",0),
        (assign,":shield_cnt",0),
        (assign,":thrown_cnt",0),
        (assign,":thrown_eq_cnt",0),
        (assign,":ammo_cnt",0),
        (assign,":ammo_eq_cnt",0),
        (assign,":item_ammo1",0),
        (assign,":eq_cnt",0),
        
        (assign,":one_hand_temp",0),
        (assign,":two_hand_temp",0),
        (assign,":polearm_temp",0),
        (assign,":thrown_temp",0),
        (assign,":range_temp",0),
       #(assign,":shield_temp",0),

        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (troop_get_inventory_capacity, ":end_cond", ":troop_no"),
        (try_for_range, ":i_slot", 0, ":end_cond"),
          (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
          (gt, ":item_id", 0),
          (item_get_type, ":type", ":item_id"),
          (try_begin),
            (eq, ":type", itp_type_one_handed_wpn),
            (val_add,":one_hand_cnt",1),
            (assign,":one_hand_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_one_hand, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_two_handed_wpn),
            (val_add,":two_hand_cnt",1),
            (assign,":two_hand_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_two_hand, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_polearm),
            (val_add,":polearm_cnt",1),
            (assign,":polearm_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_polearm, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (this_or_next|is_between, ":type", itp_type_bow, itp_type_thrown),
            (is_between, ":type", itp_type_pistol, itp_type_bullets),
            (assign,":range_temp",":item_id"),
            (val_add,":range_cnt",1),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_range, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_shield),
            (val_add,":shield_cnt",1),
            #(assign,":shield_temp",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (agent_set_slot, ":agent_no", slot_agent_use_shield, ":item_id"),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (eq, ":type", itp_type_thrown),
            (assign,":thrown_temp",":item_id"),
            (val_add,":thrown_cnt",1),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (try_begin),
                (eq,":thrown_eq_cnt",0),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":item_id"),
                (else_try),
                (eq,":thrown_eq_cnt",1),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown2, ":item_id"),
                (else_try),
                (eq,":thrown_eq_cnt",2),
                (agent_set_slot, ":agent_no", slot_agent_use_thrown3, ":item_id"),
              (try_end),
              (val_add,":thrown_eq_cnt",1),
              (val_add,":eq_cnt",1),
            (try_end),

          (else_try),
            (this_or_next|is_between, ":type", itp_type_arrows, itp_type_shield),
            (eq, ":type", itp_type_bullets),
            (val_add,":ammo_cnt",1),
            (assign,":item_ammo1",":item_id"),
            (try_begin),
              (agent_has_item_equipped,":agent_no",":item_id"),
              (val_add,":ammo_eq_cnt",1),
              (val_add,":eq_cnt",1),
            (try_end),
      
          (try_end),
        (try_end),

        (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
        (agent_get_slot, ":two_hand_item", ":agent_no", slot_agent_use_two_hand),
        (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (agent_get_slot, ":thrown_item", ":agent_no", slot_agent_use_thrown1),
        #(agent_get_slot, ":shield_item", ":agent_no", slot_agent_use_shield),

        #ammo check
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (gt,":range_item",0),
          (eq,":item_ammo1",0),
          (eq,":ammo_eq_cnt",0),
          #(agent_unequip_item,":agent_no",":range_item"),
          (agent_set_slot,":agent_no", slot_agent_use_range,0),
        (try_end),
        
        #one_hand
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":one_hand_item",0),
          (gt,":one_hand_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_one_hand, ":one_hand_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #two_hand
        (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":two_hand_item",0),
          (eq,":one_hand_item",0),
          (gt,":two_hand_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_two_hand, ":two_hand_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #polearm
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":polearm_item",0),
          (gt,":polearm_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_polearm, ":polearm_temp"),
          (val_add,":eq_cnt",1),
        (try_end),

        #shield
        #(try_begin),
          #(lt,":eq_cnt",4),
          #(eq,":shield_item",0),
          #(gt,":shield_temp",0),
          #(agent_set_slot, ":agent_no", slot_agent_use_shield, ":shield_temp"),
          #(agent_equip_item,":agent_no",":shield_temp"),
          #(val_add,":eq_cnt",1),
        #(try_end),

        #range
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":range_item",0),
          (gt,":range_temp",0),
          (gt,":item_ammo1",0),
          (gt,":ammo_eq_cnt",0),
          (agent_set_slot, ":agent_no", slot_agent_use_range, ":range_temp"),
          (agent_equip_item,":agent_no",":range_temp"),
          (val_add,":eq_cnt",1),
        (try_end),
        
        #ammo
        (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
        (try_begin),
          (lt,":eq_cnt",4),
          (gt,":range_item",0),
          (gt,":item_ammo1",0),
          (eq,":ammo_eq_cnt",0),
          (agent_equip_item,":agent_no",":item_ammo1"),
          (val_add,":eq_cnt",1),
        (try_end),

        #thrown
        (try_begin),
          (lt,":eq_cnt",4),
          (eq,":thrown_item",0),
          (gt,":thrown_temp",0),
          (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":thrown_temp"),
          (agent_equip_item,":agent_no",":thrown_temp"),
          (val_add,":eq_cnt",1),
        (try_end),
        
        #Don,t use weapons ai
        # (try_begin),
          # (eq,":one_hand_cnt",0), # no melee
          # (eq,":two_hand_cnt",0),
          # (eq,":polearm_cnt",0),
          # (eq,":shield_item",0),
          # (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai), #99999 = Don,t use weapons ai
        # (else_try),
          # (eq,":two_hand_cnt",0),
          # (eq,":polearm_cnt",0),
          # (eq,":thrown_cnt",0),
          # (eq,":shield_item",0),
          # (eq,":range_item",0),
          # (eq,":ammo_cnt",0),
          # (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
          # (agent_equip_item,":agent_no",":one_hand_item"),
          # (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        # (else_try),
          # (eq,":one_hand_cnt",0),
          # (eq,":polearm_cnt",0),
          # (eq,":thrown_cnt",0),
          # (eq,":shield_item",0),
          # (eq,":range_item",0),
          # (eq,":ammo_cnt",0),
          # (agent_get_slot, ":two_hand_item", ":agent_no", slot_agent_use_two_hand),
          # (agent_equip_item,":agent_no",":two_hand_item"),
          # (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        # (else_try),
          # (eq,":one_hand_cnt",0),
          # (eq,":two_hand_cnt",0),
          # (eq,":thrown_cnt",0),
          # (eq,":shield_item",0),
          # (eq,":range_item",0),
          # (eq,":ammo_cnt",0),
          # (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
          # (agent_equip_item,":agent_no",":polearm_item"),
          # (agent_set_slot, ":agent_no", slot_agent_eq_timer, dont_use_weapons_ai),
        # (try_end),

     (try_end),
    ])

    
# Trigger Param 1: damage inflicted agent_id
# Trigger Param 2: damage dealer agent_id
# Trigger Param 3: inflicted damage
# Register 0: damage dealer item_id
# Position Register 0: position of the blow
#                      rotation gives the direction of the blow
ccc_item_damage_effect = (
ti_on_agent_hit, 0, 0, [], 
  [
    (store_trigger_param_1, ":agent_no"),
    (store_trigger_param_2, ":attker_agent"),
    (store_trigger_param_3, ":damage"),
    
	
	
    (try_begin),
      (eq,"itm_ccc_sword_two_souledge",reg0),
      ## CC-D begin: no friendly fire option
      (agent_get_team,":attk_team",":attker_agent"),
      (assign,":effect_cnt",0),
      (try_for_agents,":cur_agent"),
        (agent_is_alive,":cur_agent"),
        (neq,":cur_agent",":attker_agent"),
        (assign, ":continue", 1),
        (try_begin),
          (eq, "$g_ccd_option_no_friendly_area_damage", 1),
          (agent_get_team,":cur_team",":cur_agent"),
          (neg|teams_are_enemies,":attk_team",":cur_team"),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (agent_get_position,pos1,":cur_agent"),
        (get_distance_between_positions,":dist",pos0,pos1),
        (lt,":dist",150),
        (agent_deliver_damage_to_agent,":attker_agent",":cur_agent"),
        (lt,":effect_cnt",6),
        (val_add,":effect_cnt",1),
        ## CC-D begin
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (try_begin),
          (eq, ":cur_troop", -1),
          (agent_play_sound, ":cur_agent", "snd_horse_snort"),
        (else_try),
          (agent_is_human, ":cur_agent"),
          (troop_get_type, ":is_female", ":cur_troop"),
          (try_begin),
            (eq, ":is_female", 0),
            (agent_play_sound, ":cur_agent", "snd_man_die"),
          (else_try),
			(this_or_next|eq, ":is_female", tf_elf_female),
			(this_or_next|eq, ":is_female", tf_gaolu_female),
			(this_or_next|eq, ":is_female", tf_girl),
            (eq, ":is_female", 1),
            (agent_play_sound, ":cur_agent", "snd_woman_die"),
          (try_end),
        (try_end),
        (particle_system_burst,"psys_explosive_explosion_sparks_b",pos1,50),
      (try_end),
      (try_begin),
        (gt, ":effect_cnt" , 0),
        (agent_play_sound,":attker_agent","snd_ccd_souledge"),
      (try_end),
      ## CC-D end
    ## CC-D begin
    (else_try),
      (this_or_next|eq, "itm_ccc_polearm_sword_of_miracles", reg0),
      (this_or_next|agent_slot_eq, ":attker_agent", slot_agent_can_lifesteal, 1),#occc perk
      (this_or_next|eq, "itm_ccc_axe_chaos1", reg0),# occc
      (this_or_next|eq, "itm_occc_asmoday_sword", reg0),# occc
      (eq, "itm_ccd_vicious_heart", reg0),
	  #occc begin
	  (assign, ":cur_item_lyf", reg0),
	  (gt,":cur_item_lyf",0),
	  (item_get_type, ":type",":cur_item_lyf"),
	  #not ranged weapon
	  (this_or_next|eq,":type",itp_type_one_handed_wpn),
	  (this_or_next|eq,":type",itp_type_two_handed_wpn),
	  (eq,":type",itp_type_polearm),

	  #occc end
      (ge, ":damage", 1),
      (store_mul, ":absorb", ":damage", 5),
      (val_div, ":absorb", 100),
      (val_min, ":absorb", 5),
      (try_begin),
        (lt, ":absorb", 1),
        (assign, ":absorb", 1),
      (try_end),
      (store_agent_hit_points, ":cur_hp", ":attker_agent", 1),
      (val_add, ":cur_hp", ":absorb"),
      (agent_set_hit_points, ":attker_agent", ":cur_hp", 1),
    (else_try),
      (eq, "itm_ccd_bangalore", reg0),
      (agent_get_team, ":attk_team", ":attker_agent"),
      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (neq, ":cur_agent", ":attker_agent"),
        (assign, ":continue", 1),
        (try_begin),
          (eq, "$g_ccd_option_no_friendly_area_damage", 1),
          (agent_get_team, ":cur_team", ":cur_agent"),
          (neg|teams_are_enemies, ":attk_team", ":cur_team"),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (agent_get_position, pos1, ":cur_agent"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (lt, ":dist", 180),
        (agent_deliver_damage_to_agent, ":attker_agent", ":cur_agent", 200),
      (try_end),
      (agent_set_wielded_item, ":attker_agent", -1),
      (agent_deliver_damage_to_agent, ":attker_agent", ":attker_agent", 10),  #avoid error
      (particle_system_burst_no_sync, "psys_explosion_smoke2", pos0, 100),
      (particle_system_burst_no_sync, "psys_explosion_flash", pos0, 100),
      (play_sound_at_position, "snd_ccd_explosion", pos0),
    (else_try),#occc FIGHT CLUB
      (lt, reg0, 1),#have nothing
    #  (agent_get_item_slot, ":gloves", ":attker_agent", ek_gloves),
    #  (eq, ":gloves", "itm_ccd_power_punching_gloves"),
	  (agent_slot_eq, ":attker_agent", slot_agent_fightclub_bonus, 1),#occc
      (agent_is_human, ":agent_no"),
	  (val_add,":damage",1),
	  (val_mul,":damage",4),
      (agent_set_animation, ":agent_no", "anim_strike_knockback_rolling", 0),
	  (set_trigger_result, ":damage"),
    (else_try),
      (eq, "itm_ccd_balrog_sword", reg0),
      (agent_get_troop_id, ":cur_troop", ":attker_agent"),
      (eq, "trp_ccd_balrog", ":cur_troop"),
      
      (assign, ":effect_cnt", 0),
      (agent_get_team, ":attk_team", ":attker_agent"),
      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (neq, ":cur_agent", ":attker_agent"),
        
        (agent_get_team, ":cur_team", ":cur_agent"),
        (teams_are_enemies, ":attk_team", ":cur_team"),
        
        (agent_get_position, pos1, ":cur_agent"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (lt, ":dist", 300),
        
        (val_add, ":effect_cnt", 1),
        (agent_get_animation, ":cur_anim", ":cur_agent", 1),
        (try_begin),
          (agent_is_human, ":cur_agent"),
          (agent_get_horse, ":cur_horse", ":cur_agent"),
          (try_begin),
            (lt, ":cur_horse", 0),
            (neq, ":cur_anim", "anim_strike_fall_back_rise"),
            (agent_set_animation, ":cur_agent", "anim_strike_fall_back_rise"),
          (try_end),
        (else_try),
          (neq, ":cur_anim", "anim_horse_rear"),
          (agent_set_animation, ":cur_agent", "anim_horse_rear"),
          (agent_play_sound, ":cur_agent", "snd_horse_snort"),
        (try_end),
        (store_div, ":damage_dist", ":dist", 5),
        (val_sub, ":damage_dist", 60),
        (val_mul, ":damage_dist", -1),
        (agent_deliver_damage_to_agent, ":attker_agent", ":cur_agent", ":damage_dist", "itm_maul"),
      (try_end),
      (try_begin),
        (gt, ":effect_cnt" , 0),
        (agent_play_sound, ":attker_agent", "snd_ccd_bash_earth"),
      (try_end),
    ## CC-D end
    (else_try),#lance
      ## CC-D begin
      (eq, "$g_ccc_option_weapons_ai", 2),
      (is_between, reg0, ccc_charge_weapons_begin, ccc_charge_weapons_end),
      (assign, ":cur_item", reg0),
      (agent_is_non_player, ":attker_agent"),
      (agent_get_horse, ":horse", ":attker_agent"),
      (gt, ":horse", 0),
      (try_begin),
        (agent_has_item_equipped, ":attker_agent", ":cur_item"),
        (agent_unequip_item, ":attker_agent", reg0),
        (agent_get_slot, ":polearm_item", ":attker_agent", slot_agent_use_polearm),
        (try_begin),
          (eq, ":polearm_item", reg0),
          (agent_set_slot, ":attker_agent", slot_agent_use_polearm, 0),
        (try_end),
        (assign, ":new_item", 0),
        (try_begin),
          (neg|agent_slot_eq, ":attker_agent", slot_agent_use_polearm, 0),
          (agent_get_slot, ":new_item", ":attker_agent", slot_agent_use_polearm),
        (else_try),
          (neg|agent_slot_eq, ":attker_agent", slot_agent_use_two_hand, 0),
          (agent_get_slot, ":new_item", ":attker_agent", slot_agent_use_two_hand),
        (else_try),
          (neg|agent_slot_eq, ":attker_agent", slot_agent_use_one_hand, 0),
          (agent_get_slot, ":new_item", ":attker_agent", slot_agent_use_one_hand),
        (try_end),
        (try_begin),
          (neq, ":new_item", 0),
          (agent_set_wielded_item, ":attker_agent", ":new_item"),
        (try_end),
      (try_end),
      ## CC-D end
    (try_end),
  ])

ccc_agent_weapons_change =(
  0.9, 0, 0, [(eq,"$g_ccc_option_weapons_ai",2),],
  [
    (get_player_agent_no, ":player_agent"),
    #(agent_get_team  ,":player_team", ":player_agent"),
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (neq, ":agent_no", ":player_agent"),
      
      #order
      (agent_get_team  ,":agent_team", ":agent_no"),
      (agent_get_division, ":agent_division", ":agent_no"),
      (team_get_weapon_usage_order, ":order", ":agent_team", ":agent_division"),
      (eq,":order",wordr_use_any_weapon),
      (team_get_hold_fire_order, ":order", ":agent_team", ":agent_division"),
      
      #timer
      (agent_get_slot, ":eq_time", ":agent_no", slot_agent_eq_timer),
      (neq,":eq_time",dont_use_weapons_ai), #99999 = Don,t use weapons ai
      (try_begin),
        (gt,":eq_time",0),
        (val_sub,":eq_time",1),
        (agent_set_slot, ":agent_no", slot_agent_eq_timer, ":eq_time"),
        (agent_get_slot, ":priority", ":agent_no", slot_agent_weapons_priority),
        (gt,":priority",0),
        (assign,":eq_time",0),
      (try_end),
      (le,":eq_time",0),

      #(agent_force_rethink,":agent_no"),

      #ini
      (agent_get_slot, ":one_hand_item", ":agent_no", slot_agent_use_one_hand),
      (agent_get_slot, ":two_hand_item", ":agent_no", slot_agent_use_two_hand),
      (agent_get_slot, ":polearm_item", ":agent_no", slot_agent_use_polearm),
      (agent_get_slot, ":range_item", ":agent_no", slot_agent_use_range),
      (agent_get_slot, ":thrown_item", ":agent_no", slot_agent_use_thrown1),
      #(agent_get_slot, ":shield_item", ":agent_no", slot_agent_use_shield),
      (agent_get_wielded_item, ":now_eq_item", ":agent_no", 0),
      #(agent_get_wielded_item, ":shuled_eq_item", ":agent_no", 1),

      #ammo check
      (try_begin),
        (this_or_next|gt,":range_item",0),
        (gt,":thrown_item",0),
        
        #range ammo ok?
        (assign,":ammo_off",0),
        (assign,":ammo",0),
        (try_begin),
          (eq,":range_item",":now_eq_item"),
          (agent_get_ammo,":ammo",":agent_no", 1),
          (try_begin),
            (le,":ammo",1),
            (assign,":ammo_off",1),
          (try_end),
        (try_end),

        #thrown ammo ok?
        (assign,":thrown_ammo_off",0),
        (try_begin),
          (eq,":thrown_item",":now_eq_item"),
          (agent_get_ammo,":ammo",":agent_no", 1),
          (try_begin),
            (le,":ammo",0), #CC-C change
            (try_begin),
              (agent_get_slot, ":thrown_item_sub", ":agent_no", slot_agent_use_thrown2),
              (gt,":thrown_item_sub",0),
              (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":thrown_item_sub"),
              (agent_set_slot, ":agent_no", slot_agent_use_thrown2, 0),
              (else_try),
              (agent_get_slot, ":thrown_item_sub", ":agent_no", slot_agent_use_thrown3),
              (gt,":thrown_item_sub",0),
              (agent_set_slot, ":agent_no", slot_agent_use_thrown1, ":thrown_item_sub"),
              (agent_set_slot, ":agent_no", slot_agent_use_thrown3, 0),
              (else_try),
              (assign,":thrown_ammo_off",1),
            (try_end),
            (agent_get_slot, ":thrown_item", ":agent_no", slot_agent_use_thrown1),
          (try_end),
        (try_end),

        #all ammo
        (try_begin),
          (agent_get_ammo,":ammo",":agent_no", 0),
          (le,":ammo",1),
          (assign,":ammo_off",1),
          (assign,":thrown_ammo_off",1),
        (try_end),
      (try_end),

      (assign,":new_eq_item",0),
      (try_begin),
        (team_get_movement_order, ":mov_order", ":agent_team", ":agent_division"),
        (agent_get_simple_behavior, ":behavior", ":agent_no"),
        
        (agent_get_troop_id,":troop_no",":agent_no"),
        (call_script,"script_ccc_get_troop_type",":troop_no"),
        (assign,":agent_class",reg0),      

        (call_script,"script_ccc_agent_check_enemies_nearest",":agent_no"),
        (assign,":nearest_enemy",reg0),

        #charge flag
        (assign,":charge_flag",0),
        (try_begin),
          (eq,":mov_order",mordr_charge),
          (neq,":agent_class",grc_archers),
          (neq,":agent_class",grc_cavalry_archers),
          (neq,":behavior",aisb_ranged_horseback),
          (assign,":charge_flag",1),
          (eq,":agent_class",grc_cavalry),
          (assign,":charge_flag",2),
        (try_end),

        (try_begin),
          (ge,":nearest_enemy",1100),
          (assign,":eq_time",4),
          (try_begin),
            (neq,":range_item",0),
            (neq,":ammo_off",1),
            (neq,":charge_flag",2),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (else_try),
            (neq,":thrown_ammo_off",1),
            (neq,":thrown_item",0),
            (neq,":charge_flag",2),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":thrown_item"),
          (else_try),
            (neq,":polearm_item",0),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (ge, ":horse_agent", 0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":one_hand_item",0),
            (assign,":new_eq_item",":one_hand_item"),
          (else_try),
            (neq,":two_hand_item",0),
            (assign,":new_eq_item",":two_hand_item"),
          (else_try),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (try_end),
        (else_try),
          (ge,":nearest_enemy",200),
          (assign,":eq_time",15),
          (try_begin),
            (neq,":range_item",0),
            (eq,":agent_class",grc_cavalry_archers),
            (neq,":ammo_off",1),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (ge, ":horse_agent", 0),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (else_try),
            (neq,":thrown_ammo_off",1),
            (neq,":thrown_item",0),
            (neq,":charge_flag",1),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":thrown_item"),
          (else_try),
            (neq,":range_item",0),
            (neq,":ammo_off",1),
            (eq,":agent_class",grc_archers),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (else_try),
            (neq,":polearm_item",0),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (ge, ":horse_agent", 0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":mov_order",mordr_charge),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":two_hand_item",0),
            (assign,":new_eq_item",":two_hand_item"),
          (else_try),
            (neq,":one_hand_item",0),
            (assign,":new_eq_item",":one_hand_item"),
          (else_try),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (try_end),
        (else_try),
          (assign,":eq_time",7),
          (try_begin),
            (neq,":range_item",0),
            (eq,":agent_class",grc_cavalry_archers),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (neq,":ammo_off",1),
            (ge, ":horse_agent", 0),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (else_try),
            (eq,":behavior",aisb_ranged_horseback),
            (neq,":ammo_off",1),
            (neq,":range_item",0),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (else_try),
            (eq,":behavior",aisb_ranged_horseback),
            (neq,":polearm_item",0),
            (neq,":thrown_item",0),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":thrown_item"),
          (else_try),
            (eq,":now_eq_item",":polearm_item"),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (ge, ":horse_agent", 0),
            (assign,":new_eq_item",0),
          (else_try),
            (neq,":mov_order",mordr_charge),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":two_hand_item",0),
            (assign,":new_eq_item",":two_hand_item"),
          (else_try),
            (neq,":one_hand_item",0),
            (assign,":new_eq_item",":one_hand_item"),
          (else_try),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":thrown_ammo_off",1),
            (neq,":thrown_item",0),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":thrown_item"),
          (else_try),
            (neq,":range_item",0),
            (neq,":ammo_off",1),
            (eq,":order",aordr_fire_at_will),
            (assign,":new_eq_item",":range_item"),
          (try_end),
        (try_end),
      (try_end),    

      #weapons priority
      (agent_get_slot, ":priority", ":agent_no", slot_agent_weapons_priority),
      (try_begin),
        (gt,":priority",use_free),
        (try_begin),
          (eq,":priority",use_sword),
          (neq,":one_hand_item",0),
          (assign,":new_eq_item",":one_hand_item"),
        (else_try),
          (eq,":priority",use_sword),
          (neq,":two_hand_item",0),
          (assign,":new_eq_item",":two_hand_item"),
        (else_try),
          (eq,":priority",use_polearm),
          (neq,":polearm_item",0),
          (assign,":new_eq_item",":polearm_item"),
        (else_try),
          (eq,":priority",use_range),
          (neq,":ammo_off",1),
          (neq,":range_item",0),
          (eq,":order",aordr_fire_at_will),
          (assign,":new_eq_item",":range_item"),
        (else_try),
          (eq,":priority",use_range),
          (neq,":thrown_ammo_off",1),
          (neq,":thrown_item",0),
          (eq,":order",aordr_fire_at_will),
          (assign,":new_eq_item",":thrown_item"),
        (else_try),
          (eq,":priority",use_melee),
          (try_begin),
            (neq,":polearm_item",0),
            (assign,":new_eq_item",":polearm_item"),
          (else_try),
            (neq,":two_hand_item",0),
            (assign,":new_eq_item",":two_hand_item"),
          (else_try),
            (neq,":one_hand_item",0),
            (assign,":new_eq_item",":one_hand_item"),
          (try_end),
        (try_end),
      (try_end),

      #eq item
      (try_begin),
        (gt,":new_eq_item",0),
        (neq,":new_eq_item",":now_eq_item"),
        
        #uneq
        (try_begin),
          (agent_has_item_equipped,":agent_no",":one_hand_item"),
          (agent_unequip_item,":agent_no",":one_hand_item"),
        (try_end),
        (try_begin),
          (agent_has_item_equipped,":agent_no",":two_hand_item"),
          (agent_unequip_item,":agent_no",":two_hand_item"),
        (try_end),
        (try_begin),
          (agent_has_item_equipped,":agent_no",":polearm_item"),
          (agent_unequip_item,":agent_no",":polearm_item"),
        (try_end),

        (item_get_type, ":type", ":new_eq_item"),
        (try_begin), #melee
          (is_between,":type",itp_type_one_handed_wpn,itp_type_arrows),
        ## CC-D begin: agent_ai_set_always_attack_in_melee is troop active only on siege ladder
          #(agent_ai_set_always_attack_in_melee, ":agent_no", 1),
          (agent_equip_item,":agent_no",":new_eq_item"),
          (agent_force_rethink,":agent_no"),
        #(else_try), #range
          #(agent_ai_set_always_attack_in_melee, ":agent_no", 0),
        ## CC-D end
        (try_end),

        (agent_set_wielded_item,":agent_no",":new_eq_item"),
        (agent_set_slot, ":agent_no", slot_agent_eq_timer, ":eq_time"),
        (agent_force_rethink,":agent_no"),
      (try_end),
    (try_end),
  ])

ccc_agent_start_formation =(
  1, 0, ti_once, [(neq, "$g_ccc_option_select_formation", 0)],  ## CC-D add
  [
    #player formation
    (get_player_agent_no, ":player_agent"),
    (agent_get_team,":player_team",":player_agent"),

    (team_set_order_listener, ":player_team", grc_everyone),
    (call_script, "script_ccc_battle_formation", ":player_team","$g_ccc_option_select_formation","$g_ccc_option_formation_warp"),
  ])

## CC-D begin: integrate
ccc_stand_on = ( 0, 0, 1, 
  [
    (neq, "$g_dplmc_cam_activated", 1),
    (neg|main_hero_fallen),  ## CC-D
    (key_is_down, key_u),  ## y->u
  ],
  [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team  ,":player_team", ":player_agent"),
      (try_begin),
        (key_is_down, key_left_control),  ## ccc_stand_off
        (display_message,"@Move freely"),
        (call_script, "script_ccc_team_clear_destination", ":player_team"), 
      (else_try),
        (display_message,"@Fight then and there"),
        (call_script, "script_ccc_team_set_destination", ":player_team"), 
      (try_end),
    ])

#ccc_stand_off = ( 0, 0, 1, 
#  [
#      (neq, "$g_dplmc_cam_activated", 1),
#      (neg|main_hero_fallen),  ## CC-D
#      (key_is_down, key_u),
#  ],
#  [
#      (get_player_agent_no, ":player_agent"),
#      (agent_get_team  ,":player_team", ":player_agent"),
#
#      (display_message,"@Move freely"),
#
#      (call_script, "script_ccc_team_clear_destination", ":player_team"), 
#    ])
## CC-D end

ccc_weapons_priority_all = ( 0, 0, 1, 
  [
      (eq,"$g_ccc_option_weapons_ai",2),
      (neq, "$g_dplmc_cam_activated", 1),
      (neg|main_hero_fallen),  ## CC-D
      (key_is_down, key_numpad_5),
    ],
  [
      (display_message,"@Use the free"),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team  ,":player_team", ":player_agent"),
      (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
    ])

ccc_weapons_priority_sword = ( 0, 0, 1, 
  [
    (eq,"$g_ccc_option_weapons_ai",2),
    (neq, "$g_dplmc_cam_activated", 1),
    (neg|main_hero_fallen),  ## CC-D
    (key_is_down, key_numpad_6),
    ],
  [
      (display_message,"@Use the sword"),
      (get_player_agent_no, ":player_agent"),
        (agent_get_team  ,":player_team", ":player_agent"),
        (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_sword),
    ])

ccc_weapons_priority_polearm = ( 0, 0, 1, 
  [
    (eq,"$g_ccc_option_weapons_ai",2),
    (neq, "$g_dplmc_cam_activated", 1),
    (neg|main_hero_fallen),  ## CC-D
    (key_is_down, key_numpad_7),
    ],
  [
      (display_message,"@Use the polearm"),
      (get_player_agent_no, ":player_agent"),
        (agent_get_team  ,":player_team", ":player_agent"),
        (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_polearm),
    ])

ccc_weapons_priority_range = ( 0, 0, 1, 
  [
    (eq,"$g_ccc_option_weapons_ai",2),
    (neq, "$g_dplmc_cam_activated", 1),
    (neg|main_hero_fallen),  ## CC-D
    (key_is_down, key_numpad_8),
  ],
  [
      (display_message,"@Use the range"),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team  ,":player_team", ":player_agent"),
      (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_range),
  ])

ccc_weapons_priority_melee = ( 0, 0, 1, 
  [
      (eq,"$g_ccc_option_weapons_ai",2),
      (neq, "$g_dplmc_cam_activated", 1),
      (neg|main_hero_fallen),  ## CC-D
      (key_is_down, key_numpad_9),
  ],
  [
      (display_message,"@Use the melee"),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team  ,":player_team", ":player_agent"),
      (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_melee),
  ])

#CC-C mission fuck begin
ccc_fuck_init = (ti_before_mission_start, 0, 0, [], [
      (assign,"$ccc_fuck_stage",0), #0:none 1:dance 2:stand 3:mount 4:ex-stand 5:ex-mount 6:ground 7:dog 8:love 9:sexy 10:ride 11:icha 12:yoko  ## CC-D: extra wrestling: dance:3->1
      (assign,"$ccc_fuck_mount_option",0), #0 back #1 foward
      (assign,"$g_ccc_fuck_key_k",0),  ## CC-D: extra wrestling
      (assign,"$ccc_fuck_atk_agent",99999),
      (assign,"$ccc_fuck_def_agent",99999),
      (assign,"$g_talk_agent",0),
      (assign,"$g_ccc_fuck_flag",0),
      (assign,"$ccc_help_msg_str","str_ccc_help_message_heven"),
      ## CC-D begin: extra wrestling imported from difor v0.058
      (assign, "$g_ccc_fuck_key_k", 0),
      (assign, "$g_ccc_fuck_stage_cache", -1),
      ## CC-D end

    ])
    
ccc_fuck_spawn_agent = (ti_on_agent_spawn, 0, 0, [],
   [
      (store_trigger_param_1, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_cur_animation, 0),
     ## CC-D begin: extra wrestling
     #(get_player_agent_no, ":player_agent"),
     #(try_begin),
     #   (agent_is_alive, ":agent_no"),
     #   (agent_is_human, ":agent_no"),
     #   (agent_get_troop_id,":troop_no",":agent_no"),
     #   (troop_get_type, ":is_female", ":troop_no"),
     #   (try_begin),
     #     (eq,":player_agent",":agent_no"),
     #     (agent_set_stand_animation,":agent_no","anim_stand"),
     #     (assign,"$ccc_fuck_atk_agent",":player_agent"),
     #(else_try),
     #     (try_begin),
     #       #(neg|is_between,":troop_no",active_npcs_begin,pretenders_end),
     #       (eq,":is_female",1),
     #       (agent_set_stand_animation,":agent_no","anim_stand_lady"),
     #     (else_try),
     #       (agent_set_stand_animation,":agent_no","anim_stand_lord"),
     #     (try_end),
     #     (assign,"$ccc_fuck_def_agent",":agent_no"),
     #   (try_end),
     #(try_end),
     (call_script, "script_ccc_default_stand_anim", ":agent_no"),
     (try_begin),
       (neg|agent_is_non_player, ":agent_no"),
       (assign, "$ccc_fuck_atk_agent", ":agent_no"),
     (else_try),
       (assign, "$ccc_fuck_def_agent", ":agent_no"),
     (try_end),
     ## CC-D end
     ])

ccc_fuck_sound = (1, 0, 0, 
  [(ge,"$ccc_fuck_stage",2),],  ## CC-D: extra wrestling: dance:3->1
   [
      (store_random_in_range,":random", 0, 4),
      (try_begin),
        (eq,":random",0),
        (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
      (try_end),
     ])

    #change
ccc_fuck_change = (0, 0, 1, 
  [
      (eq,"$g_ccc_fuck_flag",1),
      (eq,"$ccc_fuck_stage",0),
      (key_is_down, key_h),
  ],
  [
      (get_player_agent_no, ":player_agent"),
      (call_script,"script_ccc_agent_check_nearest",":player_agent"),
      (try_begin),
        (eq,"$ccc_fuck_atk_agent",":player_agent"),
        (assign,"$ccc_fuck_atk_agent",reg1),
        (display_message,"@Change Player Defensive."),
      (else_try),
        (assign,"$ccc_fuck_atk_agent",":player_agent"),
        (display_message,"@Change Player Offensive."),
      (try_end),
    ])

ccc_fuck_come_on_key_v = (0, 0, 1, 
  [(key_is_down, key_v),(gt,"$g_talk_agent",0),(agent_is_alive,"$g_talk_agent"),],
  [
      (get_player_agent_no, ":player_agent"),
      (display_message,"@Come on here."),
      (agent_get_position,pos40,":player_agent"),
      (agent_set_scripted_destination_no_attack,"$g_talk_agent",pos40,0),
    ])

ccc_fuck_key_k = (0, 0, 1, [(gt,"$ccc_fuck_stage",0),(key_is_down, key_k),],
  [
    ## CC-D begin: extra wrestling: dance:3->1
    (try_begin),
      (eq, "$g_ccc_fuck_key_k", 0),
      (try_begin),
        (eq,"$ccc_fuck_stage", 1),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_dancer_3"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_dancer_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 2),(agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_fuck_male_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage", 3),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_mount_female_fucker_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 4),(agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_fuck_male_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage", 5),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_mount_female_fucker_2"),
      #(else_try),
      #  (eq,"$ccc_fuck_stage", 6),
      (else_try),
        (eq,"$ccc_fuck_stage", 7),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_5"),
      (else_try),
        (eq,"$ccc_fuck_stage", 8),(agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_love_male_fuck_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage", 9),(agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_sexy_male_fuck_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage",10),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_5"),
      (else_try),
        (eq,"$ccc_fuck_stage",11),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage",12),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_5"),
      (else_try),
        (eq,"$ccc_fuck_stage",13),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_5"),
      (try_end),
      (assign, "$g_ccc_fuck_key_k", 1),
    (else_try),
      (try_begin), #dance
        (eq,"$ccc_fuck_stage", 1),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_dancer_1"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_dancer_1"),
      (else_try), #stand
        (eq,"$ccc_fuck_stage", 2),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_fuck_male_1"),
      (else_try), #mount
        (eq,"$ccc_fuck_stage", 3),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_mount_female_fucker_3"),
      (else_try), #ex-stand
        (eq,"$ccc_fuck_stage", 4),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_fuck_male_1"),
      (else_try), #ex-mount
        (eq,"$ccc_fuck_stage", 5),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_mount_female_fucker_3"),
      #(else_try), #ground
      #  (eq,"$ccc_fuck_stage", 6),
      (else_try), #dog
        (eq,"$ccc_fuck_stage", 7),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_1"),
      (else_try), #love
        (eq,"$ccc_fuck_stage", 8),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_love_male_fuck_1"),
      (else_try), #sexy
        (eq,"$ccc_fuck_stage", 9),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_sexy_male_fuck_1"),
      (else_try), #ride
        (eq,"$ccc_fuck_stage",10),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_1"),
      (else_try), #icha
        (eq,"$ccc_fuck_stage",11),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_1"),
      (else_try), #yoko
        (eq,"$ccc_fuck_stage",12),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_1"),
      (else_try), #haimen
        (eq,"$ccc_fuck_stage",13),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_1"),
      (try_end),
      (assign, "$g_ccc_fuck_key_k", 0),
    (try_end),
    ## CC-D end
    ])

ccc_fuck_key_j = (0, 0, 1,[(gt,"$ccc_fuck_stage",0),(key_is_down, key_j),],
  [
      (try_begin),
      ## CC-D begin: extra wrestling: dance:3->1
        (eq,"$ccc_fuck_stage", 1),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_dance_wedding"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_dance_wedding"),
      (else_try),
        (eq,"$ccc_fuck_stage", 2),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_fuck_female_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage", 3),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_mount_female_fucker_1"),
      (else_try),
        (eq,"$ccc_fuck_stage", 4),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_fuck_female_orgasm"),
      (else_try),
        (eq,"$ccc_fuck_stage", 5),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_mount_female_fucker_1"),
      (else_try),
        (eq,"$ccc_fuck_stage", 6),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ground_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 7),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 8),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_love_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 9),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_sexy_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage",10),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage",11),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage",12),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_2"),
      (else_try),
        (eq,"$ccc_fuck_stage",13),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_2"),
      ## CC-D end
    (try_end),
  ])

ccc_fuck_key_comma = (0, 0, 1,[(gt,"$ccc_fuck_stage",0),(key_is_down, key_comma),],
  [
      (try_begin),
      ## CC-D begin: extra wrestling: dance:3->1
        (eq,"$ccc_fuck_stage", 1),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_dancer_4"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_dancer_4"),
      (else_try),
        (eq,"$ccc_fuck_stage", 2),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_fuck_female_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 3),(assign,"$ccc_fuck_mount_option",0),
      (else_try),
        (eq,"$ccc_fuck_stage", 4),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_fuck_female_2"),
      (else_try),
        (eq,"$ccc_fuck_stage", 5),(assign,"$ccc_fuck_mount_option",0),
      (else_try),
        (eq,"$ccc_fuck_stage", 6),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ground_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage", 7),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage", 8),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_love_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage", 9),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_sexy_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage",10),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage",11),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage",12),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_3"),
      (else_try),
        (eq,"$ccc_fuck_stage",13),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_3"),
      (try_end),
      ## CC-D end
    ])

ccc_fuck_key_period = (0, 0, 1,[(gt,"$ccc_fuck_stage",0),(key_is_down, key_period),],
  [
      ## CC-D begin: extra wrestling: dance:3->1
      (try_begin),
        (eq,"$ccc_fuck_stage", 1),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_flip"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_flip"),
      (else_try),
        (eq,"$ccc_fuck_stage", 2),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_fuck_female_3"),
      (else_try),
        (eq,"$ccc_fuck_stage", 3),(assign,"$ccc_fuck_mount_option",1),
      (else_try),
        (eq,"$ccc_fuck_stage", 4),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_fuck_female_3"),
      (else_try),
        (eq,"$ccc_fuck_stage", 5),(assign,"$ccc_fuck_mount_option",1),
      (else_try),
        (eq,"$ccc_fuck_stage", 6),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ground_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage", 7),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage", 8),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_love_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage", 9),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_sexy_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage",10),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage",11),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_5"),
      (else_try),
        (eq,"$ccc_fuck_stage",12),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_4"),
      (else_try),
        (eq,"$ccc_fuck_stage",13),(agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_4"),
      (try_end),
      ## CC-D end
   ])


ccc_fuck_start = (0, 0, 1, 
  [
      (eq,"$g_ccc_fuck_flag",1),
      (assign,":flag",1),
      (try_begin),
      ## CC-D begin: extra wrestling: dance:3->1
        (key_is_down, key_o),
        (assign,"$ccc_fuck_stage",1),
      (else_try),
        (key_is_down, key_n),
        (try_begin),
          (neq, "$g_ccc_fuck_stage_cache", -1),
          (assign, "$ccc_fuck_stage", "$g_ccc_fuck_stage_cache"),
          (assign, "$g_ccc_fuck_stage_cache", -1),
        (else_try),
          #(assign,"$ccc_fuck_stage",2),
          (val_sub, "$ccc_fuck_stage", 1),
          (val_max, "$ccc_fuck_stage", 2),
        (try_end),
      (else_try),
        (key_is_down, key_m),
        (try_begin),
          (neq, "$g_ccc_fuck_stage_cache", -1),
          (assign, "$ccc_fuck_stage", "$g_ccc_fuck_stage_cache"),
          (assign, "$g_ccc_fuck_stage_cache", -1),
        (else_try),
          #(assign,"$ccc_fuck_stage",3),
          (val_add, "$ccc_fuck_stage", 1),
          (val_clamp, "$ccc_fuck_stage", 2, 14),
        (try_end),
      (else_try),
        (assign,":flag",0),
      (try_end),
      (eq,":flag",1),
      (assign,"$g_ccc_fuck_key_k",0),
      ## CC-D end
    ],
  [
      (get_player_agent_no, ":player_agent"),
      (call_script,"script_ccc_agent_check_nearest",":player_agent"),
      (assign,":near_dist",reg0),
      (try_begin),
        (lt,":near_dist",200),
        (try_begin),
          (eq,"$ccc_fuck_atk_agent",":player_agent"),
          (assign,"$ccc_fuck_def_agent",reg1),
        (else_try),
          (assign,"$ccc_fuck_atk_agent",reg1),
          (assign,"$ccc_fuck_def_agent",":player_agent"),
        (try_end),

        ## CC-D begin: extra wrestling: dance:3->1
        (try_begin), #dance
          (eq,"$ccc_fuck_stage", 1),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_dancer_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_dancer_1"),
        (else_try), #stand
          (eq,"$ccc_fuck_stage", 2),
          (try_begin), #intro anim
            (agent_slot_eq, "$ccc_fuck_atk_agent", slot_agent_cur_animation, 0),
            (agent_slot_eq, "$ccc_fuck_def_agent", slot_agent_cur_animation, 0),
            (agent_set_animation, "$ccc_fuck_atk_agent", "anim_expect_idle_male"),
            (agent_set_animation, "$ccc_fuck_def_agent", "anim_expect_idle_6"),
          (try_end),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_fuck_male_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_fuck_female_1"),
        (else_try), #mount
          (eq,"$ccc_fuck_stage", 3),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_mount_male_fucked"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_mount_female_fucker_3"),
        (else_try), #ex-stand
          (eq,"$ccc_fuck_stage", 4),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_fuck_male_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_fuck_female_1"),
        (else_try), #ex-mount
          (eq,"$ccc_fuck_stage", 5),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_mount_male_fucked"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_mount_female_fucker_3"),
        (else_try), #ground
          (eq,"$ccc_fuck_stage", 6),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_ground_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ground_female_fuck_1"),
        (else_try), #dog
          (eq,"$ccc_fuck_stage", 7),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_dog_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_dog_female_fuck_1"),
        (else_try), #love
          (eq,"$ccc_fuck_stage", 8),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_love_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_love_female_fuck_1"),
        (else_try), #sexy
          (eq,"$ccc_fuck_stage", 9),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_sexy_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_sexy_female_fuck_1"),
        (else_try), #ride
          (eq,"$ccc_fuck_stage",10),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_ride_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_ride_female_fuck_1"),
        (else_try), #icha
          (eq,"$ccc_fuck_stage",11),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_icha_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_icha_female_fuck_1"),
        (else_try), #yoko
          (eq,"$ccc_fuck_stage",12),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_yoko_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_yoko_female_fuck_1"),
        (else_try), #haimen
          (eq,"$ccc_fuck_stage",13),
          (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation,"anim_ex_haimen_male_fuck_1"),
          (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation,"anim_ex_haimen_female_fuck_1"),
        ## CC-D end
        (try_end),
        (mission_disable_talk),
        (show_object_details_overlay, 0),
      (else_try),
        (assign,"$ccc_fuck_stage",0),
      (try_end),
    ])

ccc_fuck_del = (0, 0, 1, 
  [
    (gt,"$ccc_fuck_stage",0),
    (key_is_down, key_b),
    ],
  [
    ## CC-D begin: extra wrestling
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_cur_animation, 0),
      (try_begin),
        (neg|agent_is_non_player, ":agent_no"),
        (agent_set_stand_animation,":agent_no","anim_stand"),
      (else_try),
        (this_or_next|eq, ":agent_no", "$ccc_fuck_atk_agent"),
        (eq, ":agent_no", "$ccc_fuck_def_agent"),
        
        (agent_get_position, pos40, ":agent_no"),
        
        (try_begin), #stand, ex-stand
          (this_or_next|eq,"$ccc_fuck_stage", 2),
          (eq, "$ccc_fuck_stage", 4),
          (position_rotate_z, pos40, 180),
          (position_set_z_to_ground_level, pos40),
          (agent_set_position,":agent_no", pos40),
          (agent_set_stand_animation, ":agent_no", "anim_expect_idle_back"),
        #(else_try), #mount, ex-mount
        #  (this_or_next|eq,"$ccc_fuck_stage", 3),
        #  (eq, "$ccc_fuck_stage", 5),
        #  (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
        (else_try), #ground
          (eq, "$ccc_fuck_stage", 6),
          (position_rotate_z, pos40, 180),
          (position_set_z_to_ground_level, pos40),
          (agent_set_position,":agent_no", pos40),
          (agent_set_stand_animation, ":agent_no", "anim_expect_idle_yoko"),
        #(else_try), #dog
        #  (eq, "$ccc_fuck_stage", 7),
        #  (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
        (else_try), #love, sexy
          (this_or_next|eq,"$ccc_fuck_stage", 8),
          (eq, "$ccc_fuck_stage", 9),
          (position_rotate_z, pos40, 180),
          (position_set_z_to_ground_level, pos40),
          (agent_set_position,":agent_no", pos40),
          (try_begin),
            (le, "$ccc_fuck_agent_ero_hp", 30),
            (agent_set_stand_animation, ":agent_no", "anim_expect_idle_legup"),
          (else_try),
            (le, "$ccc_fuck_agent_ero_hp", 60),
            (agent_set_stand_animation, ":agent_no", "anim_expect_idle_open"),
          (else_try),
            (agent_set_stand_animation, ":agent_no", "anim_expect_idle_close"),
          (try_end),
        (else_try), #ride, icha
          (this_or_next|eq,"$ccc_fuck_stage", 10),
          (eq, "$ccc_fuck_stage",11),
          (position_move_y, pos40, 20, 0),
          (position_rotate_z, pos40, 180),
          (position_set_z_to_ground_level, pos40),
          (agent_set_position,":agent_no", pos40),
          (call_script, "script_ccc_default_stand_anim", ":agent_no"),
        #(else_try), #yoko
        #  (eq, "$ccc_fuck_stage",12),
        #  (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
        #(else_try), #haimen
        #  (eq, "$ccc_fuck_stage",13),
        #  (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
        (else_try),
          (call_script, "script_ccc_default_stand_anim", ":agent_no"),
        (try_end),
      #(else_try),
      (try_end),
    (try_end),
    (show_object_details_overlay, 1),
    (agent_clear_scripted_mode,"$ccc_fuck_atk_agent"),
    (agent_clear_scripted_mode,"$ccc_fuck_def_agent"),
    (assign, "$g_ccc_fuck_stage_cache", "$ccc_fuck_stage"),
    (assign,"$ccc_fuck_stage",0),
    (assign,"$ccc_fuck_mount_option",0),
    (assign,"$g_ccc_fuck_key_k",0),
    (mission_enable_talk),
    ## CC-D end
    ])

ccc_fuck_anime = (0.1, 0, 0, 
  [
    (ge,"$g_ccc_fuck_flag",1),  ## CC-D: extra wrestling: eq->ge
    (gt,"$ccc_fuck_stage",0),
    (agent_is_alive,"$ccc_fuck_atk_agent"),
    (agent_is_alive,"$ccc_fuck_def_agent"),
    ],
  [
    (set_fixed_point_multiplier, 100),

      (try_begin),
      ## CC-D begin: extra wrestling: dance:3->1
        (eq,"$ccc_fuck_stage", 1),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 180, 0),
      #  (position_rotate_z, pos40, 180),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 2),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 25, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 3),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
        (try_begin),
          (eq,"$ccc_fuck_mount_option",0),
      #    (position_rotate_z, pos40, 180),
          (agent_set_position,"$ccc_fuck_def_agent",pos40),
        (try_end),
      (else_try),
        (eq,"$ccc_fuck_stage", 4),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 25, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 5),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
        (try_begin),
          (eq,"$ccc_fuck_mount_option",0),
      #    (position_rotate_z, pos40, 180),
          (agent_set_position,"$ccc_fuck_def_agent",pos40),
        (try_end),
      (else_try),
        (eq,"$ccc_fuck_stage", 6),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 7),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 25, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 8),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage", 9),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage",10),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage",11),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage",12),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 20, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      (else_try),
        (eq,"$ccc_fuck_stage",13),
        (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
        (position_move_y, pos40, 0, 0),
        (agent_set_position,"$ccc_fuck_def_agent",pos40),
      ## CC-D end
      (try_end),
      
      (agent_get_position,pos40,"$ccc_fuck_atk_agent"),
      (agent_set_scripted_destination_no_attack,"$ccc_fuck_atk_agent",pos40,0),
      (agent_get_position,pos40,"$ccc_fuck_def_agent"),
      (agent_set_scripted_destination_no_attack,"$ccc_fuck_def_agent",pos40,0),

      (agent_get_slot, ":cur_animation", "$ccc_fuck_atk_agent", slot_agent_cur_animation),
      (agent_set_stand_animation,"$ccc_fuck_atk_agent",":cur_animation"),

      (agent_get_slot, ":cur_animation", "$ccc_fuck_def_agent", slot_agent_cur_animation),
      (agent_set_stand_animation,"$ccc_fuck_def_agent",":cur_animation"),
    ])

## CC-D begin: extra wrestling
ccc_fuck_shot = (0, 0, 1, 
  [(ge,"$ccc_fuck_stage",2),(eq,"$g_ccc_fuck_flag",1),(key_is_down, key_x),],  ## CC-D: extra wrestling: dance:3->1
  [
        #(play_sound,"snd_eros_fire"),  ## CC-D snd_hyb_musket->snd_eros_fire
        (agent_get_troop_id, ":troop_no", "$ccc_fuck_atk_agent"),
        (troop_get_type, ":type", ":troop_no"),
        (try_begin),
		  (this_or_next|eq, ":type", tf_elf_female),
		  (this_or_next|eq, ":type", tf_gaolu_female),
		  (this_or_next|eq, ":type", tf_girl),
          (eq, ":type", 1),
          (agent_play_sound, "$ccc_fuck_atk_agent", "snd_woman_yell"),
        (else_try),
          (agent_play_sound, "$ccc_fuck_def_agent", "snd_man_yell"),
        (try_end),
        (assign,"$g_ccc_fuck_flag",2),
    ])

#finish
ccc_fuck_finish = (0, 0, 20,
  [
    (ge,"$g_ccc_fuck_flag",2),
    (lt,"$ccc_fuck_stage",99),
    (try_begin),
      #(try_begin),
      #  (eq,"$g_ccc_fuck_flag",2),
      #  (mission_cam_set_screen_color, 0xFFFFFFFF),
      #  (mission_cam_animate_to_screen_color, 0x00FFFFFF, 3000),
      #  (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
      #(try_end),
      (try_begin),
        (eq, "$ccc_fuck_stage", 2),  #stand->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_stand01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_stand01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 3),  #mount->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_mount01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_mount01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 4),  #ex-stand->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_stand02"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_stand02"),
      (else_try),
        (eq, "$ccc_fuck_stage", 5),  #ex-mount->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_mount02"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_mount02"),
      (else_try),
        (eq, "$ccc_fuck_stage", 6),  #ground->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_seijyoui02"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_seijyoui02"),
      (else_try),
        (eq, "$ccc_fuck_stage", 7),  #dog->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_back01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_back01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 8),  #love->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_seijyoui01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_seijyoui01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 9),  #sexy->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_manguri01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_manguri01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 10),  #ride->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_taimenzai01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_taimenzai01"),
      #(else_try),
      #  (eq, "$ccc_fuck_stage", 11),  #icha->down
      #  (agent_is_alive, "$ccc_fuck_atk_agent"),
      #  (agent_is_alive, "$ccc_fuck_def_agent"),
      (else_try),
        (eq, "$ccc_fuck_stage", 12),  #yoko->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_yoko01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_yoko01"),
      (else_try),
        (eq, "$ccc_fuck_stage", 13),  #haimen->down
        (agent_is_alive, "$ccc_fuck_atk_agent"),
        (agent_is_alive, "$ccc_fuck_def_agent"),
        (agent_set_slot, "$ccc_fuck_atk_agent", slot_agent_cur_animation, "anim_male_come_haimen01"),
        (agent_set_slot, "$ccc_fuck_def_agent", slot_agent_cur_animation, "anim_female_come_haimen01"),
#        (agent_set_stand_animation, "$ccc_fuck_atk_agent", "anim_ex_haimen_male_fucked_ex"),
#        (agent_set_stand_animation, "$ccc_fuck_def_agent", "anim_ex_haimen_female_fucker_ex"),
      (try_end),
      #(val_add,"$ccc_fuck_stage",1),
      (ge,"$ccc_fuck_stage",2),
      #(show_object_details_overlay, 1),
      #(mission_enable_talk),
      (assign,"$ccc_fuck_stage",99),
      (reset_mission_timer_b),
    (try_end),
  ],[])
ccc_fuck_finish2 = (1, 0, 10,
  [
    (ge,"$g_ccc_fuck_flag",2),
    (eq,"$ccc_fuck_stage",99),
    (store_mission_timer_b, ":time_b"),
    (try_begin),
      (is_between, ":time_b", 11, 12),  # fire after about 12sec from key-x down
      (play_sound,"snd_eros_fire"),
      (try_begin),
        (eq,"$g_ccc_fuck_flag",2),
        (mission_cam_set_screen_color, 0xFFFFFFFF),
        (mission_cam_animate_to_screen_color, 0x00FFFFFF, 3000),
        (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
      (try_end),
    (try_end),
    (ge, ":time_b", 28),  # scene end after 28sec
    (show_object_details_overlay, 1),
    (mission_enable_talk),
    (try_begin),
      (store_current_scene, ":cur_scene"),
      (this_or_next|eq, ":cur_scene", "scn_ccd_my_manor"),  ## CC-D add
      (eq,":cur_scene","scn_ccc_prison_hide_room"),
      (store_mission_timer_a,":time_a"),
      (agent_get_troop_id,":troop_no","$ccc_fuck_agent"),
      (call_script,"script_ccc_mission_fuck_score",":troop_no",":time_a"),
    (else_try),
      (finish_mission,0),
    (try_end),
  ],[])
#CC-C mission fuck end
#CC-C end

## CC begin
custom_commander_check_player_can_join_battle = (
  0, 0, ti_once,
  [
    (neq,"$g_player_troop","trp_player"),
    (store_troop_health, "$g_player_begin_hp", "trp_player"),
    (neg|troop_is_wounded, "trp_player"),
    (get_player_agent_no, ":player_agent"),
    (ge, ":player_agent", 0),
    (agent_get_team, ":player_team", ":player_agent"),
    (agent_get_position, pos49, ":player_agent"),
    (position_move_x, pos49, -100),
    (set_spawn_position, pos49),
    (spawn_agent,"trp_player"),
    (agent_set_team, reg0, ":player_team"),
  ], [])

custom_commander_check_player_can_join_battle_dismounted = (
  0, 0, ti_once,
  [
    (neq,"$g_player_troop","trp_player"),
    (store_troop_health, "$g_player_begin_hp", "trp_player"),
    (neg|troop_is_wounded, "trp_player"),
    (get_player_agent_no, ":player_agent"),
    (ge, ":player_agent", 0),
    (agent_get_team, ":player_team", ":player_agent"),
    (agent_get_position, pos49, ":player_agent"),
    (position_move_x, pos49, -100),
    (set_spawn_position, pos49),
    (troop_get_inventory_slot, ":player_horse_item", "trp_player", ek_horse),
    (troop_get_inventory_slot_modifier, ":player_horse_item_modifier", "trp_player", ek_horse),
    (troop_set_inventory_slot, "trp_player", ek_horse, -1),
    (spawn_agent,"trp_player"),
    (agent_set_team, reg0, ":player_team"),
    (troop_set_inventory_slot, "trp_player", ek_horse, ":player_horse_item"),
    (troop_set_inventory_slot_modifier, "trp_player", ek_horse, ":player_horse_item_modifier"),
  ], [])

custom_commander_camera_mp = (
  0, 0, 0,
  ## NMCml begin
  [#(eq, "$g_nmcml_use_cc_camera", 1),  ## CC-D del
   (eq, "$g_dplmc_cam_activated", 0),
   (neg|main_hero_fallen)],
  ## NMCml end
  [
    (multiplayer_get_my_player, ":my_player"),
    (player_get_agent_id, ":player_agent", ":my_player"),
    (gt, ":player_agent", -1),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 90),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, "$g_camera_up"),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", 5),
    (else_try),
      (key_is_down, "$g_camera_down"),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", 5),
    (else_try),
      (key_is_down, "$g_camera_left"),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", 5),
    (else_try),
      (key_is_down, "$g_camera_right"),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", 5),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ])

## CC-D begin: camera integrate
#custom_commander_camera = (
#  0, 0, 0,
#  ## NMCml begin
#  [(eq, "$g_nmcml_use_cc_camera", 1),
#   (eq, "$g_dplmc_cam_activated", 0),
#   (neg|main_hero_fallen)],
#  ## NMCml end
#  [
#    (get_player_agent_no, ":player_agent"),
#    (agent_get_look_position, pos1, ":player_agent"),
#    (position_move_z, pos1, "$g_camera_z"),
#    (position_move_y, pos1, "$g_camera_y"),
#    (agent_get_horse, ":horse_agent", ":player_agent"),
#    (try_begin),
#      (ge, ":horse_agent", 0),
#      (position_move_z, pos1, 90),
#    (try_end),
#    (mission_cam_set_position, pos1),
#    (try_begin),
#      (key_is_down, "$g_camera_up"),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_z", 5),
#    (else_try),
#      (key_is_down, "$g_camera_down"),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_z", 5),
#    (else_try),
#      (key_is_down, "$g_camera_left"),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_y", 5),
#    (else_try),
#      (key_is_down, "$g_camera_right"),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_y", 5),
#    (try_end),
#    (try_begin),
#      (this_or_next|game_key_clicked, gk_view_char),
#      (this_or_next|game_key_clicked, gk_zoom),
#      (game_key_clicked, gk_cam_toggle),
#      (mission_cam_set_mode, 0),
#    (try_end),
#  ])
## CC-D end

custom_commander_give_hero_extra_wp = (
  ti_on_agent_killed_or_wounded, 0, 0, [],
   [
   
    (store_trigger_param_1, ":wounded_agent_no"),
    (store_trigger_param_2, ":killer_agent_no"),

    (get_player_agent_no, ":player_agent"),
    (try_begin),
      (ge, ":killer_agent_no", 0),  ## CC-D fix
      (agent_is_human, ":wounded_agent_no"),
      (agent_is_human, ":killer_agent_no"),
      (agent_get_troop_id, ":killer_troop", ":killer_agent_no"),
      (agent_get_troop_id, ":wounded_troop", ":wounded_agent_no"),
      (troop_is_hero, ":killer_troop"),
      (neg|troop_is_hero, ":wounded_troop"),#occc temporary unique character dead bug fix
      (assign, ":continue", 1),
      (try_begin),
        (agent_is_ally, ":wounded_agent_no"),
        (agent_is_ally, ":killer_agent_no"),
        (assign, ":continue", 0),
      (else_try),
        (neg|agent_is_ally, ":wounded_agent_no"),
        (neg|agent_is_ally, ":killer_agent_no"),
        (assign, ":continue", 0),
      (try_end),
      (eq, ":continue", 1),
      # xp_needed
      (assign, ":xp_needed", 2000),
      (val_mul, ":xp_needed", 10),
      (store_skill_level, ":skill_bonus", skl_weapon_master, ":killer_troop"),
      (val_add, ":skill_bonus", 10),
      (val_div, ":xp_needed", ":skill_bonus"),
      (try_begin),
        (neq, ":killer_agent_no", ":player_agent"),
        (val_div, ":xp_needed", 2),
      (try_end),
      # xp_gained
      (store_character_level, ":wounded_troop_level", ":wounded_troop"),
      (store_add, ":xp_gained", ":wounded_troop_level", 20),
      (val_mul, ":xp_gained", ":xp_gained"),
      (val_add, ":xp_gained", 400),
      (val_div, ":xp_gained", 10),
      # add xp
      (agent_get_slot, ":cur_weapon_xp", ":killer_agent_no", slot_agent_weapon_xp),
      (val_add, ":cur_weapon_xp", ":xp_gained"),
      (agent_set_slot, ":killer_agent_no", slot_agent_weapon_xp, ":cur_weapon_xp"),
      (gt, ":cur_weapon_xp", ":xp_needed"),
      (troop_add_proficiency_points, ":killer_troop", 1),
      (val_sub, ":cur_weapon_xp", ":xp_needed"),
      (agent_set_slot, ":killer_agent_no", slot_agent_weapon_xp, ":cur_weapon_xp"),
      (try_begin),
        (eq, ":killer_agent_no", ":player_agent"),
        (display_message, "@You got 1 weapon point.", 0xEEEE00),
      (try_end),
    (try_end),
   ])

## NMCml begin: not use
#custom_commander_agent_refill_ammo = (
#  1, 0, 0, [],
#  [
#  (get_player_agent_no, ":player_agent"),
#  (try_for_agents, ":agent_no"),
#    (neq, ":agent_no", ":player_agent"),
#    (agent_is_alive, ":agent_no"),
#    (agent_is_human, ":agent_no"),
#    (agent_get_ammo, ":agent_ammo", ":agent_no"),
#    (agent_slot_eq, ":agent_no", slot_agent_refill_ammo_times, 0),
#    (le, ":agent_ammo", 1),
#    (agent_refill_ammo, ":agent_no"),
#    (agent_set_slot, ":agent_no", slot_agent_refill_ammo_times, 1),
#  (try_end),
#  ])
## NMCml end

custom_commander_cheat_refill_ammo = (
  1, 0, 0, [(eq, "$cheat_mode", 1),],  ## NMCml add only cheat_mode
  [
  (try_begin),
    (key_is_down, key_left_control),
    (key_clicked, key_a),
    (get_player_agent_no, ":player_agent"),
    (agent_refill_ammo, ":player_agent"),
  (else_try),
    (key_is_down, key_left_alt),
    (key_clicked, key_a),
    (try_for_agents, ":agent_no"),
      (agent_refill_ammo, ":agent_no"),
    (try_end),
  (try_end),
  ])

custom_commander_change_weather = (
  ti_before_mission_start, 0, 0,
   [
    (neq, "$g_rand_rain_limit", -1),  ## CC-D add
   ],
   [
    (call_script, "script_change_rain_or_snow"),
   ])

custom_commander_npc_proficiency_limit =(
  0, 0, ti_once, [(neq, "$g_player_troop", "trp_player")],
  [
    (store_add, ":wpt_end", wpt_firearm, 1),
    (try_for_range, ":weapon_type", wpt_one_handed_weapon, ":wpt_end"),
      (store_proficiency_level, ":weapon_proficiency", "$g_player_troop", ":weapon_type"),
      (item_set_slot, ":weapon_type", slot_weapon_proficiency, ":weapon_proficiency"),
    (try_end),
  ])

custom_commander_npc_raise_proficiency =(
  1, 0, 0, [(neq, "$g_player_troop", "trp_player")],
  [
    (str_store_troop_name, s1, "$g_player_troop"),
    (store_add, ":wpt_end", wpt_firearm, 1),
    (try_for_range, ":weapon_type", wpt_one_handed_weapon, ":wpt_end"),
      (store_proficiency_level, ":cur_weapon_proficiency", "$g_player_troop", ":weapon_type"),
      (item_get_slot, ":weapon_proficiency", ":weapon_type", slot_weapon_proficiency),
      (gt, ":cur_weapon_proficiency", ":weapon_proficiency"),
      (store_sub, ":amout", ":cur_weapon_proficiency", ":weapon_proficiency"),
      (assign, reg2, ":amout"),
      (val_sub, ":amout", 1),
      (assign, reg3, ":amout"),
      (assign, reg1, ":cur_weapon_proficiency"),

      (store_sub, ":out_string", ":weapon_type", wpt_one_handed_weapon),
      (val_add, ":out_string", "str_one_handed_weapon"),
      (str_store_string, s2, ":out_string"),
      (display_message, "@{reg3?{s1}'s proficiency in {s2}has improved by {reg2} to {reg1}.:{s1}'s {s2}proficiency have reach to {reg1}.}", 0xEEEE00),
      (item_set_slot, ":weapon_type", slot_weapon_proficiency, ":cur_weapon_proficiency"),
    (try_end),
  ])

custom_commander_hero_wounded =(
  ti_on_agent_killed_or_wounded, 0, 0, [],
    [
      (store_trigger_param_1, ":wounded_agent_no"),
      (store_trigger_param_2, ":killer_agent_no"),
      
      (get_player_agent_no, ":player_agent"),
      (agent_get_troop_id, ":player_troop", ":player_agent"),
      
      (try_begin),
        (eq, ":killer_agent_no", ":player_agent"),
        (agent_is_human, ":wounded_agent_no"),
        (agent_get_troop_id, ":wounded_troop", ":wounded_agent_no"),
        (this_or_next|is_between, ":wounded_troop", bandit_heroes_begin, bandit_heroes_end),
        (troop_slot_eq, ":wounded_troop", slot_troop_occupation, slto_kingdom_hero),
        (try_begin),
          (troop_is_hero, ":wounded_troop"),
          (store_character_level, ":troop_level", ":wounded_troop"),
          (store_character_level, ":player_level", ":player_troop"),
          (store_sub, ":renown_change", ":troop_level", ":player_level"),
          (val_max, ":renown_change", 0),
          (val_div, ":renown_change", 4),
          (try_begin),
            (agent_is_ally, ":wounded_agent_no"),
            (val_mul, ":renown_change", -1),
          (try_end),
          (call_script,"script_change_troop_renown", ":player_troop", ":renown_change"),
        (try_end),
      (else_try),
        (eq, ":wounded_agent_no", ":player_agent"),
        (agent_is_human, ":killer_agent_no"),
        (agent_get_troop_id, ":killer_troop", ":killer_agent_no"),
        (try_begin),
          (troop_is_hero, ":killer_troop"),
          (store_character_level, ":troop_level", ":killer_troop"),
          (store_character_level, ":player_level", ":player_troop"),
          (store_sub, ":renown_change", ":troop_level", ":player_level"),
          (val_min, ":renown_change", 0),
          (val_div, ":renown_change", 4),
          (call_script,"script_change_troop_renown", ":player_troop", ":renown_change"),
        (try_end),
      (try_end),
    ])
    
custom_commander_agent_weapons_fix =(
  1, 0, 0, [(eq,"$g_ccc_option_weapons_ai",1),],  ## CC-C
    [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_team, ":agent_team", ":agent_no"),
        (agent_get_division, ":agent_division", ":agent_no"),
        (team_get_weapon_usage_order, ":weapon_usage_order", ":agent_team", ":agent_division"),
        (eq, ":weapon_usage_order", wordr_use_any_weapon),
      ## rhodok_sergeant
        # (try_begin),
          # (eq, ":troop_no", "trp_rhodok_sergeant"),
          # (agent_has_item_equipped, ":agent_no", "itm_glaive"),
          # (try_begin),
            # (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 500),
            # (assign, ":num_enemies", reg0),
            # (gt, ":num_enemies", 0),
            # (agent_set_wielded_item, ":agent_no", "itm_glaive"),
          # (else_try),
            # (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
            # (eq, ":weapon_item", "itm_glaive"),
            # (try_for_range, ":cur_slot", 0, 4),
              # (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
              # (gt, ":cur_weapon", 0),
              # (neq, ":cur_weapon", "itm_glaive"),
              # (neq, ":cur_weapon", "itm_war_spear"),
              # (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
            # (try_end),
          # (try_end),
        # (try_end),
      ## rhodok_sergeant
        (agent_get_ammo, ":num_ammo", ":agent_no"),
        (store_skill_level, ":skill_level", "skl_horse_archery", ":troop_no"),
        (try_begin),
          (gt, ":num_ammo", 0), # horse archer
          (assign, ":switch_to_ranger_wpns", 0), # 0 = not switch, 1 = switch to ranger weapons, -1 = switch to short weapons
          (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          # decide switch aim
          (try_begin),
            (ge, ":horse_agent", 0),
            (set_fixed_point_multiplier, 10),
            (agent_get_speed, pos1, ":agent_no"),
            (position_get_y, ":agent_speed", pos1),
            (try_begin),
              (ge, ":agent_speed", 80),
              (gt, ":skill_level", 0), 
              (assign, ":switch_to_ranger_wpns", 1),
            (else_try),
              (le, ":agent_speed", 40),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
              (assign, ":num_enemies", reg0),
              (ge, ":num_enemies", 1),
              (assign, ":switch_to_ranger_wpns", -1),
            (try_end),
          (try_end),
          # execute switch aim
          (try_begin),
            (eq, ":switch_to_ranger_wpns", -1),
            (try_begin),
              (gt, ":weapon_item", 0),
              # ranger weapon
              (is_between, ":weapon_item", ranged_weapons_begin, ranged_weapons_end),
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (item_get_type, ":i_type", ":cur_weapon"),
                (neq, ":i_type", itp_type_shield),
                # not ranger weapon
                (neg|is_between, ":cur_weapon", ranged_weapons_begin, ranged_weapons_end),
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":switch_to_ranger_wpns", 1),
            (try_begin),
              (gt, ":weapon_item", 0),
              # not ranger weapon
              (neg|is_between, ":weapon_item", ranged_weapons_begin, ranged_weapons_end),
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                # ranger weapon
                (is_between, ":cur_weapon", ranged_weapons_begin, ranged_weapons_end),
                ## CC-D begin: crossbows = itp_cant_reload_on_horseback
                #(neg|is_between, ":cur_weapon", "itm_crossbow", "itm_flintlock_pistol"),
                (item_get_slot, ":cant_horseback", ":cur_weapon", slot_item_cant_on_horseback),
                (neq, ":cant_horseback", 1),
                ## CC-D end
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (try_end),
        (else_try),
          # (le, ":num_ammo", 0), # melee
          (assign, ":switch_to_lances", 0), # 0 = not switch, 1 = switch to lances, -1 = switch to short weapons
          (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          # decide switch aim
          (try_begin),
            (ge, ":horse_agent", 0),
            (set_fixed_point_multiplier, 10),
            (agent_get_speed, pos1, ":agent_no"),
            (position_get_y, ":agent_speed", pos1),
            (try_begin),
              (ge, ":agent_speed", 80),
              (assign, ":switch_to_lances", 1),
            (else_try),
              (le, ":agent_speed", 40),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
              (assign, ":num_enemies", reg0),
              (ge, ":num_enemies", 1),
              (assign, ":switch_to_lances", -1),
            (try_end),
          (else_try),
            (assign, ":switch_to_lances", -1),
          (try_end),
          # execute switch aim
          (try_begin),
            (eq, ":switch_to_lances", -1),
            (try_begin),
              (gt, ":weapon_item", 0),
              # couchable weapon
              ## CC-D begin: use itp_couchable
              #(this_or_next|is_between, ":weapon_item", "itm_light_lance", "itm_pike"), 
              #(is_between, ":weapon_item", "itm_jousting_lance", "itm_glaive"),
              (item_has_property, ":weapon_item", itp_couchable),  #1.161
              ## CC-D end
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (item_get_type, ":i_type", ":cur_weapon"),
                (neq, ":i_type", itp_type_shield),
                # not couchable weapon
                ## CC-D begin: use itp_couchable
                #(neg|is_between, ":cur_weapon", "itm_light_lance", "itm_pike"), 
                #(neg|is_between, ":cur_weapon", "itm_jousting_lance", "itm_glaive"),
                (neg|item_has_property, ":cur_weapon", itp_couchable),  #1.161
                ## CC-D end
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":switch_to_lances", 1),
            (try_begin),
              (gt, ":weapon_item", 0),
              # not couchable weapon
              ## CC-D begin: use itp_couchable
              #(neg|is_between, ":weapon_item", "itm_light_lance", "itm_pike"), 
              #(neg|is_between, ":weapon_item", "itm_jousting_lance", "itm_glaive"),
              (neg|item_has_property, ":weapon_item", itp_couchable),  #1.161
              ## CC-D end
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                # couchable weapon
                ## CC-D begin: use itp_couchable
                #(this_or_next|is_between, ":cur_weapon", "itm_light_lance", "itm_pike"), 
                #(is_between, ":cur_weapon", "itm_jousting_lance", "itm_glaive"),
                (item_has_property, ":cur_weapon", itp_couchable),  #1.161
                ## CC-D end
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
    ])

custom_commander_fill_agent_empty_wpn_slot = (
  3, 0, 0, [(eq,"$g_ccc_option_weapons_ai",1),],  ## CC-D
  [
    ## add lance if needed
    (try_for_agents, ":agent_no"),
      (assign, ":special_wpn_type", -1),
      (assign, ":no_need", 0),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_horse, ":horse_agent", ":agent_no"),
      (gt, ":horse_agent", -1),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (neg|troop_is_hero, ":troop_no"),
      (assign, ":end_cond", 4),
      (try_for_range, ":cur_slot", 0, ":end_cond"),
        (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
        # already have couchable weapon
        ## CC-D begin: use itp_couchable
        #(this_or_next|is_between, ":cur_weapon", "itm_light_lance", "itm_pike"), 
        #(is_between, ":cur_weapon", "itm_jousting_lance", "itm_glaive"),
        (gt, ":cur_weapon", 0),
        (item_has_property, ":cur_weapon", itp_couchable),  #1.161
        ## CC-D end
        (assign, ":no_need", 1),
        (assign, ":end_cond", 0), # stop
      (try_end),
      (eq, ":no_need", 0),
      (assign, ":special_wpn_type", 4),
      ## add lance to empty slot, only once
      (assign, ":end_cond", 4),
      (try_for_range, ":cur_slot", 0, ":end_cond"),
        (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
        (eq, ":cur_weapon", -1),
        (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", ":special_wpn_type"),
        (assign, ":fitfull_weapon", reg1),
        (gt, ":fitfull_weapon", -1),
        (agent_equip_item, ":agent_no", ":fitfull_weapon"),
        (assign, ":end_cond", 0), # stop
      (try_end),
    (try_end),
    
    ## add ammo if needed, ranger wpn type
    #(try_for_agents, ":agent_no"),
      #(agent_is_alive, ":agent_no"),
      #(agent_is_human, ":agent_no"),
      #(agent_get_troop_id, ":troop_no", ":agent_no"),
      #(assign, ":special_wpn_type", -1),
      #(neg|troop_is_hero, ":troop_no"),
      #(try_for_range, ":cur_slot", 0, 4),
        #(agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
        #(gt, ":cur_weapon", 0),
        #(item_get_type, ":i_type", ":cur_weapon"),
        #(try_begin),
          #(eq, ":i_type", itp_type_bow),
          #(assign, ":special_wpn_type", 0),
        #(else_try),
          #(eq, ":i_type", itp_type_crossbow),
          #(assign, ":special_wpn_type", 1),
        #(else_try),
          #(eq, ":i_type", itp_type_thrown),
          #(assign, ":special_wpn_type", 2),
        #(else_try),
          #(this_or_next|eq, ":i_type", itp_type_pistol),
          #(eq, ":i_type", itp_type_musket),
          #(assign, ":special_wpn_type", 3),
        #(try_end),
      #(try_end),
      # add ammo to empty slot
      #(try_for_range, ":cur_slot", 0, 4),
        #(agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
        #(eq, ":cur_weapon", -1),
        #(gt, ":special_wpn_type", -1),
        #(call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", ":special_wpn_type"),
        #(assign, ":fitfull_weapon", reg1),
        #(gt, ":fitfull_weapon", -1),
        #(agent_equip_item, ":agent_no", ":fitfull_weapon"),
      #(try_end),
    #(try_end),
  ])

## NMCml begin: relation to critical
#custom_commander_agent_set_hp = (
#  0.1, 0, 0, [], 
#  [
#    (get_player_agent_no, ":player_agent"),
#    (try_for_agents, ":agent_no"),
#      (agent_is_alive, ":agent_no"),
#      (agent_is_human, ":agent_no"),
#      (neq, ":agent_no", ":player_agent"),
#      (agent_get_slot, ":dest_hp", ":agent_no", slot_agent_dest_hp),
#      (gt, ":dest_hp", 0),
#      (agent_set_hit_points, ":agent_no", ":dest_hp", 1),
#      (agent_set_no_death_knock_down_only, ":agent_no", 0),
#    (try_end),
#  ])
## NMCml end

## CC-D begin
cry_victory = (
  0, 0, 3, [(key_clicked, key_k), (neg|main_hero_fallen), (eq, "$ccc_fuck_stage", 0)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_is_active, ":player_agent"),
    (agent_get_troop_id, ":p_id", ":player_agent"),
    (troop_get_type, ":is_female", ":p_id"),
    (try_begin),
	  (this_or_next|eq, ":is_female", tf_elf_female),
	  (this_or_next|eq, ":is_female", tf_gaolu_female),
	  (this_or_next|eq, ":is_female", tf_girl),
      (eq, ":is_female", tf_female),
      (agent_play_sound, ":player_agent", "snd_woman_victory"),
    (else_try),
      (agent_play_sound, ":player_agent", "snd_man_victory"),
    (try_end),
    (agent_set_animation, ":player_agent", "anim_cheer", 1),
    (try_begin),
      (key_is_down, key_left_control), 
      (agent_set_slot, ":player_agent", slot_agent_ccd_player_cry, 1),
    (try_end),
  ])

cry_victory_call = (1, 0, 5,
  [
    (neg|main_hero_fallen),
    (eq, "$ccc_fuck_stage", 0),
    (get_player_agent_no, ":player_agent"),
    (agent_slot_eq, ":player_agent", slot_agent_ccd_player_cry, 1),
  ],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_position, pos2, ":player_agent"),
    (assign,":cast_raise_dead",0),#occc
    (try_for_agents, ":agent_no"),
      (try_begin),#occc raise dead
            (agent_slot_ge, ":player_agent", slot_agent_can_raise_dead, 1),#player is a necromancer
            (neg|agent_is_alive, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_active, ":agent_no"),
            (agent_get_position, pos1, ":agent_no"),
            (get_distance_between_positions, ":distance", pos1, pos2),
            (le, ":distance", 3000),

            
            (agent_get_troop_id, ":cur_troop", ":agent_no"),
            (neg|troop_is_hero, ":cur_troop"),
            (troop_get_type, ":cur_type", ":cur_troop"),
            (this_or_next|eq, ":cur_type", tf_male),
            (eq, ":cur_type", tf_female),
            (neq, ":cur_troop", "trp_ccc_dark_knight_skeleton"),
            (neq, ":cur_troop", "trp_ccc_dark_knight_ghost"),
            (neq, ":cur_troop", "trp_ccd_dark_knight_shadow"),
            
            (store_random_in_range, ":rand", 0, 100),
            (le, ":rand", 90),
            
            (agent_get_position, pos2, ":agent_no"),
            (position_move_z, pos2, 50),
            (add_missile, ":player_agent", pos2, 0, "itm_ccd_spawn_undead", 0, "itm_ccd_spawn_undead", 0),
            (agent_fade_out, ":agent_no"),
            (assign,":cast_raise_dead",1),
      (else_try),
      
          (agent_is_alive, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_ally, ":agent_no"),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":distance", pos1, pos2),
          (le, ":distance", 1200),
          
          #occc start
          (try_begin),
            (eq, "$g_ccd_no_run_away", 0),
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_add, ":agent_courage_score", 300),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (try_end),
          (try_begin),#OCCC Perk Cheering Heal Effect
           (agent_slot_eq, ":player_agent", slot_agent_is_cheerer, 1),#player is cheerer
           (store_agent_hit_points,":life",":agent_no",0),
           (val_add,":life",4),
           (agent_set_hit_points,":agent_no",":life",0),
           (display_message,"@You cheered men!",0x6495ed),
          (try_end),
          #occc end
          
          (agent_get_troop_id, ":cur_agent", ":agent_no"),
          (troop_get_type, ":type", ":cur_agent"),
          (try_begin),
            (this_or_next|eq, ":type", tf_elf_male),
            (eq, ":type", tf_male),
            (agent_play_sound, ":agent_no", "snd_man_victory"),
          (else_try),
            (this_or_next|eq, ":type", tf_elf_female),
            (this_or_next|eq, ":type", tf_gaolu_female),
            (this_or_next|eq, ":type", tf_girl),
            (eq, ":type", tf_female),
            (agent_play_sound, ":agent_no", "snd_woman_victory"),
          (else_try),
            (eq, ":type", tf_undead),
            (agent_play_sound, ":agent_no", "snd_ccd_undead_victory"),
          (else_try),
            (eq, ":type", 3),  #troll
            (agent_play_sound, ":agent_no", "snd_ccd_troll_victory"),
          (else_try),
            (eq, ":type", 4),  #dog
            (agent_play_sound, ":agent_no", "snd_ccd_dog_bark"),
          (try_end),
          (agent_set_animation, ":agent_no", "anim_cheer", 1),

	  (try_end),

    (try_end),
    
    (try_begin),
        (eq,":cast_raise_dead",1),
        (agent_get_slot, ":raisedeadcount", ":player_agent", slot_agent_can_raise_dead),
        (val_sub,":raisedeadcount",1),
        (agent_set_slot, ":player_agent", slot_agent_can_raise_dead, ":raisedeadcount"),
        (agent_get_position, pos1, ":player_agent"),
        (particle_system_burst, "psys_ccd_rising_aura", pos1, 100),
        (agent_set_animation, ":player_agent", "anim_roar"),
        (call_script, "script_change_player_honor", -1),
        (agent_set_slot, ":player_agent", slot_agent_ccd_player_cry, 0),
        (assign, reg0,":raisedeadcount"),
        (display_message,"@You have casted Raise Dead!({reg0} left)",0x6495ed),#occc
    (else_try),
        (agent_set_slot, ":player_agent", slot_agent_ccd_player_cry, 0),
        (display_message,"@You rally men!",0x6495ed),#occc
    (try_end),

    
  ])

cry_command = (
  ti_on_order_issued, 0, 0.5, [],
  [
    (store_trigger_param_1,":order"),
    (store_trigger_param_2,":agent_no"),
    
    (try_begin),
      (agent_is_active, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_troop_id, ":cur_agent", ":agent_no"),
      (troop_get_type, ":type", ":cur_agent"),
      (eq, ":order", mordr_charge),
      (try_begin),
        (eq, ":type", tf_male),
        (agent_play_sound, ":agent_no", "snd_man_warcry"),
      (else_try),
		(this_or_next|eq, ":type", tf_elf_female),
		(this_or_next|eq, ":type", tf_gaolu_female),
		(this_or_next|eq, ":type", tf_girl),
        (eq, ":type", tf_female),
        (agent_play_sound, ":agent_no", "snd_woman_warcry"),
      (try_end),
	#occc imported from difor 0.58 start
      (agent_get_wielded_item, ":weapon", ":agent_no", 0),
      (gt, ":weapon", 0),
      (item_get_type, ":item_type", ":weapon"),
      (is_between, ":item_type", itp_type_one_handed_wpn, itp_type_arrows),
      (item_get_weapon_length, ":length", ":weapon"),
      (le, ":length", 120),  # 120:two_handed_cleaver
      (agent_set_animation, ":agent_no", "anim_command_charge_onehanded", 1),
	#occc imported from difor 0.58 end
    (try_end),
  ])

#occc imported from difor 0.058
ccd_special_ai_cave = (1, 0, 0, [],
  [
    (set_fixed_point_multiplier, 1000),
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_non_player, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_active, ":agent_no"),
      
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (try_begin),
        (eq, ":troop_no", "trp_ccd_necromancer"),  # necromancer: convert bodies to undeads
        
        (agent_get_slot, ":timer", ":agent_no", slot_agent_ccd_ai_flag),
        (val_sub, ":timer", 1),
        (val_max, ":timer", 0),
        (try_begin),
          (le, ":timer", 0),
          
          (assign, ":timer", 600),
        (else_try),
          (is_between, ":timer", 550, 570),
          
          (assign, ":count", 0),
          (try_for_agents, ":cur_agent"),
            (neg|agent_is_alive, ":cur_agent"),
            (agent_is_human, ":cur_agent"),
            (agent_is_active, ":cur_agent"),
            
            (agent_get_troop_id, ":cur_troop", ":cur_agent"),
            (neg|troop_is_hero, ":cur_troop"),
            (troop_get_type, ":cur_type", ":cur_troop"),
            (this_or_next|eq, ":cur_type", tf_male),
            (eq, ":cur_type", tf_female),
            (neq, ":cur_troop", "trp_ccc_dark_knight_skeleton"),
            (neq, ":cur_troop", "trp_ccc_dark_knight_ghost"),
            (neq, ":cur_troop", "trp_ccd_dark_knight_shadow"),
            
            (store_random_in_range, ":rand", 0, 100),
            (lt, ":rand", 80),
            
            (agent_get_position, pos2, ":cur_agent"),
            (position_move_z, pos2, 50),
            (add_missile, ":agent_no", pos2, 0, "itm_ccd_spawn_undead", 0, "itm_ccd_spawn_undead", 0),
            (agent_fade_out, ":cur_agent"),
            
            (val_add, ":count", 1),
          (try_end),
          (gt, ":count", 0),
          (val_sub, ":timer", 20),
          (agent_get_position, pos1, ":agent_no"),
          (particle_system_burst, "psys_ccd_rising_aura", pos1, 100),
          (agent_set_animation, ":agent_no", "anim_roar"),
        (try_end),
        (agent_set_slot, ":agent_no", slot_agent_ccd_ai_flag, ":timer"),
      (else_try),
        (eq, ":troop_no", "trp_ccd_balrog"),  # balrog: burning ground
        
        (agent_get_slot, ":timer", ":agent_no", slot_agent_ccd_ai_flag),
        (val_sub, ":timer", 1),
        (val_max, ":timer", 0),
        (try_begin),
          (le, ":timer", 0),
          
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_position, pos1, ":agent_no"),
          (assign, ":count", 0),
          (try_for_agents, ":cur_agent"),
            (agent_is_alive, ":cur_agent"),
            (agent_is_human, ":cur_agent"),
            (agent_is_active, ":cur_agent"),
            
            (agent_get_team, ":cur_team", ":cur_agent"),
            (teams_are_enemies, ":cur_team", ":agent_team"),
            
            (agent_get_position, pos2, ":cur_agent"),
            (get_distance_between_positions, ":distance", pos1, pos2),
            (le, ":distance", 500),
            (val_add, ":count", 1),
          (try_end),
          (try_begin),
            (ge, ":count", 2),
            
            (agent_play_sound, ":agent_no", "snd_balrog_yell"),
            (assign, ":timer", 180),
            (agent_set_animation, ":agent_no", "anim_roar"),
            
            (try_for_agents, ":cur_agent"),
              (agent_is_alive, ":cur_agent"),
              (agent_is_human, ":cur_agent"),
              (agent_is_active, ":cur_agent"),
              (neq, ":cur_agent", ":agent_no"),
              
              #(agent_get_team, ":cur_team", ":cur_agent"),
              #(teams_are_enemies, ":cur_team", ":agent_team"),
              (agent_get_troop_id, ":troop_no", ":cur_agent"),
              (neq, ":troop_no", "trp_ccd_balrog"),
              
              (agent_get_position, pos2, ":cur_agent"),
              (get_distance_between_positions, ":distance", pos1, pos2),
              
              (le, ":distance", 5000),
              (assign, ":damaged", 0),
              (try_begin),
                (this_or_next|eq, ":troop_no", "trp_ccc_dark_knight_ghost"),
                (eq, ":troop_no", "trp_ccd_zombie"),
                (agent_deliver_damage_to_agent, ":agent_no", ":cur_agent", 500),
                (assign, ":damaged", 1),
              (try_end),
              (eq, ":damaged", 0),
              
              (le, ":distance", 1000),
              (store_random_in_range, ":rnd", 0, 3),
              (try_begin),
                (eq, ":rnd", 0),
                (agent_set_animation, ":cur_agent", "anim_strike_head_front"),
              (else_try),
                (eq, ":rnd", 1),
                (agent_set_animation, ":cur_agent", "anim_strike2_head_front"),
              (else_try),
                (agent_set_animation, ":cur_agent", "anim_strike3_head_front"),
              (try_end),
              (agent_deliver_damage_to_agent, ":agent_no", ":cur_agent", 10),
            (try_end),
            
            (try_for_range, ":unused", 0,6),
              (agent_get_position, pos1, ":agent_no"),
              
              (store_random_in_range, ":rand_x", 300, 800),
              (store_random_in_range, ":rand_y", 300, 800),
              (store_random_in_range, ":minus_x", 0, 2),
              (store_random_in_range, ":minus_y", 0, 2),
              (try_begin),
                (eq, ":minus_x", 1),
                (val_mul, ":rand_x", -1),
              (try_end),
              (try_begin),
                (eq, ":minus_y", 1),
                (val_mul, ":rand_x", -1),
              (try_end),
              (position_move_x, pos1, ":rand_x"),
              (position_move_y, pos1, ":rand_y"),
              (position_set_z_to_ground_level, pos1),
              
              (set_spawn_position, pos1),
              (spawn_scene_prop, "spr_ccd_object_fire"),
            (try_end),
          (try_end),
        (try_end),
        (agent_set_slot, ":agent_no", slot_agent_ccd_ai_flag, ":timer"),
      (try_end),
    (try_end),
  ])
  
ccd_fire_damage = (4, 0, 0,
  [
    (scene_prop_get_num_instances, ":fire_num", "spr_ccd_object_fire"),
    (ge, ":fire_num", 1),
  ],[
    (get_player_agent_no, ":player_agent"),
    (try_for_agents, ":agent"),
      (agent_is_alive, ":agent"),
      (call_script, "script_ccd_get_troop_nearest_prop", ":agent", "spr_ccd_object_fire"),
      (assign, ":prop", reg0),
      (assign, ":dist", reg1),
      (assign, ":damage", 0),
      (try_begin),
        (lt, ":dist", 2000),
        (try_begin),
          (eq, ":agent", ":player_agent"),
          (prop_instance_get_position, pos5, ":prop"),
          (play_sound_at_position, "snd_ccd_fire_burning", pos5),
        (try_end),
        (lt, ":dist", 300),
        (assign, ":damage", 10),
        (lt, ":dist", 200),
        (assign, ":damage", 25),
        (lt, ":dist", 125),
        (assign, ":damage", 35),
        (lt, ":dist", 75),
        (assign, ":damage", 40),
      (try_end),
      (neq, ":damage", 0),
      (agent_deliver_damage_to_agent, ":agent", ":agent", ":damage"),
    (try_end),
  ])

ccd_fire_spawn = (5, 0, 0,
  [
    (scene_prop_get_num_instances, ":fire_num", "spr_ccd_object_fire"),
    (ge, ":fire_num", 1),
  ],[
    (get_player_agent_no, ":player_agent"),
    (scene_prop_get_num_instances, ":fire_num", "spr_ccd_object_fire"),
    (try_for_range, ":cur_instance", 0, ":fire_num"),
      (scene_prop_get_instance, ":spr_instance", "spr_ccd_object_fire", ":cur_instance"),
      (scene_prop_get_visibility, ":active", ":spr_instance"),
      (eq, ":active", 1),
      (assign, ":damage", 40),
      (try_begin),
        (gt, "$g_ccd_rain_amount", 0),
        (store_mul, ":rain_damage", "$g_ccd_rain_amount", 2),
        (val_add, ":rain_damage", 100),
        (val_mul, ":damage", ":rain_damage"),
        (val_div, ":damage", 100),
      (try_end),
      (prop_instance_receive_damage, ":spr_instance", ":player_agent", ":damage"),
      (prop_instance_get_position, pos5, ":spr_instance"),
      (store_random_in_range, ":add_x", 200, 400),
      (store_random_in_range, ":add_y", 200, 400),
      (store_random_in_range, ":cyc", 0, 2),
      (try_begin),
        (eq, ":cyc", 1),
        (val_mul, ":add_x", -1),
      (try_end),
      (store_random_in_range, ":cyc", 0, 2),
      (try_begin),
        (eq, ":cyc", 1),
        (val_mul, ":add_y", -1),
      (try_end),
      (position_move_x, pos5, ":add_x"),
      (position_move_y, pos5, ":add_y"),
      (position_set_z_to_ground_level, pos5),
      
      (store_random_in_range, ":fire_seed", 0, 10),
      (try_begin),
        (lt, ":fire_seed", 3),
        (particle_system_burst, "psys_fireplace_fire_small", pos5, 200),
      (else_try),
        (lt, ":fire_seed", 9),
        (particle_system_burst, "psys_fireplace_fire_big", pos5, 200),
      (else_try),
        (set_spawn_position, pos5),
        (spawn_scene_prop, "spr_ccd_object_fire"),
      (try_end),
    (try_end),
  ])

ccd_darknight_caller = (ti_before_mission_start, 0, 0, [],
  [
    (scene_prop_get_num_instances, ":num", "spr_ccd_darknight_caller"),
    (try_begin),
      (gt, ":num", 0),
      (set_skybox, 40, 41),  # skybox_darknight
    (try_end),
  ])

ccd_set_scene_item = (ti_after_mission_start, 0, 0, [],
  [
    (scene_prop_get_num_instances, ":num", "spr_ccd_set_torch_shield"),
    (try_begin),
      (gt, ":num", 0),
      (try_for_range, ":cur_instance", 0, ":num"),
        (scene_prop_get_instance, ":spr_instance", "spr_ccd_set_torch_shield", ":cur_instance"),
        (prop_instance_get_position, pos1, ":spr_instance"),
        (set_spawn_position, pos1),
        (spawn_item, "itm_ccd_torch_shield", 0),
        (scene_prop_set_visibility, ":spr_instance", 0),
      (try_end),
    (try_end),
    
    (scene_item_get_num_instances, ":num", "itm_ccd_gungnir_replica_melee"),
    (try_for_range, ":cur_instance", 0, ":num"),
      (scene_item_get_instance, ":spr_instance", "itm_ccd_gungnir_replica_melee", ":cur_instance"),
      (prop_instance_get_position, pos1, ":spr_instance"),
      (set_spawn_position, pos1),
      (spawn_item, "itm_ccd_gungnir_replica", 0),
      (scene_prop_set_visibility, ":spr_instance", 0),
    (try_end),
  ])

ccd_lead_spawn_change = (0, 0, 3,
  [
    (eq, "$g_ccd_use_another_entry", 1),
    (key_clicked, key_j),
    (neg|main_hero_fallen),
  ],
  [
    (try_begin),
      (eq, "$g_ccd_another_entry", 0),
      (assign, "$g_ccd_another_entry", 1),
      (display_message, "@Reinforce at Enemy Entry Point"),
    (else_try),
      (assign, "$g_ccd_another_entry", 0),
      (display_message, "@Reinforce at Default Point"),
    (try_end),
  ])

ccd_lead_spawn_another_entry = (ti_on_agent_spawn, 0, 0,
  [
    (store_mission_timer_a,":time_a"),(ge,":time_a",3),
    (eq, "$g_ccd_another_entry", 1),
  ],
  [
    (store_trigger_param_1, ":cur_agent"),
    (set_fixed_point_multiplier, 100),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":player_team", ":player_agent"),
    (try_begin),
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_get_team, ":cur_team", ":cur_agent"),
      (eq, ":player_team", ":cur_team"),
      (try_begin),
        (eq, ":player_team", 0),
        (assign, ":enemy_ep", 1),
      (else_try),
        (eq, ":player_team", 1),
        (assign, ":enemy_ep", 0),
      (try_end),
      (entry_point_get_position, pos41, ":enemy_ep"),
      (position_move_y, pos41, 1000),
      
      (get_scene_boundaries, pos10, pos11),
      (position_get_x, reg0, pos41),
      (position_get_x, reg1, pos10),
      (val_max, reg0, reg1),
      (position_get_x, reg1, pos11),
      (val_min, reg0, reg1),
      (position_set_x, pos41, reg0),
      (position_get_y, reg0, pos41),
      (position_get_y, reg1, pos10),
      (val_max, reg0, reg1),
      (position_get_y, reg1, pos11),
      (val_min, reg0, reg1),
      (position_set_y, pos41, reg0),
      (position_set_z_to_ground_level, pos41),
      
      (agent_set_position, ":cur_agent", pos41),
    (try_end),
  ])

ccd_gunsight = (0, 0, 1, 
  [
    (game_key_is_down, gk_zoom),
    (key_is_down, key_left_control),
    (get_player_agent_no, ":agent_id"),
    (agent_get_animation, ":cur_anim", ":agent_id", 1),
    (eq, ":cur_anim", "anim_ready_musket"),
  ],
  [
    (neg|is_presentation_active,"prsnt_ccd_gunsight"),
    #(call_script,"script_client_get_my_agent"),
    #(assign,":agent_id",reg0),
    (get_player_agent_no, ":agent_id"),
    (agent_is_active,":agent_id"),
    (agent_is_alive,":agent_id"),
    (agent_get_wielded_item, ":item_id", ":agent_id", 0),
    (eq, ":item_id", "itm_ccd_rifle_sniper_scope"),
    (play_sound, "snd_draw_dagger", sf_2d),
    (start_presentation, "prsnt_ccd_gunsight"),
  ])

ccd_individual_modifier = (ti_on_agent_spawn, 0, 0,
  [
    (eq, "$g_ccd_troop_individualize", 1),
  ],
  [
    (store_trigger_param_1, ":cur_agent"),

    (agent_is_active, ":cur_agent"),
    (agent_is_alive, ":cur_agent"),
    (agent_is_non_player, ":cur_agent"),
    (agent_get_troop_id, ":troop_no", ":cur_agent"),
    (neg|troop_is_hero, ":troop_no"),
    
    (try_begin),
      (this_or_next|is_between, ":troop_no", kingdom_troops_begin, kingdom_troops_end),
      (is_between, ":troop_no", customizable_troops_begin, customizable_troops_end),
      
      (store_character_level, ":troop_lv", ":troop_no"),
      (store_sub, ":upper_border", 1000, ":troop_lv"),
      (store_sub, ":lower_border", 30, ":troop_lv"),
      (val_mul, ":lower_border", 2),
      (val_max, ":lower_border", 0),
      (store_random_in_range, ":rand", 0, 1000),
      
      (try_begin),
        (ge, ":rand", ":upper_border"),
        (agent_set_max_hit_points, ":cur_agent", 120),
        (agent_set_hit_points, ":cur_agent", 100),
        (call_script,"script_occc_tweak_damage_modifier",":cur_agent",15),
      (else_try),
        (lt, ":rand", ":lower_border"),
        (agent_set_max_hit_points, ":cur_agent", 90),
        (agent_set_hit_points, ":cur_agent", 100),
        (call_script,"script_occc_tweak_damage_modifier",":cur_agent",-10),
      (try_end),
    (else_try),
      (this_or_next|is_between, ":troop_no", soldiers_begin, soldiers_end),
      (neg|is_between, ":troop_no", kingdom_troops_begin, kingdom_troops_end),
      
      (store_random_in_range, ":rand", 0, 1000),
      (try_begin),
        (ge, ":rand", 950),
        (agent_set_max_hit_points, ":cur_agent", 115),
        (agent_set_hit_points, ":cur_agent", 100),
        (call_script,"script_occc_tweak_damage_modifier",":cur_agent",15),
        (call_script,"script_occc_tweak_speed_modifier",":cur_agent",15),
      (else_try),
        (ge, ":rand", 850),
        (agent_set_max_hit_points, ":cur_agent", 110),
        (agent_set_hit_points, ":cur_agent", 100),
        (call_script,"script_occc_tweak_damage_modifier",":cur_agent",10),
        (call_script,"script_occc_tweak_speed_modifier",":cur_agent",10),
      (else_try),
        (lt, ":rand", 50),
        (agent_set_max_hit_points, ":cur_agent", 90),
        (agent_set_hit_points, ":cur_agent", 100),
        (call_script,"script_occc_tweak_damage_modifier",":cur_agent",-10),
        (call_script,"script_occc_tweak_speed_modifier",":cur_agent",-10),
      (try_end),
    (else_try),
      (eq, ":troop_no", "trp_ccd_troll"),
      
      (store_random_in_range, ":rand", 0, 1000),
      (ge, ":rand", 700),
      (agent_set_max_hit_points, ":cur_agent", 120),
      (agent_set_hit_points, ":cur_agent", 100),
      (call_script,"script_occc_tweak_damage_modifier",":cur_agent",20),
      (call_script,"script_occc_tweak_speed_modifier",":cur_agent",10),
    (try_end),
  ])

ccd_equipped_item_boost = (ti_on_agent_spawn, 0, 0, [], [
    (store_trigger_param_1, ":cur_agent"),
    
    (agent_is_active, ":cur_agent"),
    (agent_is_alive, ":cur_agent"),
    
    (agent_get_item_slot, ":cur_armor", ":cur_agent", ek_body),
    
    (try_begin),
      (eq, ":cur_armor", "itm_ccd_celtbody"),
      (agent_set_damage_modifier, ":cur_agent", 120),
      (agent_set_speed_modifier, ":cur_agent", 140),
    (try_end),
  ])

#ccd_dog_spawn = (ti_on_agent_spawn, 0, 0, [], [
#    (store_trigger_param_1, ":cur_agent"),
#    
#    (agent_is_active, ":cur_agent"),
#    (agent_is_alive, ":cur_agent"),
#    (agent_get_troop_id, ":troop_no", ":cur_agent"),
#    (troop_get_type, ":type", ":troop_no"),
#    (try_begin),
#      (eq, ":type", tf_dog),  #invisible rider
#      (agent_get_horse, ":horse_agent", ":cur_agent"),
#      (eq, ":horse_agent", -1),
#      (assign, ":horse", 0),
#      (try_begin),
#        (eq, ":troop_no", "trp_ccd_dog"),
#        (assign, ":horse", "itm_ccd_dog"),
#      (else_try),
#        (eq, ":troop_no", "trp_ccd_zombiedog"),
#        (assign, ":horse", "itm_ccd_zombiedog"),
#      (try_end),
#      (try_begin),
#        (neq, ":horse", 0),
#        (agent_equip_item, ":cur_agent", ":cur_horse"),
#      (try_end),
#    (try_end),
#  ])

ccd_dog_kill = (0, 0, 0.3, [], [
    (try_for_agents, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (try_begin),
        (agent_is_human, ":cur_agent"),
        (agent_get_troop_id, ":troop_no", ":cur_agent"),
        (troop_get_type, ":type", ":troop_no"),
        (eq, ":type", tf_dog),  #invisible rider
        (agent_get_horse, ":horse_agent", ":cur_agent"),
        (eq, ":horse_agent", -1),
        (remove_agent, ":cur_agent"),
      (else_try),
        (neg|agent_is_human, ":cur_agent"),
        (agent_get_rider, ":rider_agent", ":cur_agent"),
        (eq, ":rider_agent", -1),
        (agent_get_item_id, ":item_no", ":cur_agent"),
        (this_or_next|eq, ":item_no", "itm_ccd_dog"),
        (this_or_next|eq, ":item_no", "itm_occc_elephant1"),#occc
        (this_or_next|eq, ":item_no", "itm_occc_webknecht"),#occc
        (eq, ":item_no", "itm_ccd_zombiedog"),
        (remove_agent, ":cur_agent"),
      (try_end),
    (try_end),
  ])

ccd_cave_select_npc_start = (ti_before_mission_start, 0, 0, [(troop_slot_ge, "trp_player", slot_troop_ccd_select_cave_npc, 1),], [
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
    (try_for_range_backwards, ":i_stack", 1, ":num_stacks"),
      (party_stack_get_troop_id, ":troop_id", "p_main_party", ":i_stack"),
      (neq, ":troop_id", "trp_player"),
      (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
      (party_add_members, "p_temp_party", ":troop_id", ":stack_size"),
      (neg|troop_slot_ge, ":troop_id", slot_troop_ccd_select_cave_npc, 1),
      (party_remove_members, "p_main_party", ":troop_id", ":stack_size"),
    (try_end),
  ])

ccd_cave_select_npc_end = (ti_after_mission_start, 0, 0, [(troop_slot_ge, "trp_player", slot_troop_ccd_select_cave_npc, 1),], [
    (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
    (try_for_range_backwards, ":i_stack", 1, ":num_stacks"),
      (party_stack_get_troop_id, ":troop_id", "p_main_party", ":i_stack"),
      (neq, ":troop_id", "trp_player"),
      (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
      (party_remove_members, "p_main_party", ":troop_id", ":stack_size"),
    (try_end),
    (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
    (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":troop_id", "p_temp_party", ":i_stack"),
      (neq, ":troop_id", "trp_player"),
      (party_stack_get_size, ":stack_size", "p_temp_party", ":i_stack"),
      (party_remove_members, "p_temp_party", ":troop_id", ":stack_size"),
      (party_add_members, "p_main_party", ":troop_id", ":stack_size"),
      (troop_is_hero, ":troop_id"),
      (troop_set_slot, ":troop_id", slot_troop_ccd_select_cave_npc, 0),
    (try_end),
    (troop_set_slot, "trp_player", slot_troop_ccd_select_cave_npc, 0),
  ])

ccd_init_variables = (
   0, 0, ti_once,
   [
    (get_player_agent_no, ":player_agent"),
    (ge, ":player_agent", 0),
   ], [
    (get_player_agent_no, ":player_agent"),
    (agent_get_horse, ":horse", ":player_agent"),
    (agent_set_slot, ":player_agent", slot_agent_horse, ":horse"),
    (assign, "$g_minimap_style_cache", "$g_minimap_style"),
    (assign, "$g_cam_mode", 0),
    (assign, "$g_solid_camera_mode", 0),
    (assign, "$g_solid_camera_cruise", 0),
    (get_player_agent_no, "$g_cam_current_agent"),
    
    (try_begin),
      (eq, "$g_rand_rain_limit", -1),
      #(party_slot_eq, "p_main_party", slot_party_pref_wp_prof_decrease, 0),  # add by Modmerger PBOD
      (assign, "$g_ccd_rain_amount", 0),
    (try_end),
   ])

horse_whistle = (
  0, 0, 2, 
  [
  (neg|key_is_down, key_left_control),#occc
  (key_clicked, key_m),
  (eq, "$ccc_fuck_stage", 0),
  
  (assign, ":do_it", 0),
  (try_begin),
    (key_is_down, key_left_control),  #toggle minimap
    (val_add, "$g_minimap_style", 1),
    (val_mod, "$g_minimap_style", 4),
  (else_try),
    (neg|main_hero_fallen),
    (get_player_agent_no, ":player_agent"),
    (agent_play_sound, ":player_agent", "snd_whistle"),
    (try_begin),
      (agent_get_horse, ":mount", ":player_agent"),
      (eq, ":mount", -1), ##be sure player isn't currently mounted
      (agent_get_slot, ":horse", ":player_agent", slot_agent_horse),
      (gt, ":horse", 0),
      (display_message, "@You whistle for your horse."),
      (assign, ":do_it", 1),
      (agent_is_active, ":horse"), 
      (agent_is_alive, ":horse"),
      (agent_get_position, pos1, ":player_agent"),
      (agent_set_scripted_destination, ":horse", pos1, 0),
    (else_try),
      (ge, ":mount", 0),
      (assign, ":do_it", 1),
    (try_end),
  (try_end),
  (eq, ":do_it", 1),
   ],[])

ccd_camera_toggle = (
  0, 0, 0.2,
  [
    (key_clicked, key_t),
    (key_is_down, key_left_control),
    
    (assign, ":continue", 0),
    (try_begin),
      (neg|main_hero_fallen),
      (assign, ":continue", 1),
    (else_try),
      (neq, "$g_dplmc_cam_activated", 0),
      (main_hero_fallen),
      (eq, "$g_ccd_death_camera_select", 0),
      (assign, ":continue", 1),
    (try_end),
    (eq, ":continue", 1),
    
    (val_add, "$g_cam_mode", 1),
    (val_mod, "$g_cam_mode", 3),
    (try_begin),
      (eq, "$g_cam_mode", 0),
      (mission_cam_set_mode, 0),
      (display_message, "@Camera: Off"),
    (else_try),
      (eq, "$g_cam_mode", 1),
      (display_message, "@Camera: Free"),
    (else_try),
      (eq, "$g_cam_mode", 2),
      (display_message, "@Camera: Solid"),
    (try_end),
    
  ], [])

ccd_free_camera = (
  0, 0, 0, [(eq, "$g_cam_mode", 1),],
  [
    (mission_cam_get_position, pos1),
    
    (assign, "$g_camera_rotate_x", 0),
    (assign, "$g_camera_rotate_y", 0),
    (assign, "$g_camera_rotate_z", 0),
    (assign, "$g_camera_x", 0),
    (assign, "$g_camera_y", 0),
    (assign, "$g_camera_z", 0),
    
    #live/death camera control
    (try_begin),
      (key_is_down, key_numpad_6),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_rotate_z", 1),
    (try_end),
    (try_begin),
      (key_is_down, key_numpad_4),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_rotate_z", 1),
    (try_end),
    
    (try_begin),
      (key_is_down, key_numpad_1),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_rotate_y", 1),
    (try_end),
    (try_begin),
      (key_is_down, key_numpad_3),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_rotate_y", 1),
    (try_end),
    
    (try_begin),
      (key_is_down, key_numpad_8),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_rotate_x", 1),
    (try_end),
    (try_begin),
      (key_is_down, key_numpad_2),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_rotate_x", 1),
    (try_end),
    
    (try_begin),
      #live camera control
      (neg|main_hero_fallen),
      
      (try_begin),
        (key_is_down, key_left),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_x", 10),
      (try_end),
      (try_begin),
        (key_is_down, key_right),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_x", 10),
      (try_end),
      
      (try_begin),
        (key_is_down, key_up),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_y", 10),
      (try_end),
      (try_begin),
        (key_is_down, key_down),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_y", 10),
      (try_end),
      
      (try_begin),
        (key_is_down, key_numpad_plus),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_z", 10),
      (try_end),
      (try_begin),
        (key_is_down, key_numpad_minus),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_z", 10),
      (try_end),
      
      (try_begin),
        (key_is_down, key_numpad_5),
        (val_mul, "$g_camera_x", 4),
        (val_mul, "$g_camera_y", 4),
        (val_mul, "$g_camera_z", 2),
        (val_mul, "$g_camera_rotate_x", 4),
        (val_mul, "$g_camera_rotate_y", 4),
        (val_mul, "$g_camera_rotate_z", 2),
      (try_end),
      
    (else_try),
      #death camera control
      (try_begin),
        (this_or_next|key_is_down, key_a),
        (key_is_down, key_left),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_x", 10),
      (try_end),
      (try_begin),
        (this_or_next|key_is_down, key_d),
        (key_is_down, key_right),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_x", 10),
      (try_end),
      
      (try_begin),
        (this_or_next|key_is_down, key_w),
        (key_is_down, key_up),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_y", 10),
      (try_end),
      (try_begin),
        (this_or_next|key_is_down, key_s),
        (key_is_down, key_down),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_y", 10),
      (try_end),
      
      (try_begin),
        (this_or_next|key_is_down, key_e),
        (key_is_down, key_numpad_plus),
        (mission_cam_set_mode, 1),
        (val_add, "$g_camera_z", 10),
      (try_end),
      (try_begin),
        (this_or_next|key_is_down, key_x),
        (key_is_down, key_numpad_minus),
        (mission_cam_set_mode, 1),
        (val_sub, "$g_camera_z", 10),
      (try_end),
      
      (try_begin),
        (this_or_next|key_is_down, key_space),
        (key_is_down, key_numpad_5),
        (val_mul, "$g_camera_x", 4),
        (val_mul, "$g_camera_y", 4),
        (val_mul, "$g_camera_z", 2),
        (val_mul, "$g_camera_rotate_x", 4),
        (val_mul, "$g_camera_rotate_y", 4),
        (val_mul, "$g_camera_rotate_z", 2),
      (try_end),
    (try_end),
    
    (position_move_x, pos1, "$g_camera_x"),
    (position_move_y, pos1, "$g_camera_y"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_rotate_x, pos1, "$g_camera_rotate_x"),
    (position_rotate_y, pos1, "$g_camera_rotate_y"),
    (try_begin),
      (neq, "$g_camera_rotate_z", 0),
      (position_get_rotation_around_x, ":cur_rotx", pos1),
      (store_mul, ":minusrotx", ":cur_rotx", -1),
      (position_rotate_x, pos1, ":minusrotx"),
      (position_rotate_z, pos1, "$g_camera_rotate_z"),
      (position_rotate_x, pos1, ":cur_rotx"),
    (try_end),
    
    (try_begin),
      (key_clicked, key_left_shift),
      (mission_cam_set_mode, 1),
      (position_get_rotation_around_y, ":cur_roty", pos1),
      (val_mul, ":cur_roty", -1),
      (position_rotate_y, pos1, ":cur_roty"),
      (position_get_rotation_around_x, ":cur_rotx", pos1),
      (val_mul, ":cur_rotx", -1),
      (position_rotate_x, pos1, ":cur_rotx"),
      (position_get_rotation_around_y, ":cur_roty", pos1),
      (val_mul, ":cur_roty", -1),
      (position_rotate_y, pos1, ":cur_roty"),
      
      (key_is_down, key_left_control),
      (position_set_z_to_ground_level, pos1),
      (position_move_z, pos1, 200),
    (try_end),

    (mission_cam_set_position, pos1),

    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
      (assign, "$g_cam_mode", 0),
      (display_message, "@Camera: Off"),
    (try_end),
  ])

ccd_solid_camera_toggle = (
  0, 0, 0,
  [(eq, "$g_cam_mode", 2),],
  [
    (try_begin),
      (key_clicked, key_numpad_8),
      (assign, "$g_solid_camera_mode", 4),
      (mission_cam_set_mode, 1),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, "$g_solid_camera_mode", 14),
        (display_message, "@Solid Camera: from North"),
      (else_try),
        (display_message, "@Solid Camera: from Forward"),
      (try_end),
    (else_try),
      (key_clicked, key_numpad_4),
      (assign, "$g_solid_camera_mode", 3),
      (mission_cam_set_mode, 1),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, "$g_solid_camera_mode", 13),
        (display_message, "@Solid Camera: from West"),
      (else_try),
        (display_message, "@Solid Camera: from Left"),
      (try_end),
    (else_try),
      (key_clicked, key_numpad_6),
      (assign, "$g_solid_camera_mode", 1),
      (mission_cam_set_mode, 1),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, "$g_solid_camera_mode", 11),
        (display_message, "@Solid Camera: from East"),
      (else_try),
        (display_message, "@Solid Camera: from Right"),
      (try_end),
    (else_try),
      (key_clicked, key_numpad_2),
      (assign, "$g_solid_camera_mode", 2),
      (mission_cam_set_mode, 1),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, "$g_solid_camera_mode", 12),
        (display_message, "@Solid Camera: from South"),
      (else_try),
        (display_message, "@Solid Camera: from Back"),
      (try_end),
    (else_try),
      (key_clicked, key_numpad_5),
      (assign, "$g_solid_camera_mode", 5),
      (mission_cam_set_mode, 1),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, "$g_solid_camera_mode", 0),
        (mission_cam_set_mode, 0),
        (display_message, "@Solid Camera: from Player"),
      (else_try),
        (display_message, "@Solid Camera: from Behind"),
      (try_end),
    (else_try),
      (key_clicked, key_numpad_0),
      (val_add, "$g_solid_camera_cruise", 1),
      (try_begin),
        (gt, "$g_solid_camera_cruise", 1),
        (assign, "$g_solid_camera_cruise", 0),
        (display_message, "@Solid Camera: Auto Cruise: Off"),
      (else_try),
        (display_message, "@Solid Camera: Auto Cruise: On"),
      (try_end),
      (mission_cam_set_mode, 1),
    (else_try),
      (this_or_next|key_clicked, key_numpad_3),
      (key_clicked, key_left_mouse_button),
      (this_or_next|is_between, "$g_solid_camera_mode", 0, 6),
      (is_between, "$g_solid_camera_mode", 11, 15),
      
      (assign, ":hero_serch", 0),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":hero_serch", 1),
      (try_end),
      
      (assign, ":select_agent", -1),
      (try_for_agents, ":agent_no"),
        (gt, ":agent_no", "$g_cam_current_agent"),
        (eq, ":select_agent", -1),
        (agent_is_human, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (try_begin),
          (eq, ":hero_serch", 0),
          (assign, ":select_agent", ":agent_no"),
        (else_try),
          (eq, ":hero_serch", 1),
          (agent_get_troop_id, ":troop_id", ":agent_no"),
          (troop_is_hero, ":troop_id"),
          (assign, ":select_agent", ":agent_no"),
        (try_end),
      (try_end),
      
      (try_begin),
        (gt, ":select_agent", -1),
        (assign, "$g_cam_current_agent", ":select_agent"),
        (eq, "$g_solid_camera_mode", 0),
        (assign, "$g_solid_camera_mode", 2),
        (mission_cam_set_mode, 1),
      (try_end),
    (else_try),
      (this_or_next|key_clicked, key_numpad_1),
      (key_clicked, key_right_mouse_button),
      (this_or_next|is_between, "$g_solid_camera_mode", 0, 6),
      (is_between, "$g_solid_camera_mode", 11, 15),
      
      (assign, ":hero_serch", 0),
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":hero_serch", 1),
      (try_end),
      
      (assign, ":select_agent", -1),
      (try_for_agents, ":agent_no"),
        (lt, ":agent_no", "$g_cam_current_agent"),
        (agent_is_human, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (try_begin),
          (eq, ":hero_serch", 0),
          (assign, ":select_agent", ":agent_no"),
        (else_try),
          (eq, ":hero_serch", 1),
          (agent_get_troop_id, ":troop_id", ":agent_no"),
          (troop_is_hero, ":troop_id"),
          (assign, ":select_agent", ":agent_no"),
        (try_end),
      (try_end),
      
      (try_begin),
        (gt, ":select_agent", -1),
        (assign, "$g_cam_current_agent", ":select_agent"),
        (eq, "$g_solid_camera_mode", 0),
        (assign, "$g_solid_camera_mode", 2),
        (mission_cam_set_mode, 1),
      (try_end),
    (try_end),
  ])

ccd_solid_camera_main = (0, 0, 0,
  [
    (eq, "$g_cam_mode", 2),
    (this_or_next|is_between, "$g_solid_camera_mode", 1, 6),
    (is_between, "$g_solid_camera_mode", 11, 15),
  ], [
    #(get_player_agent_no, ":player_agent"),
    (set_fixed_point_multiplier, 100),
    (agent_get_position, pos1, "$g_cam_current_agent"),
    (try_begin),
      (eq, "$g_solid_camera_mode", 1), #right
      (position_move_x, pos1, 500),
      #(position_move_y, pos1, 0),
      (position_rotate_z, pos1, 90),
    (else_try),
      (eq, "$g_solid_camera_mode", 2), #backward
      #(position_move_x, pos1, 0),
      (position_move_y, pos1, -500),
      #(position_rotate_z, pos1, 0),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
    (else_try),
      (eq, "$g_solid_camera_mode", 3), #left
      (position_move_x, pos1, -500),
      #(position_move_y, pos1, 0),
      (position_rotate_z, pos1, -90),
    (else_try),
      (eq, "$g_solid_camera_mode", 4), #forward
      #(position_move_x, pos1, 0),
      (position_move_y, pos1, 500),
      (position_rotate_z, pos1, 180),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
    (else_try),
      (eq, "$g_solid_camera_mode", 11), #world solid right
      (position_move_x, pos1, 1000, 1),
      #(position_move_y, pos1, 0, 1),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
      (position_get_rotation_around_z, ":angle", pos1),
      (val_mul, ":angle", -1),
      (val_add, ":angle", 90),
      (position_rotate_z, pos1, ":angle", 1),
    (else_try),
      (eq, "$g_solid_camera_mode", 12), #world solid backward
      #(position_move_x, pos1, 0, 1),
      (position_move_y, pos1, -1000, 1),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
      (position_get_rotation_around_z, ":angle", pos1),
      (val_mul, ":angle", -1),
      #(val_add, ":angle", 0),
      (position_rotate_z, pos1, ":angle", 1),
    (else_try),
      (eq, "$g_solid_camera_mode", 13), #world solid left
      (position_move_x, pos1, -1000, 1),
      #(position_move_y, pos1, 0, 1),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
      (position_get_rotation_around_z, ":angle", pos1),
      (val_mul, ":angle", -1),
      (val_sub, ":angle", 90),
      (position_rotate_z, pos1, ":angle", 1),
    (else_try),
      (eq, "$g_solid_camera_mode", 14), #world solid backward
      #(position_move_x, pos1, 0, 1),
      (position_move_y, pos1, 1000, 1),
      (position_get_rotation_around_y, ":angle", pos1),
      (val_mul, ":angle", -1),
      (position_rotate_y, pos1, ":angle"),
      (position_get_rotation_around_z, ":angle", pos1),
      (val_mul, ":angle", -1),
      (val_add, ":angle", 180),
      (position_rotate_z, pos1, ":angle", 1),
    (try_end),
    (position_move_z, pos1, 400),
    (try_begin),
      (position_get_distance_to_ground_level, ":to_ground", pos1),
      (lt, ":to_ground", 50),
      (position_set_z_to_ground_level, pos1),
      (position_move_z, pos1, 50),
    (try_end),
    (position_rotate_x, pos1, -10),
    (try_begin),
      (eq, "$g_solid_camera_mode", 5),
      (agent_get_look_position, pos1, "$g_cam_current_agent"),
      (position_move_y, pos1, 5),
      (position_move_z, pos1, 190),
      (agent_get_horse, ":horse_agent", "$g_cam_current_agent"),
      (try_begin),
        (ge, ":horse_agent", 0),
        (position_move_z, pos1, 100),
      (try_end),
    (try_end),
    (mission_cam_animate_to_position, pos1, 100, 0),
  ])

ccd_solid_camera_cruise = (0, 0, 30,
  [
    (eq, "$g_cam_mode", 2),
    (eq, "$g_solid_camera_cruise", 1),
  ], [
    (store_random_in_range, ":next", 0, 10),
    (try_begin),
      (is_between, ":next", 1, 6),
      (agent_is_alive, "$g_cam_current_agent"),
      (assign, "$g_solid_camera_mode", ":next"),
    (else_try),
      (assign, ":next_agent", -1),
      (assign, ":last_agent", -1),
      (try_for_agents, ":agent_no"),
        (eq, ":next_agent", -1),
        (agent_is_human, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (try_begin),
          (lt, ":agent_no", "$g_cam_current_agent"),
          (assign, ":last_agent", ":agent_no"),
        (else_try),
          (gt, ":agent_no", "$g_cam_current_agent"),
          (assign, ":next_agent", ":agent_no"),
        (try_end),
      (try_end),
      
      (try_begin),
        (gt, ":next_agent", -1),
        (assign, "$g_cam_current_agent", ":next_agent"),
      (else_try),
        (gt, ":last_agent", -1),
        (assign, "$g_cam_current_agent", ":last_agent"),
      (try_end),
      (store_random_in_range, "$g_solid_camera_mode", 1, 6),
    (try_end),
  ])
## Auto-Firing weapons mod by ithilienranger
common_auto_fire_held = (0.1, 0.5, 0, [ # adjust the delay to match the time it takes to play the ready animation
    (game_key_is_down, gk_attack),
  ],[
    (get_player_agent_no, ":shooter_agent"),
    (agent_set_slot, ":shooter_agent", slot_agent_autofire_ready, 1),
  ])

common_auto_fire_clicked = (0.1, 0, 0, [
    (get_player_agent_no, ":shooter_agent"),
    (agent_get_animation, ":shooter_stance", ":shooter_agent", 1),
    (this_or_next|eq, ":shooter_stance", "anim_reload_musket"),
    (this_or_next|eq, ":shooter_stance", "anim_reload_pistol"),
    (neg|game_key_is_down, gk_attack),
  ],[
    (get_player_agent_no, ":shooter_agent"),
    (agent_set_slot, ":shooter_agent", slot_agent_autofire_ready, 0),
  ])

# CHECK IF BULLET CAN BE FIRED
common_auto_fire = (0.1, 0, 0, [
    (this_or_next|multiplayer_is_server),
    (neg|game_in_multiplayer_mode),
  ],[
    (try_for_agents, ":shooter_agent"),
      (agent_is_alive, ":shooter_agent"),
      (try_begin),
    # CHECK IF AGENT WIELDS AN AUTOFIRE WEAPON
        (agent_get_wielded_item, ":cur_weapon", ":shooter_agent", 0),
        #(is_between, ":cur_weapon", "itm_uzi", "itm_torch"),  ## CC-D del
        #(eq, ":cur_weapon", "itm_ccd_machinegun"),  ## CC-D add
		(assign,":can_autofire",0),
		(try_begin),
			(is_between, ":cur_weapon", "itm_autofire_weapons_begin", "itm_items_end"),#occc firearms05
			(assign,":can_autofire",1),
		(else_try),
			(eq, ":cur_weapon", "itm_occc_greek_fire_thrower"),
			(assign,":can_autofire",2),#type - fire thrower
        (try_end),
		
        (ge, ":can_autofire", 1),
		
    # CHECK IF AGENT IS IN READY WEAPON ANIMATION
        (agent_get_animation, ":shooter_stance", ":shooter_agent", 1),
        (this_or_next|eq, ":shooter_stance", "anim_ready_pistol"),
        (eq, ":shooter_stance", "anim_ready_musket"),

        (assign, ":ready_flag", 0),
        (try_begin),#occc
          (agent_is_non_player, ":shooter_agent"),
		  (eq,":can_autofire",2),#rhodok flame thrower
          (assign, ":ready_flag", 1),#cant stop firing
		(else_try),#Limits the AI to burst firing
          (agent_is_non_player, ":shooter_agent"),
          (agent_get_combat_state, ":cur_state", ":shooter_agent"),
          (eq, ":cur_state", 3),
          (assign, ":ready_flag", 1),
        (else_try), #Check if a player has held down the attack button
          (neg|agent_is_non_player, ":shooter_agent"),
          (agent_slot_eq, ":shooter_agent", slot_agent_autofire_ready, 1),
          (assign, ":ready_flag", 1),
        (try_end),
        (eq, ":ready_flag", 1),

    # FIND WEAPON AND SET AMMO TYPE
        (try_for_range, ":cur_slot", 0, 4),
          (agent_get_item_slot, ":cur_item", ":shooter_agent", ":cur_slot"),
        ## CC-D begin
          (try_begin),
            (eq, ":cur_item", ":cur_weapon"),
            (assign, ":weapon_slot", ":cur_slot"),
          (else_try),
            (gt, ":cur_item", 0),
            (item_get_type, ":type", ":cur_item"),
            (eq, ":type", itp_type_bullets),
            (assign, ":ammo_item", ":cur_item"),
          (try_end),
        (try_end),
		
		
		(try_begin),#occc check if correct combination
			(eq, ":can_autofire", 2),
			(neq, ":ammo_item", "itm_occc_greek_fire"),
			(assign,":can_autofire", 0),#abort!
		(try_end),
        (ge, ":can_autofire", 1),

        #(assign, ":ammo_item", "itm_cartridges"),
        ## CC-D end
    # REDUCE AMMO
        (try_begin),
          (agent_get_ammo_for_slot, ":ammo", ":shooter_agent", ":weapon_slot"),
          (gt, ":ammo", 0),
          (val_sub, ":ammo", 1),
          (agent_set_ammo, ":shooter_agent", ":cur_weapon", ":ammo"),

    # SET FIRING ANIMATION
          (try_begin),
            #(eq, ":cur_weapon", "itm_uzi"),
            (item_get_type, ":type", ":cur_weapon"),
            (eq, ":type", itp_type_pistol),
            (agent_set_animation, ":shooter_agent", "anim_release_pistol", 1),
          (else_try),
            (agent_set_animation, ":shooter_agent", "anim_release_musket", 1),
          (try_end),

          (call_script, "script_fire_auto_weapon", ":shooter_agent", ":cur_weapon", ":ammo_item"),
        (try_end),
      (else_try),
    # REDUCES RECOIL FOR ALL AGENTS
        (agent_get_slot, ":wander", ":shooter_agent", slot_agent_firearm_wander),
        (val_sub, ":wander", 20),
        (val_min, ":wander", 0),
        (agent_set_slot, ":shooter_agent", slot_agent_firearm_wander, ":wander"),
      (try_end),
    (try_end),
  ])
## Auto-Firing weapons mod end

## Tavern Animation Pack by Daedalus
dedal_tavern_animations = (
	ti_on_agent_spawn,1,0,[
		(eq, "$talk_context", tc_tavern_talk),
		(store_trigger_param_1,":agent"),
		(agent_get_troop_id,":troop",":agent"),
		(try_begin),
			(is_between,":troop","trp_musican_male","trp_musicans_end"),
			(try_begin),
				(agent_has_item_equipped,":agent","itm_dedal_lutnia"),
				(agent_set_stand_animation, ":agent", "anim_lute_sitting"),
				(agent_set_animation, ":agent", "anim_lute_sitting"),
				(agent_play_sound,":agent","snd_dedal_tavern_lute"),
			(else_try),
				(agent_has_item_equipped,":agent","itm_dedal_lira"),
				(agent_set_stand_animation, ":agent", "anim_lyre_sitting"),
				(agent_set_animation, ":agent", "anim_lyre_sitting"),
				(agent_play_sound,":agent","snd_dedal_tavern_lyre"),
			(try_end),
			(store_random_in_range,":r",0,300),
			(agent_set_animation_progress,":agent",":r"),
		(else_try),
			(is_between,":troop",tavern_minstrels_begin,tavern_minstrels_end),
			(try_begin),
				(agent_has_item_equipped,":agent","itm_dedal_lutnia"),
				(agent_set_stand_animation, ":agent", "anim_lute_standing"),
				(agent_set_animation, ":agent", "anim_lute_standing"),
				(agent_play_sound,":agent","snd_dedal_tavern_lute"),
			(else_try),
				(agent_has_item_equipped,":agent","itm_dedal_lira"),
				(agent_set_stand_animation, ":agent", "anim_lyre_standing"),
				(agent_set_animation, ":agent", "anim_lyre_standing"),
				(agent_play_sound,":agent","snd_dedal_tavern_lyre"),
			(try_end),
			(store_random_in_range,":r",0,300),
			(agent_set_animation_progress,":agent",":r"),
		(else_try),
			(is_between,":troop",walkers_begin,walkers_end),
			(try_begin),
				(agent_has_item_equipped,":agent","itm_dedal_kufel"),
				(agent_set_stand_animation, ":agent", "anim_sitting_drinking_low"),
				(agent_set_animation, ":agent", "anim_sitting_drinking_low"),
				(store_random_in_range,":r",0,300),
			(else_try),
				(agent_set_stand_animation, ":agent", "anim_sitting_low"),
				(agent_set_animation, ":agent", "anim_sitting_low"),
				(store_random_in_range,":r",0,300),
			(try_end),
			(agent_set_animation_progress,":agent",":r"),
		## CC-D begin: companion sitting
		(else_try),
			(is_between, ":troop", companions_begin, companions_end),
			(agent_get_position, pos3, ":agent"),
			(try_for_range, ":entry_no", 1, 11),
			  (neq, ":entry_no", 9),  #tavern keeper position
			  (entry_point_get_position, pos4, ":entry_no"),
			  (get_distance_between_positions, ":distance", pos3, pos4),
			  (lt, ":distance", 20),
			  (try_begin),
				  (agent_has_item_equipped, ":agent", "itm_dedal_kufel"),
				  (agent_set_stand_animation, ":agent", "anim_sitting_drinking_low"),
				  (agent_set_animation, ":agent", "anim_sitting_drinking_low"),
				  (store_random_in_range, ":r", 0, 300),
			  (else_try),
				  (agent_set_stand_animation, ":agent", "anim_sitting_low"),
				  (agent_set_animation, ":agent", "anim_sitting_low"),
				  (store_random_in_range, ":r", 0, 300),
			  (try_end),
			  (agent_set_animation_progress, ":agent", ":r"),
			(try_end),
		## CC-D end
		(try_end),
	],[])
## Tavern Animation Pack end

## Perfectly Smooth, Mouse-Enabled Deathcam by Zephilinox
common_init_deathcam = (0, 0, ti_once, [],
  [
    (assign, "$deathcam_on", 0),
    (assign, "$deathcam_death_pos_x", 0),
    (assign, "$deathcam_death_pos_y", 0),
    (assign, "$deathcam_death_pos_z", 0),
    
    (assign, "$deathcam_mouse_last_x", 5000),
    (assign, "$deathcam_mouse_last_y", 3750),
    
    (assign, "$deathcam_mouse_last_notmoved_x", 5000),
    (assign, "$deathcam_mouse_last_notmoved_y", 3750),
    (assign, "$deathcam_mouse_notmoved_x", 5000), #Center screen (10k fixed pos)
    (assign, "$deathcam_mouse_notmoved_y", 3750),
    (assign, "$deathcam_mouse_notmoved_counter", 0),
    
    (assign, "$deathcam_total_rotx", 0),
    
    (assign, "$deathcam_sensitivity_x", 400), #4:3 ratio may be best
    (assign, "$deathcam_sensitivity_y", 300), #If modified, change values in common_move_deathcam
    
    (assign, "$deathcam_prsnt_was_active", 0),
  ])
common_start_deathcam = (0, 1, ti_once, #1 second delay before the camera activates
  [
    (main_hero_fallen),
    (eq, "$g_ccd_death_camera_select", 1),
    (eq, "$deathcam_on", 0),
  ],
  [
    (set_fixed_point_multiplier, 10000),
    (assign, "$deathcam_on", 1),
    
    (display_message, "@You were defeated.", 0xFF2222),
    (display_message, "@Rotate with the mouse, move with standard keys."),
    (display_message, "@Shift/Control for Up/Down, Space Bar to increase speed."),
    (display_message, "@Numpad Plus/Minus to change sensitivity, Home to reset position."),

    (mission_cam_get_position, pos1), #Death pos
    (position_get_x, reg3, pos1),
    (position_get_y, reg4, pos1),
    (position_get_z, reg5, pos1),
    (assign, "$deathcam_death_pos_x", reg3),
    (assign, "$deathcam_death_pos_y", reg4),
    (assign, "$deathcam_death_pos_z", reg5),
    (position_get_rotation_around_z, ":rot_z", pos1),
    
    (init_position, pos47),
    (position_copy_origin, pos47, pos1), #Copy X,Y,Z pos
    (position_rotate_z, pos47, ":rot_z"), #Copying X-Rotation is likely possible, but I haven't figured it out yet
    
    (mission_cam_set_mode, 1, 0, 0), #Manual?

    (mission_cam_set_position, pos47),
    
    (team_give_order, 0, grc_everyone, mordr_charge),
    (team_give_order, 1, grc_everyone, mordr_charge),
    (team_give_order, 2, grc_everyone, mordr_charge),
    (team_give_order, 3, grc_everyone, mordr_charge),
  ])
common_move_deathcam = (0, 0, 0,
  [
    (eq, "$deathcam_on", 1),
    (this_or_next|game_key_is_down, gk_move_forward),
    (this_or_next|game_key_is_down, gk_move_backward),
    (this_or_next|game_key_is_down, gk_move_left),
    (this_or_next|game_key_is_down, gk_move_right),
    (this_or_next|key_is_down, key_left_shift),
    (this_or_next|key_is_down, key_left_control),
    (this_or_next|key_is_down, key_numpad_minus),
    (this_or_next|key_is_down, key_numpad_plus),
    (key_clicked, key_home),
  ],
  [
    (set_fixed_point_multiplier, 10000),
    (mission_cam_get_position, pos47),
    
    (try_begin),
      (key_clicked, key_home),
      (position_set_x, pos47, "$deathcam_death_pos_x"),
      (position_set_y, pos47, "$deathcam_death_pos_y"),
      (position_set_z, pos47, "$deathcam_death_pos_z"),
    (try_end),
    
    (assign, ":move_x", 0),
    (assign, ":move_y", 0),
    (assign, ":move_z", 0),
    
    (try_begin),
      (game_key_is_down, gk_move_forward),
      (val_add, ":move_y", 10),
    (try_end),
    (try_begin),
      (game_key_is_down, gk_move_backward),
      (val_add, ":move_y", -10),
    (try_end),

    (try_begin),
      (game_key_is_down, gk_move_right),
      (val_add, ":move_x", 10),
    (try_end),
    (try_begin),
      (game_key_is_down, gk_move_left),
      (val_add, ":move_x", -10),
    (try_end),

    (try_begin),
      (key_is_down, key_left_shift),
      (val_add, ":move_z", 10),
    (try_end),
    (try_begin),
      (key_is_down, key_left_control),
      (val_add, ":move_z", -10),
    (try_end),
    
    (try_begin),
      (key_is_down, key_space),
      (val_mul, ":move_x", 4),
      (val_mul, ":move_y", 4),
      (val_mul, ":move_z", 2),
    (try_end),
    
    (position_move_x, pos47, ":move_x"),
    (position_move_y, pos47, ":move_y"),
    (position_move_z, pos47, ":move_z"),
    
    (mission_cam_set_position, pos47),
    
    (try_begin),
      (key_is_down, key_numpad_minus),
      (ge, "$deathcam_sensitivity_x", 4), #Negative check.
      (ge, "$deathcam_sensitivity_y", 3),
      (val_sub, "$deathcam_sensitivity_x", 4),
      (val_sub, "$deathcam_sensitivity_y", 3),
      (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
      (store_mod, reg7, "$deathcam_sensitivity_y", 75),
      (try_begin),
        (eq, reg6, 0),
        (eq, reg7, 0),
        (assign, reg8, "$deathcam_sensitivity_x"),
        (assign, reg9, "$deathcam_sensitivity_y"),
        (display_message, "@Sensitivity - 25% ({reg8}, {reg9})"),
      (try_end),
    (else_try),
      (key_is_down, key_numpad_plus),
      (val_add, "$deathcam_sensitivity_x", 4),
      (val_add, "$deathcam_sensitivity_y", 3),
      (store_mod, reg6, "$deathcam_sensitivity_x", 100), #25% increments
      (store_mod, reg7, "$deathcam_sensitivity_y", 75),
      (try_begin),
        (eq, reg6, 0),
        (eq, reg7, 0),
        (assign, reg8, "$deathcam_sensitivity_x"),
        (assign, reg9, "$deathcam_sensitivity_y"),
        (display_message, "@Sensitivity + 25% ({reg8}, {reg9})"),
      (try_end),
    (try_end),
  ])
common_rotate_deathcam = (0, 0, 0,
  [
    (eq, "$deathcam_on", 1),
  ],
  [
    (set_fixed_point_multiplier, 10000), #Extra Precision
    
    (try_begin),
      (this_or_next|is_presentation_active, "prsnt_battle"), #Opened (mouse must move)
      (this_or_next|key_clicked, key_escape), #Menu
      (this_or_next|key_clicked, key_q), #Notes, etc
      (key_clicked, key_tab), #Retreat
      (eq, "$deathcam_prsnt_was_active", 0),
      (assign, "$deathcam_prsnt_was_active", 1),
      (assign, "$deathcam_mouse_last_notmoved_x", "$deathcam_mouse_notmoved_x"),
      (assign, "$deathcam_mouse_last_notmoved_y", "$deathcam_mouse_notmoved_y"),
    (try_end),
    
    (neg|is_presentation_active, "prsnt_battle"),
    
    (mouse_get_position, pos1), #Get and set mouse position
    (position_get_x, reg1, pos1),
    (position_get_y, reg2, pos1),
    
    (mission_cam_get_position, pos47),
    
    (assign, ":continue", 0),
    
    (try_begin),
      (neq, "$deathcam_prsnt_was_active", 1),
      (try_begin), #Check not moved
        (eq, reg1, "$deathcam_mouse_last_x"),
        (eq, reg2, "$deathcam_mouse_last_y"),
        (this_or_next|neq, reg1, "$deathcam_mouse_notmoved_x"),
        (neq, reg2, "$deathcam_mouse_notmoved_y"),
        (val_add, "$deathcam_mouse_notmoved_counter", 1),
        (try_begin), #Notmoved for n cycles
          (ge, "$deathcam_mouse_notmoved_counter", 15),
          (assign, "$deathcam_mouse_notmoved_counter", 0),
          (assign, "$deathcam_mouse_notmoved_x", reg1),
          (assign, "$deathcam_mouse_notmoved_y", reg2),
        (try_end),
      (else_try), #Has moved
        (assign, ":continue", 1),
        (assign, "$deathcam_mouse_notmoved_counter", 0),
      (try_end),
      (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
      (assign, "$deathcam_mouse_last_y", reg2),
    (else_try), #prsnt was active
      (try_begin),
        (neq, reg1, "$deathcam_mouse_last_x"), #Is moving
        (neq, reg2, "$deathcam_mouse_last_y"),
        (store_sub, ":delta_x2", reg1, "$deathcam_mouse_last_notmoved_x"), #Store pos difference
        (store_sub, ":delta_y2", reg2, "$deathcam_mouse_last_notmoved_y"),
        (is_between, ":delta_x2", -10, 11), #when engine recenters mouse, there is a small gap
        (is_between, ":delta_y2", -10, 11), #usually 5 pixels, but did 10 to be safe.
        (assign, "$deathcam_prsnt_was_active", 0),
        (assign, "$deathcam_mouse_notmoved_x", "$deathcam_mouse_last_notmoved_x"),
        (assign, "$deathcam_mouse_notmoved_y", "$deathcam_mouse_last_notmoved_y"),
      (else_try),
        (assign, "$deathcam_mouse_notmoved_x", reg1),
        (assign, "$deathcam_mouse_notmoved_y", reg2),
      (try_end),
      (assign, "$deathcam_mouse_last_x", reg1), #Next cycle, this pos = last pos
      (assign, "$deathcam_mouse_last_y", reg2),
    (try_end),
    
    (eq, ":continue", 1), #Else exit
    
    (store_sub, ":delta_x", reg1, "$deathcam_mouse_notmoved_x"), #Store pos difference
    (store_sub, ":delta_y", reg2, "$deathcam_mouse_notmoved_y"),

    (val_mul, ":delta_x", "$deathcam_sensitivity_x"),
    (val_mul, ":delta_y", "$deathcam_sensitivity_y"),
    (val_clamp, ":delta_x", -80000, 80001), #8
    (val_clamp, ":delta_y", -60000, 60001), #6
    
    (store_mul, ":neg_rotx", "$deathcam_total_rotx", -1),
    (position_rotate_x_floating, pos47, ":neg_rotx"), #Reset x axis to initial state
    
    (position_rotate_y, pos47, 90), #Barrel roll by 90 degrees to inverse x/z axis
    (position_rotate_x_floating, pos47, ":delta_x"), #Rotate simulated z axis, Horizontal
    (position_rotate_y, pos47, -90), #Reverse
    
    (position_rotate_x_floating, pos47, "$deathcam_total_rotx"), #Reverse
    
    (position_rotate_x_floating, pos47, ":delta_y"), #Vertical
    (val_add, "$deathcam_total_rotx", ":delta_y"), #Fix yaw
    
    (mission_cam_set_position, pos47),
  ])
## Perfectly Smooth, Mouse-Enabled Deathcam end
## CC-D end

#Pavise begin
## CC-D begin: update with refer to PBOD 0.96.3
deploy_pavise = (0, 0, 1,
  [
    (key_clicked, key_g),
    (neg|main_hero_fallen),
  ],
  [
    (get_player_agent_no, ":player_agent"),
    
    (try_begin),
      (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
      #(eq, ":shield_item", "itm_pavise"),
      (is_between, ":shield_item", pavise_begin, pavise_end),
      (agent_get_horse, reg0, ":player_agent"),
      (eq, reg0, -1),
      ##anything else to need to pass??
      
      (agent_set_animation, ":player_agent", "anim_shield_bash_c09"),
      (agent_play_sound, ":player_agent", "snd_put_back_shield"),
      
      #Get Pavise Prop (for Native heraldic/tableau shields)
      (assign, ":obj_pavise", "spr_pavise"),
      (try_begin),
        (is_between, ":shield_item", pavise_begin, "itm_tab_shield_pavise_c"), #a & b are 'shoddy-er' pavises
        (assign, ":obj_pavise", "spr_pavise_2"),
      (else_try),
        (is_between, ":shield_item", "itm_tab_shield_pavise_c", "itm_pavise"),
        (assign, ":obj_pavise", "spr_pavise_1"),
      (else_try),
        (assign, ":obj_pavise", "spr_pavise"),
      (try_end),
      
      #Spawn Prop Instance
      (agent_get_position, pos1, ":player_agent"),
      (position_move_y, pos1, 75),
      (set_spawn_position, pos1),
      (spawn_scene_prop, ":obj_pavise"),#pavise spawn
      
      (agent_unequip_item, ":player_agent", ":shield_item"),
    (try_end),
	
	#occc start
    (try_begin),
      (key_is_down, key_left_control),
	  (display_message,"@Companions, deploy pavise!"),
      (try_for_agents, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (troop_is_hero, ":troop_id"),#only heroes can deploy pavise
		(this_or_next|is_between,":troop_id",kingdom_ladies_begin,kingdom_ladies_end),#ladies
		(is_between,":troop_id",companions_begin,companions_end),
		(neq, ":player_agent", ":agent_no"),
		(agent_is_ally, ":agent_no"),

		(agent_get_wielded_item, ":shield_item", ":agent_no", 1),
		(is_between, ":shield_item", pavise_begin, pavise_end),
		(agent_get_horse, reg0, ":agent_no"),
		(eq, reg0, -1),
		##anything else to need to pass??
      
		(agent_set_animation, ":agent_no", "anim_shield_bash_c09"),
		(agent_play_sound, ":agent_no", "snd_put_back_shield"),
      
		#Get Pavise Prop (for Native heraldic/tableau shields)
		(assign, ":obj_pavise", "spr_pavise"),
		(try_begin),
			(is_between, ":shield_item", pavise_begin, "itm_tab_shield_pavise_c"), #a & b are 'shoddy-er' pavises
			(assign, ":obj_pavise", "spr_pavise_2"),
		(else_try),
			(is_between, ":shield_item", "itm_tab_shield_pavise_c", "itm_pavise"),
			(assign, ":obj_pavise", "spr_pavise_1"),
		(else_try),
			(assign, ":obj_pavise", "spr_pavise"),
		(try_end),
      
		#Spawn Prop Instance
		(agent_get_position, pos1, ":agent_no"),
		(position_move_y, pos1, 75),
		(set_spawn_position, pos1),
		(spawn_scene_prop, ":obj_pavise"),#pavise spawn
      
		(agent_unequip_item, ":agent_no", ":shield_item"),
	  (try_end),
	(try_end),

  ])
## CC-D end
#Pavise end

custom_commander_commom_triggers = [
    #custom_commander_camera,  ## CC-D: camera integrate
    custom_commander_give_hero_extra_wp,#ACHTUNG THIS IS THE EXACTLY CAUSE OF BUG
    custom_commander_change_weather,
    custom_commander_npc_proficiency_limit,
    custom_commander_npc_raise_proficiency,
    custom_commander_cheat_refill_ammo,
    custom_commander_hero_wounded,
    custom_commander_agent_weapons_fix,
    #custom_commander_agent_set_hp,  ## NMCml del
    custom_commander_fill_agent_empty_wpn_slot,
	#OCCC memo... custom commander's operations might cause companion-death happening
    
    ## Auto-Firing weapons mod by ithilienranger
    common_auto_fire_held,
    common_auto_fire_clicked,
    common_auto_fire,
    ## Auto-Firing weapons mod end

    ## CC-D begin
    ccd_init_variables,
    
    ccd_camera_toggle,
    ccd_free_camera,
    ccd_solid_camera_toggle,
    ccd_solid_camera_main,
    ccd_solid_camera_cruise,
    
    cry_victory,
    cry_victory_call,
    cry_command,
    horse_whistle,
    
    ccd_fire_damage,
    ccd_fire_spawn,
    
    ccd_gunsight,
    
    ccd_individual_modifier,
    ccd_equipped_item_boost,
    
    #ccd_dog_spawn,
    ccd_dog_kill,
    
    common_init_deathcam,
    common_start_deathcam,
    common_move_deathcam,
    common_rotate_deathcam,
    ## CC-D end
    
    deploy_pavise,

    ## Shield Bash
    sp_shield_bash_1,
    sp_shield_bash_2,
    sp_shield_bash_3,
    
    #CC-C begin
    ccc_battle_init,
    ccc_init_troop_hp,
    #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    ccc_healing_item_used,
    ccc_help_msg,
    #ccc_test_z, #CCC_DEBUG
    ccc_set_shield_crouch,
    ccc_shiled_crouch_flag,
    ccc_hard_core_dead_flag,
    ccc_agent_shout_on_mount,
    ccc_player_shout_on_mount,
    ccc_item_damage_effect,
    #CC-C end
	
	#occc start
	occc_AI_kick,
	occc_custom_commander_critical_strike,
	occc_dismemberment_mod_decap,
    
	occc_hit_effects,
	occc_set_agents_variable,
	occc_spawn_agents_setting,
	
	#Extra actions
	occc_troop_cheering,
	occc_play_vaegir_musician,
	occc_spawn_legionary_gurantee_pilum,
	
	occc_onehand_polearm_fix,
	
	jacobhinds_form_square_init,
	jacobhinds_form_square,
	jacobhinds_infantry_square_check,
	
	#occc end

  ]
## CC end

#occc start

custom_commander_commom_triggers_training = [
    #custom_commander_camera,  ## CC-D: camera integrate
    custom_commander_give_hero_extra_wp,
    custom_commander_change_weather,
    custom_commander_npc_proficiency_limit,
    custom_commander_npc_raise_proficiency,
    custom_commander_cheat_refill_ammo,
    custom_commander_hero_wounded,
    custom_commander_agent_weapons_fix,
    #custom_commander_agent_set_hp,  ## NMCml del
    custom_commander_fill_agent_empty_wpn_slot,
    
    ## Auto-Firing weapons mod by ithilienranger
    common_auto_fire_held,
    common_auto_fire_clicked,
    common_auto_fire,
    ## Auto-Firing weapons mod end

    ## CC-D begin
    ccd_init_variables,
    
    ccd_camera_toggle,
    ccd_free_camera,
    ccd_solid_camera_toggle,
    ccd_solid_camera_main,
    ccd_solid_camera_cruise,
    
    cry_victory,
    cry_victory_call,
    cry_command,
    horse_whistle,
    
    ccd_fire_damage,
    ccd_fire_spawn,
    
    ccd_gunsight,
    
    ccd_individual_modifier,
    ccd_equipped_item_boost,
    
    #ccd_dog_spawn,
    ccd_dog_kill,
    
    common_init_deathcam,
    common_start_deathcam,
    common_move_deathcam,
    common_rotate_deathcam,
    ## CC-D end
    
    deploy_pavise,

    ## Shield Bash
    sp_shield_bash_1,
    sp_shield_bash_2,
    sp_shield_bash_3,
    
    #CC-C begin
    ccc_battle_init,
    ccc_init_troop_hp,
    #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    ccc_healing_item_used,
    ccc_help_msg,
    #ccc_test_z, #CCC_DEBUG
    ccc_set_shield_crouch,
    ccc_shiled_crouch_flag,
    #ccc_hard_core_dead_flag, #occc you wont die in training... is this unrealistic? bah.
    ccc_agent_shout_on_mount,
    ccc_player_shout_on_mount,
    ccc_item_damage_effect,
    #CC-C end
	
	#occc start
	occc_custom_commander_critical_strike,
	occc_AI_kick,
	occc_onehand_polearm_fix,
	occc_hit_effects,
	occc_spawn_agents_setting,

	#occc end

  ]

custom_commander_commom_triggers_without_kick = [
    #custom_commander_camera,  ## CC-D: camera integrate
    custom_commander_give_hero_extra_wp,
    custom_commander_change_weather,
    custom_commander_npc_proficiency_limit,
    custom_commander_npc_raise_proficiency,
    custom_commander_cheat_refill_ammo,
    custom_commander_hero_wounded,
    custom_commander_agent_weapons_fix,
    #custom_commander_agent_set_hp,  ## NMCml del
    custom_commander_fill_agent_empty_wpn_slot,
    
    ## Auto-Firing weapons mod by ithilienranger
    common_auto_fire_held,
    common_auto_fire_clicked,
    common_auto_fire,
    ## Auto-Firing weapons mod end

    ## CC-D begin
    ccd_init_variables,
    
    ccd_camera_toggle,
    ccd_free_camera,
    ccd_solid_camera_toggle,
    ccd_solid_camera_main,
    ccd_solid_camera_cruise,
    
    cry_victory,
    cry_victory_call,
    cry_command,
    horse_whistle,
    
    ccd_fire_damage,
    ccd_fire_spawn,
    
    ccd_gunsight,
    
    ccd_individual_modifier,
    ccd_equipped_item_boost,
    
    #ccd_dog_spawn,
    ccd_dog_kill,
    
    common_init_deathcam,
    common_start_deathcam,
    common_move_deathcam,
    common_rotate_deathcam,
    ## CC-D end
    
    deploy_pavise,

    ## Shield Bash
    sp_shield_bash_1,
    sp_shield_bash_2,
    sp_shield_bash_3,
    
    #CC-C begin
    ccc_battle_init,
    ccc_init_troop_hp,
    #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    ccc_healing_item_used,
    ccc_help_msg,
    #ccc_test_z, #CCC_DEBUG
    ccc_set_shield_crouch,
    ccc_shiled_crouch_flag,
    ccc_hard_core_dead_flag,
    ccc_agent_shout_on_mount,
    ccc_player_shout_on_mount,
    ccc_item_damage_effect,
    #CC-C end
	#occc start
	#occc_item_passive_effect,
	occc_hit_effects,
	occc_spawn_agents_setting,

	#occc end
  ]
  #occc end

##diplomacy begin
#jacobhinds form musket square BEGIN
dplmc_horse_speed = (
  1.1, 0, 0, [(eq, "$g_dplmc_horse_speed", 0)],
  [
  (set_fixed_point_multiplier, 1),
  (try_for_agents, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_get_horse, ":horse_agent", ":agent_no"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (store_agent_hit_points, ":horse_hp",":horse_agent"),
      (store_sub, ":lost_hp", 100, ":horse_hp"),
      (try_begin),
        (le, ":lost_hp", 15),
        (val_div, ":lost_hp", 2),
        (store_add, ":speed_factor", 100, ":lost_hp"),
      (else_try),
        (val_mul, ":lost_hp", 2),
        (val_div, ":lost_hp", 3),
        (store_sub, ":speed_factor", 115, ":lost_hp"),
      (try_end),

	  
	  #makes horses slow near infantry squares
	  (agent_get_position, pos2, ":agent_no"),

	  #find horse speed
	  # (agent_get_speed, pos6, ":horse_agent"),
	  # (init_position, pos7),
	  # (get_distance_between_positions_in_meters, ":velocity", pos6, pos7),

	  #housekeeping
	  # (assign, reg1, ":velocity"),
	  # (display_message, "@{reg1}"),
	  #housekeeping

	  (try_for_range, ":square_id", 1, 51),
		(troop_get_slot, ":pos_x", "trp_jacobhinds_form_musket_square_pos_x", ":square_id"),
		(troop_get_slot, ":pos_y", "trp_jacobhinds_form_musket_square_pos_y", ":square_id"),
		(troop_get_slot, ":square_size", "trp_jacobhinds_form_musket_square_size",  ":square_id"),
		(troop_get_slot, ":is_ally", "trp_jacobhinds_form_musket_square_is_ally",  ":square_id"),
		(gt, ":square_size", 0),
		# (gt, ":pos_x", 0),
		# (gt, ":pos_y", 0),
		
		(assign, ":continue", 0),
 
		(try_begin),
			(agent_is_ally, ":agent_no", 1), #if agent and square are both allies
			(eq, ":is_ally", 1), 
			(assign, ":continue", 1), 
		(else_try),
			(agent_is_ally, ":agent_no", 0), #if neither agent nor square are allies
			(eq, ":is_ally", 0), 
			(assign, ":continue", 1), 
		(try_end),

		(eq, ":continue", 0),

		(position_set_x, pos1, ":pos_x"),
		(position_set_y, pos1, ":pos_y"),

		(get_distance_between_positions_in_meters, ":distance", pos1, pos2), 

		#find infantry square radius
		#if closer than (size+32/24)+5, slow down
		#(inverse of original algebra, halved to make sure it doesn't
		#extend too far on both sides, with a little room (5m) for horses)

		(store_add, ":square_radius", ":square_size", 32),
		(val_div, ":square_radius", 24),
		(val_add, ":square_radius", 5),
		#(val_add, ":square_radius", 50),
		(lt, ":distance", ":square_radius"),

		#housekeeping
		# (assign, reg1, ":distance"),
		# (assign, reg2, ":square_size"),
		# (display_message, "@slowing down"),
		#housekeeping

		(val_sub, ":speed_factor", 80),
		(val_max, ":speed_factor", 0),
		# (store_random_in_range, ":rand", 0, 6), #1/6 chance to rear horse
		# (try_begin),
			# (eq, ":rand", 0),
			# (agent_set_animation, ":horse_agent", "anim_horse_rear"),
			# (agent_set_animation, ":agent_no", "anim_ride_rear"),
		# (try_end),
	  (try_end),
	  

      (agent_get_troop_id, ":agent_troop", ":agent_no"),
      (store_skill_level, ":skl_level", skl_riding, ":agent_troop"),
      (store_mul, ":speed_multi", ":skl_level", 2),
      (val_add, ":speed_multi", 100),
      (val_mul, ":speed_factor", ":speed_multi"),
      (val_div, ":speed_factor", 100),
      (agent_set_horse_speed_factor, ":agent_no", ":speed_factor"),
    (try_end),
  (try_end),
  ])
#jacobhinds form musket square END

## CC-D begin: camera integrate
#dplmc_death_camera = (
#  0, 0, 0,
#  [(eq, "$g_dplmc_battle_continuation", 0),
#   (main_hero_fallen),
#   (eq, "$g_ccd_death_camera_select", 0),
#   (eq, "$g_dplmc_cam_activated", 1),
#  ],
#  [
#    #(agent_get_look_position, pos1, ":player_agent"),
#
#    ## CC-D begin: move
#    #(get_player_agent_no, ":player_agent"),
#    #(agent_get_team, ":player_team", ":player_agent"),
#    #(try_begin),
#      ##(eq, "$g_dplmc_charge_when_dead", 1),  ##CC-C
#      #(team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
#      #(neq, ":cur_order", mordr_charge),
#      
#      ##CC-C begin
#      #(team_set_order_listener, ":player_team", grc_everyone),
#      #(display_message,"@Move freely"),
#      #(call_script, "script_ccc_team_clear_destination", ":player_team"),
#      
#      #(display_message,"@Use the free"),
#      #(call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
#      ##CC-C end
#      #(team_give_order, ":player_team", grc_everyone, mordr_charge),
#    #(try_end),
#    ## CC-D end
#
#    (mission_cam_get_position, pos1),
#
#    (assign, "$g_camera_rotate_x", 0),
#    (assign, "$g_camera_rotate_y", 0),
#    (assign, "$g_camera_rotate_z", 0),
#    (assign, "$g_camera_x", 0),
#    (assign, "$g_camera_y", 0),
#    (assign, "$g_camera_z", 0),
#
#    ## CC-D begin: refine death camera
#    (try_begin),
#      (key_is_down, key_a),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_x", 10),
#    (try_end),
#    (try_begin),
#      (key_is_down, key_d),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_x", 10),
#    (try_end),
#
#    (try_begin),
#      (key_is_down, key_w),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_y", 10),
#    (try_end),
#    (try_begin),
#      (key_is_down, key_s),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_y", 10),
#    (try_end),
#
#    (try_begin),
#      (this_or_next|key_is_down, key_e),
#      (key_is_down, key_numpad_plus),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_z", 10),
#    (try_end),
#    (try_begin),
#      (this_or_next|key_is_down, key_x),
#      (key_is_down, key_numpad_minus),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_z", 10),
#    (try_end),
#
#    (try_begin),
#      (key_is_down, key_numpad_6),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_rotate_z", 1),
#    (try_end),
#    (try_begin),
#      (key_is_down, key_numpad_4),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_rotate_z", 1),
#    (try_end),
#
#    (try_begin),
#      (key_is_down, key_numpad_1),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_rotate_y", 1),
#    (try_end),
#    (try_begin),
#      (key_is_down, key_numpad_3),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_rotate_y", 1),
#    (try_end),
#
#    (try_begin),
#      (key_is_down, key_numpad_8),
#      (mission_cam_set_mode, 1),
#      (val_add, "$g_camera_rotate_x", 1),
#    (try_end),
#    (try_begin),
#      (key_is_down, key_numpad_2),
#      (mission_cam_set_mode, 1),
#      (val_sub, "$g_camera_rotate_x", 1),
#    (try_end),
#
#    (try_begin),
#      (key_is_down, key_space),
#      (val_mul, "$g_camera_x", 4),
#      (val_mul, "$g_camera_y", 4),
#      (val_mul, "$g_camera_z", 2),
#      (val_mul, "$g_camera_rotate_x", 4),
#      (val_mul, "$g_camera_rotate_y", 4),
#      (val_mul, "$g_camera_rotate_z", 2),
#    (try_end),
#
#    (position_move_x, pos1, "$g_camera_x"),
#    (position_move_y, pos1, "$g_camera_y"),
#    (position_move_z, pos1, "$g_camera_z"),
#    (position_rotate_x, pos1, "$g_camera_rotate_x"),
#    (position_rotate_y, pos1, "$g_camera_rotate_y"),
#    (position_rotate_z, pos1, "$g_camera_rotate_z"),
#    
#    (val_add, "$g_camera_rotx", "$g_camera_rotate_x"),
#    (try_begin),
#      (neq, "$g_camera_rotate_z", 0),
#      (store_mul, ":minusrotx", "$g_camera_rotx", -1),
#      (position_rotate_x, pos1, ":minusrotx"),
#      (position_rotate_x, pos1, "$g_camera_rotx"),
#    (try_end),
#
#    (try_begin),
#      (game_key_clicked, gk_zoom),
#      (mission_cam_set_mode, 1),
#      (position_get_rotation_around_y, ":cur_roty", pos1),
#      (val_mul, ":cur_roty", -1),
#      (position_rotate_y, pos1, ":cur_roty"),
#      (position_get_rotation_around_x, ":cur_rotx", pos1),
#      (val_mul, ":cur_rotx", -1),
#      (position_rotate_x, pos1, ":cur_rotx"),
#      (position_get_rotation_around_y, ":cur_roty", pos1),
#      (val_mul, ":cur_roty", -1),
#      (position_rotate_y, pos1, ":cur_roty"),
#      
#      (position_set_z_to_ground_level, pos1),
#      (position_move_z, pos1, 200),
#    (try_end),
#
#    (mission_cam_set_position, pos1),
#
#    (try_begin),
#      (this_or_next|game_key_clicked, gk_view_char),
#      #(this_or_next|game_key_clicked, gk_zoom),
#      (game_key_clicked, gk_cam_toggle),
#      (mission_cam_set_mode, 0),
#      (assign, "$g_camera_rotx", 0),
#    (try_end),
#    ## CC-D end
#  ])
## CC-D end

dplmc_battle_mode_triggers = [
    dplmc_horse_speed,
    #dplmc_death_camera,  ## CC-D: camera integrate
  ]
##diplomacy end


ccc_lead_triggers = [
    ccc_init_reinforcement,
    ccc_lead_reinforcement,
    ccc_player_ai_flag,
    ccc_agent_weapons_set,
    ccc_agent_weapons_change,
    ccc_agent_start_formation,
    ccc_stand_on,
    #ccc_stand_off,  ## CC-D del: integrate ccc_stand_on
    ccc_weapons_priority_all,
    ccc_weapons_priority_sword,
    ccc_weapons_priority_polearm,
    ccc_weapons_priority_range,
    ccc_weapons_priority_melee,
    ## CC-D begin
    ccd_lead_spawn_change,
    ccd_lead_spawn_another_entry,
    ## CC-D end
]
       
ccc_siege_triggers = [
    ccc_player_ai_flag,
    ccc_agent_weapons_set,
    ccc_agent_weapons_change,
    #ccc_agent_start_formation,
    ccc_stand_on,
    #ccc_stand_off,  ## CC-D del: integrate ccc_stand_on
    ccc_weapons_priority_all,
    ccc_weapons_priority_sword,
    ccc_weapons_priority_polearm,
    ccc_weapons_priority_range,
    ccc_weapons_priority_melee,
	occc_siege_lance_switch,#occc
]
	 
#CC-C begin
# Set Initialize
ccc_cave_set_init = (0, 0, ti_once, [],
[
#CC-C begin Mission Global
  (assign, "$g_ccc_stage", 0), #0:Start-->1:Stop Spawn-->99:Win Flg On
  (assign, "$g_ccc_kill_enemy_cnt", 0),
  (assign, "$g_ccc_spawned_enemy_cnt", "$g_ccc_spawn_start"),
  (assign, "$g_ccc_boss_spawned_flag",0),
  (assign, "$g_ccc_spawn_max_enemy_add_boss", "$g_ccc_spawn_max_enemy"),
  (assign,"$ccc_help_msg_str","str_ccc_help_message_cave"),
  
  (try_begin),
    (gt, "$g_ccc_spawn_max_enemy",1),
    (gt, "$g_ccc_troop_id_boss",1),
    (val_add, "$g_ccc_spawn_max_enemy_add_boss", "$g_ccc_spawn_boss"),
    (try_begin),
    (gt, "$g_ccc_troop_id_boss_ss",1),
    (val_add, "$g_ccc_spawn_max_enemy_add_boss", "$g_ccc_spawn_boss_ss"),
  	   (try_end),  
	 (try_end),	 	 
		
  (party_clear,"p_total_enemy_casualties"),
  (party_clear,"p_temp_casualties"),
])

# tab show info
ccc_cave_tab_show_info = (ti_tab_pressed, 0, 0, [], 
[
  (assign, reg0, "$g_ccc_kill_enemy_cnt"),
  (assign, reg1, "$g_ccc_spawned_enemy_cnt"),
  (assign, reg2, "$g_ccc_spawn_max_enemy_add_boss"),
  (store_mission_timer_a,reg3),
  (assign, reg5, "$g_ccc_party_lost_alive_num"),
  (assign, reg6, "$g_ccc_elapsed_sec"),
  
  (assign,":party_alive_cnt",0),
  (try_for_agents, ":agent_id"),
    (agent_is_alive, ":agent_id"),
    (agent_get_team, ":agent_team", ":agent_id"),
    (eq, ":agent_team", "p_main_party"),
    (val_add, ":party_alive_cnt",1),
  (try_end),
  (assign, reg4, ":party_alive_cnt"),
		
    (try_begin),
      (gt,"$ccc_cave_flag",0),
      (display_message, "@Killed/Spawned:{reg0}/{reg1} Elapsed:{reg3}sec"),
    (else_try),	
      (display_message, "@Killed/Spawned/About Max Spawn:{reg0}/{reg1}/{reg2}"),
    (try_begin),
      (eq, "$g_ccc_elapsed_sec_flag", 1),
      (display_message, "@Party alives/Lost:{reg4}/{reg5} Elapsed/Win:{reg3}/{reg6}sec"),
    (else_try),
      (eq, "$g_ccc_elapsed_sec_flag", 2),
      (display_message, "@Party alives/Lost:{reg4}/{reg5} Elapsed/Lost:{reg3}/{reg6}sec"),
    (else_try),
      (display_message, "@Party alives/Lost:{reg4}/{reg5} Elapsed:{reg3}sec"),
       (try_end),
    (try_end),
])
     
# key_b surrender?
#ccc_cave_key_b_surrender = (0, 0, 0,[(key_is_down, key_left_control),(key_is_down, key_b),],  ## CC-D
#[(question_box,"@Do_you_wish_to_surrender"),])
   
#ccc_cave_question_answered = (ti_question_answered, 0, 0, [],
#[(store_trigger_param_1,":answer"),(eq,":answer",0),
     ## CC-D begin: over hp fix
#     (call_script, "script_ccc_last_agent_hp_fix"),
     ## CC-D end
#  (finish_mission),])

# key_b surrender?
## CC-D begin
ccc_cave_key_b_surrender = (0, 0, 0,
  [
    (key_is_down, key_left_control),
    (key_is_down, key_b),
  ], [
    (assign, "$temp_3", -1),
    (call_script, "script_ccc_check_has_item", "trp_player", "itm_ccd_return_stone"),
    (assign, ":num_stone", reg0),
    (try_begin),
      (gt, ":num_stone", 0),
      (assign, "$temp_3", ":num_stone"),
      (assign, reg2, ":num_stone"),
      (store_sub, reg3, ":num_stone", 1),
      (question_box, "@You have {reg2} return {reg3?stones:stone}.^Do you want to jump to start point by the stone power?"),
    (else_try),
      (question_box, "@Do you wish to surrender?"),
    (try_end),
  ])

ccc_cave_question_answered = (ti_question_answered, 0, 0, [],
  [
    (store_trigger_param_1, ":answer"),
    (try_begin),
      (eq, ":answer", 0),
      (le, "$temp_3", 0),
      ## CC-D begin: over hp fix
      (call_script, "script_ccc_last_agent_hp_fix"),
      ## CC-D end
      (finish_mission),
    (else_try),
      (eq, ":answer", 0),
      (gt, "$temp_3", 0),
      (assign, "$temp_3", -1),
      (troop_remove_item, "trp_player", "itm_ccd_return_stone"),
      (get_player_agent_no, ":player_agent"),
      (agent_get_position, pos2, ":player_agent"),
      (particle_system_burst, "psys_pistol_smoke", pos2, 100),
      (agent_get_entry_no, ":entry_no", ":player_agent"),
      (entry_point_get_position, pos1, ":entry_no"),
      (agent_set_position, ":player_agent", pos1),
      (play_sound_at_position, "snd_ccd_ghost", pos1),
    (else_try),
      #(neq, ":answer", 0),
      (gt, "$temp_3", 0),
      (assign, "$temp_3", -1),
      (question_box, "@Do you wish to surrender?"),
    (try_end),
  ])
## CC-D end

# Spawn
ccc_cave_spawn = (ti_on_agent_spawn, 0, 0, [],
[
  (store_trigger_param_1, ":agent_no"),
                
     (try_begin), 
    (agent_is_human, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_non_player,":agent_no"),
    (agent_get_team, ":agent_team", ":agent_no"),
    (eq, ":agent_team","p_temp_party"),
# Add Spawn enemy          
    (val_add, "$g_ccc_spawned_enemy_cnt",1),
# AI Set
    (ge, "$g_ccc_battle_ai", 0),
    (agent_get_position, pos4, ":agent_no"),
                                (try_begin),
      (eq,"$g_ccc_change_battle_ai_flg",1),
      (agent_set_scripted_destination, ":agent_no", pos4, 1),
                                (else_try),
      (eq,"$g_ccc_change_battle_ai_flg",2), #LOL
      (agent_set_attack_action,":agent_no", "$g_ccc_ai_value1", "$g_ccc_ai_value2"),
      (else_try),
      (eq,"$g_ccc_change_battle_ai_flg",3), #LOL
      (agent_set_defend_action,":agent_no", "$g_ccc_ai_value1", "$g_ccc_ai_value2"),
                              (try_end),
# Recover Hp
    (agent_set_hit_points, ":agent_no", 100, 0),
          (try_end),
])

## AI change elapsed sec
ccc_cave_ai_change_elapsed_sec = (1, 0, 0, 
[
    (eq, "$g_ccc_battle_ai", 1),
    (ge, "$g_ccc_change_battle_ai_elapsed_sec", 1),
    (neq, "$g_ccc_change_battle_ai_flg", 0),
    
    (store_mission_timer_a,":cur_time"),
    (store_div,":timer_a_tmp",":cur_time","$g_ccc_change_battle_ai_elapsed_sec"),
    (val_mul,":timer_a_tmp","$g_ccc_change_battle_ai_elapsed_sec"),
    (eq, ":cur_time",":timer_a_tmp"),
],
[
    (try_for_agents, ":bandit_id"),
      (agent_is_alive, ":bandit_id"),          
      (agent_get_team, ":agent_team_1", ":bandit_id"),
      (eq, ":agent_team_1", "p_temp_party"),
      (agent_clear_scripted_mode, ":bandit_id"),
    (try_end),
# once          
    (try_begin),
      (eq, "$g_ccc_change_battle_ai_flg", -1),
      (assign, "$g_ccc_battle_ai", 0),
        (else_try),
      (neq, "$g_ccc_change_battle_ai_elapsed_sec", "$g_ccc_change_battle_ai_flg"),
      (assign, "$g_ccc_change_battle_ai_elapsed_sec", "$g_ccc_change_battle_ai_flg"),
        (try_end),
    #(display_message, "@{!}DEBUG AI charge"),
])
     
## AI near player pt change ai mode
ccc_cave_ai_change_near_prayer = (1, 0, 0, 
[(eq, "$g_ccc_battle_ai", 1),],
[
  (try_for_agents, ":bandit_id"),
    (agent_is_alive, ":bandit_id"),          
    (agent_get_team, ":agent_team_1", ":bandit_id"),
    (eq, ":agent_team_1", 1),
    (agent_is_in_special_mode, ":bandit_id"),
    (agent_is_human, ":bandit_id"),

    (agent_get_position, pos0, ":bandit_id"),
    (try_for_agents, ":player_team_agent_id"),
      (agent_is_alive, ":player_team_agent_id"),
      (agent_get_team, ":agent_team_2", ":player_team_agent_id"),
      (eq, ":agent_team_2", 0),
      (agent_is_human, ":player_team_agent_id"),

      (store_agent_hit_points, ":bandit_hit_points", ":bandit_id"),
      
      (assign, ":continue", 0),
         (try_begin),
        (lt, ":bandit_hit_points", 100),

        (try_for_agents, ":bandit_2_id"),
          (agent_is_alive, ":bandit_2_id"),  
          (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
          (eq, ":bandit_2_team", 1),
          (neq, ":bandit_id", ":bandit_2_id"),
          (agent_is_in_special_mode, ":bandit_2_id"),
          (agent_is_human, ":bandit_2_id"),

          (agent_get_position, pos1, ":bandit_id"),
          (agent_get_position, pos2, ":bandit_2_id"),                        
          (get_distance_between_positions, ":distance", pos1, pos2),
          (le, ":distance", 1000),

          (agent_clear_scripted_mode, ":bandit_2_id"),  
         (try_end),

        (assign, ":continue", 1),
      (else_try),  
        (agent_get_position, pos1, ":bandit_id"),
        (agent_get_position, pos2, ":player_team_agent_id"),                        
        (get_distance_between_positions, ":distance", pos1, pos2),                                                                        
        (le, ":distance", 4000),
  
        (try_for_agents, ":bandit_2_id"),
          (agent_is_alive, ":bandit_2_id"),  
          (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
          (eq, ":bandit_2_team", 1),
          (neq, ":bandit_id", ":bandit_2_id"),
          (agent_is_in_special_mode, ":bandit_2_id"),
          (agent_is_human, ":bandit_2_id"),
      
          (agent_get_position, pos1, ":bandit_id"),
          (agent_get_position, pos2, ":bandit_2_id"),                        
          (get_distance_between_positions, ":distance", pos1, pos2),
          (le, ":distance", 1000),
      
          (agent_clear_scripted_mode, ":bandit_2_id"),  
        (try_end),                
      
        (assign, ":continue", 1),
      (try_end),  

      (eq, ":continue", 1),
      
      (agent_clear_scripted_mode, ":bandit_id"),            
         (try_end),
  (try_end),
])
    
# timer_a
ccc_cave_spawn_interval_a = (1, 0, 0, 
[
    (ge,"$g_ccc_troop_id_a",1),
    (eq,"$g_ccc_stage", 0),
      
    (store_mission_timer_a,":cur_time"),
    (ge,"$g_ccc_timer_a",1),
       
    (store_div,":timer_a_tmp",":cur_time","$g_ccc_timer_a"),
    (val_mul,":timer_a_tmp","$g_ccc_timer_a"),
    (eq, ":cur_time",":timer_a_tmp"),
],
[          
    (store_current_scene, ":cur_scene"), 
    (modify_visitors_at_site, ":cur_scene"),
	  
    (try_for_range, ":it", 0, "$g_ccc_spawn_a"),            
      (store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
      (neg|entry_point_is_auto_generated,":random_entry_point"),
      (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_a", 1),
    (else_try),
      (val_sub,":it",1),
    (try_end),
])
	  
# timer_b
ccc_cave_spawn_interval_b = (1, 0, 0, 
[
    (ge,"$g_ccc_troop_id_b",1),
    (eq,"$g_ccc_stage", 0),
  
    (store_mission_timer_a,":cur_time"),
  
    (ge,"$g_ccc_timer_b",1),
    
    (store_div,":timer_b_tmp",":cur_time","$g_ccc_timer_b"),
    (val_mul,":timer_b_tmp","$g_ccc_timer_b"),
    (eq, ":cur_time",":timer_b_tmp"),
],
[          
    (store_current_scene, ":cur_scene"), 
    (modify_visitors_at_site, ":cur_scene"),
    
    (try_for_range, ":it", 0, "$g_ccc_spawn_b"),            
      (store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
      (neg|entry_point_is_auto_generated,":random_entry_point"),
      (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_b", 1),
      #(display_message, "@{!}DEBUG timer_spawn_b"),
    (else_try),
      (val_sub,":it",1),
    (try_end),
])

# timer_c
ccc_cave_spawn_interval_c = (1, 0, 0, 
[
    (ge,"$g_ccc_troop_id_c",1),
    (eq,"$g_ccc_stage", 0),
  
    (store_mission_timer_a,":cur_time"),
  
    (ge,"$g_ccc_timer_c",1),
    
    (store_div,":timer_c_tmp",":cur_time","$g_ccc_timer_c"),
    (val_mul,":timer_c_tmp","$g_ccc_timer_c"),
    (eq, ":cur_time",":timer_c_tmp"),
],
[          
    (store_current_scene, ":cur_scene"), 
    (modify_visitors_at_site, ":cur_scene"),
    
    (try_for_range, ":it", 0, "$g_ccc_spawn_c"),            
      (store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
      (neg|entry_point_is_auto_generated,":random_entry_point"),
      (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_c", 1),
      #(display_message, "@{!}DEBUG timer_spawn_c"),
    (else_try),
      (val_sub,":it",1),
    (try_end),
])

# Set "p_total_enemy_casualties" to killd
ccc_cave_dead_troop_add_dead_party = (ti_on_agent_killed_or_wounded, 0, 0, [],
[
  (store_trigger_param_1, ":dead_agent_no"),
  #(store_trigger_param_2, ":killer_agent_no"),
  (store_trigger_param_3, ":is_wounded"),
	 	  
  (try_begin),
    (ge, ":dead_agent_no", 0),
    (agent_is_human, ":dead_agent_no"),
    (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
    (str_store_troop_name, s6, ":dead_agent_troop_id"),
    (try_begin),
      (neg|agent_is_ally, ":dead_agent_no"),
      (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties            
      (try_begin),
        (eq, ":is_wounded", 1),
        (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
      (try_end),
    (try_end),
    (party_add_members, "p_temp_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties            
    (eq, ":is_wounded", 1),
    (party_wound_members, "p_temp_casualties", ":dead_agent_troop_id", 1), 
  (try_end),
])

# Spawn killed timing
ccc_cave_dead_enemy_cnt_and_spawn = (ti_on_agent_killed_or_wounded, 0, 0, 
[
    (store_trigger_param_1, ":dead_agent_no"),

  (agent_is_human, ":dead_agent_no"),
    (neg|agent_is_ally, ":dead_agent_no"),
    (agent_is_non_player, ":dead_agent_no"),
    (agent_get_party_id, ":agent_party", ":dead_agent_no"),
    (neq, ":agent_party", "p_main_party"),
# Add enemy killd cnt
    (val_add, "$g_ccc_kill_enemy_cnt",1),
    
    (eq,"$g_ccc_stage", 0),
    (neq,"$g_ccc_troop_id_killed",0),
],
[
    (store_trigger_param_1, ":dead_agent_no"),

# Spawn killd troop
  (try_begin),
    (eq , "$g_ccc_troop_id_killed", -1),
    (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
    (assign, "$g_ccc_troop_id_killed", ":dead_agent_troop_id"),
  (try_end),
                                                                      
  (store_current_scene, ":cur_scene"), 
  (modify_visitors_at_site, ":cur_scene"),
    
  (try_for_range, ":unused", 0, "$g_ccc_spawn_killed"),            
    (store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
    (neg|entry_point_is_auto_generated,":random_entry_point"),
    (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_killed", 1),
    #(display_message, "@{!}DEBUG Killed Spawn {s6}"),           
  (try_end),
  #no need to adjust courage in bandit lair for now
  #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
])
      
# Change troop type to spawned
# Change a
ccc_cave_change_spawn_interval_a = (1, 0, ti_once, 
[
    (eq, "$g_ccc_stage", 0),
    (ge, "$g_ccc_change_enemy_spawnd_num_a", 1),
    (lt, "$g_ccc_change_enemy_spawnd_num_a", "$g_ccc_spawned_enemy_cnt"),
],
[
    (assign, "$g_ccc_timer_a","$g_ccc_change_timer_a"),
    (assign, "$g_ccc_troop_id_a", "$g_ccc_change_troop_id_a"),
    (assign, "$g_ccc_spawn_a", "$g_ccc_change_spawn_a"),
    #(display_message, "@{!}DEBUG Change Spawn a"),
])
# Change b
ccc_cave_change_spawn_interval_b = (1, 0, ti_once, 
[
    (eq, "$g_ccc_stage", 0),
    (ge, "$g_ccc_change_enemy_spawnd_num_b", 1),
    (lt, "$g_ccc_change_enemy_spawnd_num_b", "$g_ccc_spawned_enemy_cnt"),
],
[
    (assign, "$g_ccc_timer_b","$g_ccc_change_timer_b"),
    (assign, "$g_ccc_troop_id_b", "$g_ccc_change_troop_id_b"),
    (assign, "$g_ccc_spawn_b", "$g_ccc_change_spawn_b"),
    #(display_message, "@{!}DEBUG Change Spawn b"),
])
# Change c
ccc_cave_change_spawn_interval_c = (1, 0, ti_once, 
[
    (eq, "$g_ccc_stage", 0),
    (ge, "$g_ccc_change_enemy_spawnd_num_c", 1),
    (lt, "$g_ccc_change_enemy_spawnd_num_c", "$g_ccc_spawned_enemy_cnt"),
],
[
    (assign, "$g_ccc_timer_c","$g_ccc_change_timer_c"),
    (assign, "$g_ccc_troop_id_c", "$g_ccc_change_troop_id_c"),
    (assign, "$g_ccc_spawn_c", "$g_ccc_change_spawn_c"),
    #(display_message, "@{!}DEBUG Change Spawn c"),
])
      
# Change killed
ccc_cave_change_killd_spawn = (1, 0, ti_once, 
[
    (eq, "$g_ccc_stage", 0),
    (ge, "$g_ccc_change_enemy_spawnd_num_killed", 1),
    (lt, "$g_ccc_change_enemy_spawnd_num_killed", "$g_ccc_spawned_enemy_cnt"),
],
[
    (assign, "$g_ccc_troop_id_killed", "$g_ccc_change_troop_id_killed"),
    (assign, "$g_ccc_spawn_killed", "$g_ccc_change_spawn_killed"),
    #(display_message, "@{!}DEBUG Change Spawn killed"),
])

# Stop Spawne Flg On
ccc_cave_stop_spawn_flg = (1, 0, ti_once,
[
    (eq, "$g_ccc_stage", 0),
    (ge, "$g_ccc_spawn_max_enemy",1),
    (ge,"$g_ccc_spawned_enemy_cnt", "$g_ccc_spawn_max_enemy"),
    (store_mission_timer_a,":cur_time"),
    (ge, ":cur_time", 5),
],
[
    #(display_message, "@Stop Spawn"),
                       (try_begin),
      (eq,"$g_ccc_troop_id_boss",0),
      (assign, "$g_ccc_boss_spawned_flag", 1),
                       (try_end),
    
    (assign, "$g_ccc_stage", 1),
])

## Boss spawn killed num or enemy alivs
ccc_cave_spawn_boss_killed_enemy_or_last_alivs_num = (1, 0, ti_once,
[
    (ge, "$g_ccc_troop_id_boss",1),
    
    (store_mission_timer_a,":cur_time"),
    (ge, ":cur_time", 30),
    
    (assign,":continu",0),
           (try_begin),
      (ge,"$g_ccc_spawn_enemy_alives_boss",1),
      
      (assign,":party_alive_cnt",0),
      (try_for_agents, ":agent_id"),
        (agent_is_alive, ":agent_id"),
        (agent_get_team, ":agent_team", ":agent_id"),
        (eq, ":agent_team", "p_temp_party"),
        (val_add, ":party_alive_cnt",1),
      (try_end),
      
      (le, ":party_alive_cnt", "$g_ccc_spawn_enemy_alives_boss"),
      
      #(display_message, "@[!]DEBUG Boss Spawne alive"),
      (assign,":continu",1),
      (else_try),
        (ge,"$g_ccc_spawn_killed_num_boss",1),
        (ge,"$g_ccc_kill_enemy_cnt","$g_ccc_spawn_killed_num_boss"),
        
        #(display_message, "@[!]DEBUG Boss Spawne kill enemy"),
        (assign,":continu",1),
      (try_end),

    (eq,":continu",1),
],
[
    (try_for_range, ":unused", 0, "$g_ccc_spawn_boss"),            
      (store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
      ## CC-D begin: for boss stage
      (try_begin),
        (store_current_scene, ":cur_scene"),
        (is_between, ":cur_scene", "scn_ccd_random_4a", "scn_ccd_plain_field"),
        (store_sub, ":random_entry_point", "$g_ccc_spawn_upper", 1),
      (try_end),
      ## CC-D end
      (neg|entry_point_is_auto_generated,":random_entry_point"),
      (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_boss", 1),
    (try_end),
# Boss SS spawn
    (try_begin),
      (ge,"$g_ccc_troop_id_boss_ss",1),
      (try_for_range, ":unused", 0, "$g_ccc_spawn_boss_ss"),            
        #(store_random_in_range, ":random_entry_point", "$g_ccc_spawn_lower", "$g_ccc_spawn_upper"),
        (add_visitors_to_current_scene, ":random_entry_point", "$g_ccc_troop_id_boss_ss", 1),
      (try_end),
    (try_end),

    (str_store_troop_name, s6, "$g_ccc_troop_id_boss"),
    (play_sound,"snd_gong"),
    #(assign, reg54, "$g_ccc_spawn_boss"),
    #(display_message, "@Boss Spawne : {s6} {reg54} people"),
    (display_message, "@Boss Spawne : {s6}"),

    (assign,"$g_ccc_boss_spawned_flag",1),
])

# Win! Boss killed everything
ccc_cave_win_boss_killde = (5,0,0,
[
    (eq, "$g_ccc_boss_killd_win", 1),
    (eq, "$g_ccc_boss_spawned_flag",1),
],
[
    (assign,":boss_alive_cnt",0),
    (try_for_agents, ":agent_id"),
      (agent_get_troop_id, ":agent_troop_id", ":agent_id"),
      (eq, ":agent_troop_id", "$g_ccc_troop_id_boss"),
      (agent_is_alive, ":agent_id"),
      (agent_is_human, ":agent_id"),
      (val_add, ":boss_alive_cnt",1),
      (agent_get_team, ":agent_team", ":agent_id"),
      (eq, ":agent_team", "p_temp_party"),

      (assign, reg1, ":agent_team"),
      (str_store_troop_name, s6, ":agent_troop_id"),
    (try_end),

    (try_begin),
      (eq,":boss_alive_cnt",0),
      (display_message, "@Boss killed everything"),
      (assign, "$g_ccc_stage",99),
    (else_try),
      (assign, reg54,":boss_alive_cnt"),
      (display_message, "@Boss alives : {reg54}"),
    (try_end),
])

# Lost! Party is low alive for it lost mission
ccc_cave_lost_party_alives_num_le = (4,0,0, 
[
    (ge, "$g_ccc_party_lost_alive_num",1),
],
[
    (assign,":party_alive_cnt",0),
    (try_for_agents, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (agent_get_team, ":agent_team", ":agent_id"),
      (eq, ":agent_team", "p_main_party"),
      (val_add, ":party_alive_cnt",1),
    (try_end),

    (try_begin),
      (lt, ":party_alive_cnt", "$g_ccc_party_lost_alive_num"),
      (display_message, "@You were not able to defend companioning."),
      ## CC-D begin: over hp fix
      (call_script, "script_ccc_last_agent_hp_fix"),
      ## CC-D end
      (finish_mission),
    (try_end),
])
        
# Lost! You are dead for it lost mission
ccc_cave_lost_you_dead = (4,0,ti_once, 
[
    (main_hero_fallen),
],
[
    (display_message, "@You are dead!"),
     ## CC-D begin: over hp fix
     (call_script, "script_ccc_last_agent_hp_fix"),
     ## CC-D end
    (finish_mission),
])
        
# Set music
ccc_cave_set_music = (0, 0, ti_once, [],
[
    (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
    (set_party_battle_mode),
])
        
# Win! Elapsed sec over for win or lost
ccc_cave_win_or_lost_elapsed_sec = (1,0,ti_once,
[
    (neq, "$g_ccc_elapsed_sec_flag", 0),
    (store_mission_timer_a,":cur_time"),
    (ge, ":cur_time","$g_ccc_elapsed_sec"),
],
[
    (try_begin),
      (eq, "$g_ccc_elapsed_sec_flag", 1),
      (display_message, "@It was finished to defend. "),
      (assign, "$g_ccc_stage",99),
           (else_try),
      (eq, "$g_ccc_elapsed_sec_flag", 2),
      (display_message, "@You are lost! Time Over. "),
       ## CC-D begin: over hp fix
       (call_script, "script_ccc_last_agent_hp_fix"),
       ## CC-D end
           (finish_mission),
    (try_end),
])

# Win! All killd and you arive and no boss and no spawn
ccc_cave_win_killed_all_enemy = (4, 0, ti_once,
[
    (store_mission_timer_a,":cur_time"),
    (ge, ":cur_time", 30),
    
    (assign, ":continu", 0),
    (try_begin),
      (ge, "$g_ccc_spawn_max_enemy", 1),
      (ge, "$g_ccc_spawn_boss", 1),

      (eq, "$g_ccc_stage", 1),
      (eq, "$g_ccc_boss_spawned_flag", 1),
      (assign, ":continu", 1),
    (else_try),
      (eq, "$g_ccc_spawn_max_enemy", 0),
                  
      (ge, "$g_ccc_spawn_boss", 1),
      (eq, "$g_ccc_boss_spawned_flag", 1),
      (assign, ":continu", 1),
    (else_try),
      (eq, "$g_ccc_spawn_max_enemy", 0),
         
      (eq, "$g_ccc_boss_spawned_flag", 1),
      (assign, ":continu", 1),
    (else_try),
      (ge, "$g_ccc_spawn_max_enemy", 0),
      (ge, "$g_ccc_spawn_boss", 0),
                   
      (assign, ":continu", 1),
    (try_end),
         
    (eq, "$g_ccc_elapsed_sec_flag", 0),
    (eq, ":continu", 1),
         
    (neq,main_hero_fallen),
    (num_active_teams_le, 1),
],
[
    #(display_message, "@You killed all enemies"),
    (assign, "$g_ccc_stage",99),
])
        
# win mission end
ccc_cave_mission_complete = (1,4, ti_once,
[
    (eq,"$g_ccc_stage",99),
],
[
    (display_message, "@You are win!"),
    (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
    ## CC-D begin: over hp fix
    (call_script, "script_ccc_last_agent_hp_fix"),
    ## CC-D end
    (finish_mission),
])

ccc_cave_triggers = [
      ccc_cave_set_init,
      ccc_cave_tab_show_info,
      ccc_cave_key_b_surrender,
      ccc_cave_question_answered,
      ccc_cave_spawn,
      ccc_cave_ai_change_elapsed_sec,
      ccc_cave_ai_change_near_prayer,
      ccc_cave_spawn_interval_a,
      ccc_cave_spawn_interval_b,
      ccc_cave_spawn_interval_c,
      ccc_cave_dead_troop_add_dead_party,
      ccc_cave_dead_enemy_cnt_and_spawn,
      ccc_cave_change_spawn_interval_a,
      ccc_cave_change_spawn_interval_b,
      ccc_cave_change_spawn_interval_c,
      ccc_cave_change_killd_spawn,
      ccc_cave_stop_spawn_flg,
      ccc_cave_spawn_boss_killed_enemy_or_last_alivs_num,
      ccc_cave_win_boss_killde,
      ccc_cave_lost_party_alives_num_le,
      ccc_cave_lost_you_dead,
      ccc_cave_set_music,
      ccc_cave_win_or_lost_elapsed_sec,
      ccc_cave_win_killed_all_enemy,
      ccc_cave_mission_complete,
      ccd_cave_select_npc_start,  ## CC-D add
      ccd_cave_select_npc_end,  ## CC-D add
      ccd_darknight_caller,  ## CC-D add
      ccd_set_scene_item,  ## CC-D add
      ccd_special_ai_cave,  ## CC-D add imported from difor 0.058
	  occc_vyrn_ai, ##OCCC 
	  occc_agent_weapons_set_cave,#OCCC
	  #occc_vyrn_ai_continue,
]
#CC-C end
## CC
		 

multiplayer_server_check_belfry_movement = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (set_fixed_point_multiplier, 100),

    (try_for_range, ":belfry_kind", 0, 2),
      (try_begin),
        (eq, ":belfry_kind", 0),
        (assign, ":belfry_body_scene_prop", "spr_belfry_a"),
      (else_try),
        (assign, ":belfry_body_scene_prop", "spr_belfry_b"),
      (try_end),
    
      (scene_prop_get_num_instances, ":num_belfries", ":belfry_body_scene_prop"),
      (try_for_range, ":belfry_no", 0, ":num_belfries"),
        (scene_prop_get_instance, ":belfry_scene_prop_id", ":belfry_body_scene_prop", ":belfry_no"),
        (prop_instance_get_position, pos1, ":belfry_scene_prop_id"), #pos1 holds position of current belfry 
        (prop_instance_get_starting_position, pos11, ":belfry_scene_prop_id"),

        (store_add, ":belfry_first_entry_point_id", 11, ":belfry_no"), #belfry entry points are 110..119 and 120..129 and 130..139
        (try_begin),
          (eq, ":belfry_kind", 1),
          (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),
          (val_add, ":belfry_first_entry_point_id", ":number_of_belfry_a"),
        (try_end),        
                
        (val_mul, ":belfry_first_entry_point_id", 10),
        (store_add, ":belfry_last_entry_point_id", ":belfry_first_entry_point_id", 10),
    
        (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id"),
          (entry_point_is_auto_generated, ":entry_point_id"),
          (assign, ":belfry_last_entry_point_id", ":entry_point_id"),
        (try_end),
        
        (assign, ":belfry_last_entry_point_id_plus_one", ":belfry_last_entry_point_id"),
        (val_sub, ":belfry_last_entry_point_id", 1),
        (assign, reg0, ":belfry_last_entry_point_id"),
        (neg|entry_point_is_auto_generated, ":belfry_last_entry_point_id"),

        (try_begin),
          (get_sq_distance_between_positions, ":dist_between_belfry_and_its_destination", pos1, pos11),
          (ge, ":dist_between_belfry_and_its_destination", 4), #0.2 * 0.2 * 100 = 4 (if distance between belfry and its destination already less than 20cm no need to move it anymore)

          (assign, ":max_dist_between_entry_point_and_belfry_destination", -1), #should be lower than 0 to allow belfry to go last entry point
          (assign, ":belfry_next_entry_point_id", -1),
          (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id_plus_one"),
            (entry_point_get_position, pos4, ":entry_point_id"),
            (get_sq_distance_between_positions, ":dist_between_entry_point_and_belfry_destination", pos11, pos4),
            (lt, ":dist_between_entry_point_and_belfry_destination", ":dist_between_belfry_and_its_destination"),
            (gt, ":dist_between_entry_point_and_belfry_destination", ":max_dist_between_entry_point_and_belfry_destination"),
            (assign, ":max_dist_between_entry_point_and_belfry_destination", ":dist_between_entry_point_and_belfry_destination"),
            (assign, ":belfry_next_entry_point_id", ":entry_point_id"),
          (try_end),

          (try_begin),
            (ge, ":belfry_next_entry_point_id", 0),
            (entry_point_get_position, pos5, ":belfry_next_entry_point_id"), #pos5 holds belfry next entry point target during its path
          (else_try),
            (copy_position, pos5, pos11),    
          (try_end),
        
          (get_distance_between_positions, ":belfry_next_entry_point_distance", pos1, pos5),
        
          #collecting scene prop ids of belfry parts
          (try_begin),
            (eq, ":belfry_kind", 0),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
            #belfry platform_b
            (scene_prop_get_instance, ":belfry_platform_b_scene_prop_id", "spr_belfry_platform_b", ":belfry_no"),
          (else_try),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),
    
          #belfry wheel_1
          (store_mul, ":wheel_no", ":belfry_no", 3),
          (try_begin),
            (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
            (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),    
            (store_mul, ":number_of_belfry_a_wheels", ":number_of_belfry_a", 3),
            (val_add, ":wheel_no", ":number_of_belfry_a_wheels"),
          (try_end),
          (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_2
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_3
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),

          (init_position, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos18, pos1, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos19, pos1, pos17),

          (assign, ":number_of_agents_around_belfry", 0),
          (get_max_players, ":num_players"),
          (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":agent_id", ":player_no"),
            (ge, ":agent_id", 0),
            (agent_get_team, ":agent_team", ":agent_id"),
            (eq, ":agent_team", 1), #only team2 players allowed to move belfry (team which spawns outside the castle (team1 = 0, team2 = 1))
            (agent_get_horse, ":agent_horse_id", ":agent_id"),
            (eq, ":agent_horse_id", -1),
            (agent_get_position, pos2, ":agent_id"),
            (get_sq_distance_between_positions_in_meters, ":dist_between_agent_and_belfry", pos18, pos2),

            (lt, ":dist_between_agent_and_belfry", multi_distance_sq_to_use_belfry), #must be at most 10m * 10m = 100m away from the player
            (neg|scene_prop_has_agent_on_it, ":belfry_scene_prop_id", ":agent_id"),
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_a_scene_prop_id", ":agent_id"),

            (this_or_next|eq, ":belfry_kind", 1), #there is this_or_next here because belfry_b has no platform_b
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_b_scene_prop_id", ":agent_id"),
    
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_1_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_2_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_3_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|position_is_behind_position, pos2, pos19),
            (position_is_behind_position, pos2, pos1),
            (val_add, ":number_of_agents_around_belfry", 1),        
          (try_end),

          (val_min, ":number_of_agents_around_belfry", 16),

          (try_begin),
            (scene_prop_get_slot, ":pre_number_of_agents_around_belfry", ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing),
            (scene_prop_get_slot, ":next_entry_point_id", ":belfry_scene_prop_id", scene_prop_next_entry_point_id),
            (this_or_next|neq, ":pre_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),
            (neq, ":next_entry_point_id", ":belfry_next_entry_point_id"),

            (try_begin),
              (eq, ":next_entry_point_id", ":belfry_next_entry_point_id"), #if we are still targetting same entry point subtract 
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              (store_mul, ":sqrt_number_of_agents_around_belfry", "$g_last_number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (assign, ":distance", ":belfry_next_entry_point_distance"),
              (val_mul, ":distance", ":sqrt_number_of_agents_around_belfry"),
              (val_div, ":distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":distance", 4), #multiplying with 4 to make belfry pushing process slower, 
                                                                 #with 16 agents belfry will go with 4 / 4 = 1 speed (max), with 1 agent belfry will go with 1 / 4 = 0.25 speed (min)    
            (try_end),

            (try_begin),
              (ge, ":belfry_next_entry_point_id", 0),

              #up down rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), 
              (position_get_distance_to_terrain, ":height_to_terrain_1", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at left part of belfry
      
              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, 300), #go 3.0 meters right
              (position_transform_position_to_parent, pos10, pos5, pos9), 
              (position_get_distance_to_terrain, ":height_to_terrain_2", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at right part of belfry

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),
              (val_mul, ":height_to_terrain", 100), #because of fixed point multiplier

              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 2 degrees. #ac sonra
              (init_position, pos20),    
              (position_rotate_x_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos23, pos5, pos20),

              #right left rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_1", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_2", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),    
              (val_mul, ":height_to_terrain", 100), #100 is because of fixed_point_multiplier
              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 25 degrees. 
              (val_mul, ":rotate_angle_of_next_entry_point", -1),

              (init_position, pos20),
              (position_rotate_y_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos22, pos23, pos20),
            (else_try),
              (copy_position, pos22, pos5),      
            (try_end),
              
            (try_begin),
              (ge, ":number_of_agents_around_belfry", 1), #if there is any agents pushing belfry

              (store_mul, ":sqrt_number_of_agents_around_belfry", ":number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (val_mul, ":belfry_next_entry_point_distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":belfry_next_entry_point_distance", 3), #multiplying with 3 to make belfry pushing process slower, 
                                                                 #with 9 agents belfry will go with 3 / 3 = 1 speed (max), with 1 agent belfry will go with 1 / 3 = 0.33 speed (min)    
              (val_div, ":belfry_next_entry_point_distance", ":sqrt_number_of_agents_around_belfry"),
              #calculating destination coordinates of belfry parts
              #belfry platform_a
              (prop_instance_get_position, pos6, ":belfry_platform_a_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos1, pos6),
              (position_transform_position_to_parent, pos8, pos22, pos7),
              (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),    
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_get_position, pos6, ":belfry_platform_b_scene_prop_id"),
                (position_transform_position_to_local, pos7, pos1, pos6),
                (position_transform_position_to_parent, pos8, pos22, pos7),
                (prop_instance_animate_to_position, ":belfry_platform_b_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),
              (try_end),
              #wheel rotation
              (store_mul, ":belfry_wheel_rotation", ":belfry_next_entry_point_distance", -25),
              #(val_add, "$g_belfry_wheel_rotation", ":belfry_wheel_rotation"),
              (assign, "$g_last_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),

              #belfry wheel_1
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_1_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),
      
              #belfry wheel_2
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_2_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),
      
              #belfry wheel_3
              (prop_instance_get_position, pos13, ":belfry_wheel_3_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_3_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),

              #belfry main body
              (prop_instance_animate_to_position, ":belfry_scene_prop_id", pos22, ":belfry_next_entry_point_distance"),    
            (else_try),
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              #belfry platform_a
              (prop_instance_stop_animating, ":belfry_platform_a_scene_prop_id"),
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_stop_animating, ":belfry_platform_b_scene_prop_id"),
              (try_end),
              #belfry wheel_1
              (prop_instance_stop_animating, ":belfry_wheel_1_scene_prop_id"),
              #belfry wheel_2
              (prop_instance_stop_animating, ":belfry_wheel_2_scene_prop_id"),
              #belfry wheel_3
              (prop_instance_stop_animating, ":belfry_wheel_3_scene_prop_id"),
              #belfry main body
              (prop_instance_stop_animating, ":belfry_scene_prop_id"),
            (try_end),
        
            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, ":number_of_agents_around_belfry"),    
            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, ":belfry_next_entry_point_id"),
          (try_end),
        (else_try),
          (le, ":dist_between_belfry_and_its_destination", 4),
          (scene_prop_slot_eq, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
      
          (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),    

          (try_begin),
            (eq, ":belfry_kind", 0),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
          (else_try),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),
    
          (prop_instance_get_starting_position, pos0, ":belfry_platform_a_scene_prop_id"),
          (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos0, 400),    
        (try_end),
      (try_end),
    (try_end),
    ])

multiplayer_server_spawn_bots = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
    (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
    (try_begin),
      (gt, ":total_req", 0),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

        (team_get_score, ":team_1_score", 0),
        (team_get_score, ":team_2_score", 1),

        (store_add, ":current_round", ":team_1_score", ":team_2_score"),
        (eq, ":current_round", 0),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),
        (lt, ":round_time", 20),

        (assign, ":rounded_game_first_round_time_limit_past", 0),
      (else_try),
        (assign, ":rounded_game_first_round_time_limit_past", 1),
      (try_end),
    
      (eq, ":rounded_game_first_round_time_limit_past", 1),
    
      (store_random_in_range, ":random_req", 0, ":total_req"),
      (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
      (try_begin),
        (lt, ":random_req", 0),
        #add to team 1
        (assign, ":selected_team", 0),
      (else_try),
        #add to team 2
        (assign, ":selected_team", 1),
      (try_end),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),

        (try_begin),
          (le, ":round_time", 20),
          (assign, ":look_only_actives", 0),
        (else_try),
          (assign, ":look_only_actives", 1),
        (try_end),
      (else_try),
        (assign, ":look_only_actives", 1),
      (try_end),
    
      (call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":selected_team", ":look_only_actives"),
      (assign, ":selected_troop", reg0),
      (assign, ":selected_group", reg1),

      (team_get_faction, ":team_faction", ":selected_team"),
      (assign, ":num_ai_troops", 0),
      (try_for_range, ":cur_ai_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":ai_troop_faction", ":cur_ai_troop"),
        (eq, ":ai_troop_faction", ":team_faction"),
        (val_add, ":num_ai_troops", 1),
      (try_end),

      (assign, ":number_of_active_players_wanted_bot", 0),

      (get_max_players, ":num_players"),
      (try_for_range, ":player_no", 0, ":num_players"),
        (player_is_active, ":player_no"),
        (player_get_team_no, ":player_team_no", ":player_no"),
        (eq, ":selected_team", ":player_team_no"),

        (assign, ":ai_wanted", 0),
        (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
        (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
          (player_slot_ge, ":player_no", ":bot_type_wanted_slot", 1),
          (assign, ":ai_wanted", 1),
          (assign, ":end_cond", 0), 
        (try_end),

        (ge, ":ai_wanted", 1),

        (val_add, ":number_of_active_players_wanted_bot", 1),
      (try_end),

      (try_begin),
        (this_or_next|ge, ":selected_group", 0),
        (eq, ":number_of_active_players_wanted_bot", 0),

        (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
        (try_begin),
          (ge, ":has_item", 0),
          (assign, ":is_horseman", 1),
        (else_try),
          (assign, ":is_horseman", 0),
        (try_end),

        (try_begin),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

          (store_mission_timer_a, ":round_time"),
          (val_sub, ":round_time", "$g_round_start_time"),

          (try_begin),
            (lt, ":round_time", 20), #at start of game spawn at base entry point
            (try_begin),
              (eq, ":selected_team", 0),
              (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 1, ":is_horseman"), 
            (else_try),
              (assign, reg0, multi_initial_spawn_point_team_2),
            (try_end),
          (else_try),
            (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
          (try_end),
        (else_try),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
      
          (try_begin),
            (eq, ":selected_team", 0),
            (assign, reg0, 0),
          (else_try),
            (assign, reg0, 32),
          (try_end),
        (else_try),
          (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
        (try_end),
      
        (store_current_scene, ":cur_scene"),
        (modify_visitors_at_site, ":cur_scene"),
        (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", ":selected_group"),
        (assign, "$g_multiplayer_ready_for_spawning_agent", 0),

        (try_begin),
          (eq, ":selected_team", 0),
          (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
        (else_try),
          (eq, ":selected_team", 1),
          (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
        (try_end),
      (try_end),
    (try_end),    
    ])

multiplayer_server_manage_bots = (
  3, 0, 0, [],
  [
    (multiplayer_is_server),
    (try_for_agents, ":cur_agent"),
      (agent_is_non_player, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_get_group, ":agent_group", ":cur_agent"),
      (try_begin),
        (neg|player_is_active, ":agent_group"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (else_try),
        (player_get_team_no, ":leader_team_no", ":agent_group"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (neq, ":leader_team_no", ":agent_team"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (try_end),
    (try_end),
    ])

multiplayer_server_check_polls = (
  1, 5, 0,
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_poll_running", 1),
    (eq, "$g_multiplayer_poll_ended", 0),
    (store_mission_timer_a, ":mission_timer"),
    (store_add, ":total_votes", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
    (this_or_next|eq, ":total_votes", "$g_multiplayer_poll_num_sent"),
    (gt, ":mission_timer", "$g_multiplayer_poll_end_time"),
    (call_script, "script_cf_multiplayer_evaluate_poll"),
    ],
  [
    (assign, "$g_multiplayer_poll_running", 0),
    (try_begin),
      (this_or_next|eq, "$g_multiplayer_poll_to_show", 0), #change map
      (eq, "$g_multiplayer_poll_to_show", 3), #change map with factions
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
      (call_script, "script_game_set_multiplayer_mission_end"),
    (try_end),
    ])
    
multiplayer_server_check_end_map = ( 
  1, 0, 0, [],
  [
    (multiplayer_is_server),
    #checking for restarting the map
    (assign, ":end_map", 0),
#INVASION MODE START
	(try_begin),
	  (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
	  (try_begin),
		(eq, "$g_round_ended", 1),
		(assign, ":end_map", 1),
	  (try_end),
	(else_try),
#INVASION MODE END
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
      (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
    
      (try_begin),
        (eq, "$g_round_ended", 1),

        (store_mission_timer_a, ":seconds_past_till_round_ended"),
        (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
        (store_sub, ":multiplayer_respawn_period_minus_one", "$g_multiplayer_respawn_period", 1),
        (ge, ":seconds_past_till_round_ended", ":multiplayer_respawn_period_minus_one"),
  
        (store_mission_timer_a, ":mission_timer"),    
        (try_begin),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
          (assign, ":reduce_amount", 90),
        (else_try),
          (assign, ":reduce_amount", 120),
        (try_end),
    
        (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
        (store_sub, ":game_max_seconds_min_n_seconds", ":game_max_seconds", ":reduce_amount"), #when round ends if there are 60 seconds to map change time then change map without completing exact map time.
        (gt, ":mission_timer", ":game_max_seconds_min_n_seconds"),
        (assign, ":end_map", 1),
      (try_end),
      
      (eq, ":end_map", 1),
    (else_try),
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #battle mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #fight and destroy mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege), #siege mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #in headquarters mod game cannot limited by time, only can be limited by score.
      (store_mission_timer_a, ":mission_timer"),
      (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
      (gt, ":mission_timer", ":game_max_seconds"),
      (assign, ":end_map", 1),
    (else_try),
      #assuming only 2 teams in scene
      (team_get_score, ":team_1_score", 0),
      (team_get_score, ":team_2_score", 1),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #for not-headquarters mods
        (try_begin),
          (this_or_next|ge, ":team_1_score", "$g_multiplayer_game_max_points"),
          (ge, ":team_2_score", "$g_multiplayer_game_max_points"),
          (assign, ":end_map", 1),
        (try_end),
      (else_try),
        (assign, ":at_least_one_player_is_at_game", 0),
        (get_max_players, ":num_players"),
        (try_for_range, ":player_no", 0, ":num_players"),
          (player_is_active, ":player_no"),
          (player_get_agent_id, ":agent_id", ":player_no"),
          (ge, ":agent_id", 0),
          (neg|agent_is_non_player, ":agent_id"),
          (assign, ":at_least_one_player_is_at_game", 1),
          (assign, ":num_players", 0),
        (try_end),
    
        (eq, ":at_least_one_player_is_at_game", 1),

        (this_or_next|le, ":team_1_score", 0), #in headquarters game ends only if one team has 0 score.
        (le, ":team_2_score", 0),
        (assign, ":end_map", 1),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":end_map", 1),
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
      (call_script, "script_game_set_multiplayer_mission_end"),           
    (try_end),
    ])

multiplayer_once_at_the_first_frame = (
  0, 0, ti_once, [], [
    (start_presentation, "prsnt_multiplayer_welcome_message"),
    ])

multiplayer_battle_window_opened = (
  ti_battle_window_opened, 0, 0, [], [
    (start_presentation, "prsnt_multiplayer_team_score_display"),
    ])


common_battle_mission_start = (
  ti_before_mission_start, 0, 0, [],
  [
    (team_set_relation, 0, 2, 1),
    (team_set_relation, 1, 3, 1),
    (call_script, "script_change_banners_and_chest"),
    ])

common_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (eq, "$g_battle_won", 1),
      (call_script, "script_count_mission_casualties_from_agents"),
      (finish_mission,0),
    ##diplomacy begin
   (else_try),
      (eq, "$g_dplmc_battle_continuation", 0),
      ##diplomacy start+ Import Caba`drin's battle continuation fix
      (this_or_next|main_hero_fallen),   #CABA EDIT/FIX FOR DEATH CAM
      ##diplomacy end+
      (eq, "$pin_player_fallen", 1),
      (question_box,"str_do_you_want_to_retreat"),
##      (call_script, "script_simulate_retreat", 5, 20),
##      (str_store_string, s5, "str_retreat"),
##      (call_script, "script_count_mission_casualties_from_agents"),
##      (set_mission_result, -1),
##      (finish_mission,0),
    ##diplomacy end
    (else_try),
      (call_script, "script_cf_check_enemies_nearby"),
      (question_box,"str_do_you_want_to_retreat"),
    (else_try),
      (display_message,"str_can_not_retreat"),
    (try_end),
    ])


common_battle_init_banner = (
  ti_on_agent_spawn, 0, 0, [],
  [
    (store_trigger_param_1, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    (call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":agent_no", ":troop_no"),
  ])


common_arena_fight_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (question_box,"str_give_up_fight"),
    ])

common_custom_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (neq, "$g_battle_result", 0),
      (call_script, "script_custom_battle_end"),
      (finish_mission),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ])

custom_battle_check_victory_condition = (
  1, 60, ti_once,
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 2),
    ##diplomacy begin
    (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
    (neg|main_hero_fallen, 0),
    ##diplomacy end
    (set_mission_result,1),
    (display_message,"str_msg_battle_won"),
    (assign, "$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission, 1),
    ])

custom_battle_check_defeat_condition = (
  1, 4,
##diplomacy begin
0,
##diplomacy end
  [
    (main_hero_fallen),
    ##diplomacy begin
    (try_begin),
      (eq, "$g_dplmc_battle_continuation", 0),
      (assign, ":num_allies", 0),
      (try_for_agents, ":agent"),
       (agent_is_ally, ":agent"),
       (agent_is_alive, ":agent"),
       (val_add, ":num_allies", 1),
      (try_end),
      (gt, ":num_allies", 0),
      (try_begin),
        (eq, "$g_dplmc_cam_activated", 0),
        #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
        (assign, "$g_dplmc_cam_activated", 1),
        ## CC-D begin: mix Diplo + PBOD + SmoothDC
        (try_begin),
          (neq, "$g_cam_mode", 0),
          (assign, "$g_cam_mode", 0),
        (try_end),
        (try_begin),
          # Diplomacy Death Camera: already set $g_dplmc_cam_activated
          (eq, "$g_ccd_death_camera_select", 0),
          (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
          (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
          (display_message, "@You can toggle camera mode by LCtrl+T."),
          (assign, "$g_cam_mode", 1),
          (assign, "$g_camera_rotx", 0),
          (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
        (else_try),
          # Smooth Death Camera: set on trigger
          (eq, "$g_ccd_death_camera_select", 1),
          (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
        ## CC-D begin: off on quick battle
        #(else_try),
        #  # PBOD Death Camera: set here, because ModMerger not work
        #  (eq, "$g_ccd_death_camera_select", 2),
        #  (neq, "$cam_free", 1),
        #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
        #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
        #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
        ## CC-D end
        (try_end),
        
        #Diplomacy Battle Continuation -> PBOD charge
        #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: off on quick battle
        (set_show_messages, 0),
        (get_player_agent_no, ":player_agent"),
        (agent_get_team, ":player_team", ":player_agent"),
        
        (try_begin),
          (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
          (neq, ":cur_order", mordr_charge),
          
          (team_set_order_listener, ":player_team", grc_everyone),
          (call_script, "script_ccc_team_clear_destination", ":player_team"),
          (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
          (team_give_order, ":player_team", grc_everyone, mordr_charge),
          
          ## CC-D begin: off on quick battle
          #(team_set_order_listener, ":player_team", grc_everyone),
          #(call_script, "script_player_order_formations", mordr_charge),
          ## CC-D end
        (try_end),
        (set_show_messages, 1),
        ## CC-D end
      (try_end),
  (else_try),
    ##diplomacy end
    (assign,"$g_battle_result",-1),
    ##diplomacy begin
    (try_end),
    ##diplomacy end
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission),
    ])

common_battle_victory_display = (
  10, 0, 0, [],
  [
    (eq,"$g_battle_won",1),
    (display_message,"str_msg_battle_won"),
    ])

common_siege_question_answered = (
  ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$pin_player_fallen", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_team, ":agent_team", ":player_agent"),
     (try_begin),
       (neq, "$attacker_team", ":agent_team"),
       (neq, "$attacker_team_2", ":agent_team"),
       (str_store_string, s5, "str_siege_continues"),
       (call_script, "script_simulate_retreat", 8, 15, 0),
     (else_try),
       (str_store_string, s5, "str_retreat"),
       (call_script, "script_simulate_retreat", 5, 20, 0),
     (try_end),
     (call_script, "script_count_mission_casualties_from_agents"),
     (finish_mission,0),
     ])

common_custom_battle_question_answered = (
   ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$g_battle_result", -1),
     (call_script, "script_custom_battle_end"),
     (finish_mission),
     ])

common_custom_siege_init = (
  0, 0, ti_once, [],
  [
    (assign, "$g_battle_result", 0),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    ])

common_siege_init = (
  0, 0, ti_once, [],
  [
    (assign,"$g_battle_won",0),
    (assign,"$defender_reinforcement_stage",0),
    (assign,"$attacker_reinforcement_stage",0),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    ])

common_music_situation_update = (
  30, 0, 0, [],
  [
    (call_script, "script_combat_music_set_situation_with_culture"),

    ])

common_siege_ai_trigger_init = (
  0, 0, ti_once,
  [
    (assign, "$defender_team", 0),
    (assign, "$attacker_team", 1),
    (assign, "$defender_team_2", 2),
    (assign, "$attacker_team_2", 3),
    ], [])

common_siege_ai_trigger_init_2 = (
  0, 0, ti_once,
  [
    (set_show_messages, 0),
    (entry_point_get_position, pos10, 10),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (neq, ":cur_group", grc_archers),
      (team_give_order, "$defender_team", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
    (try_end),
    (team_give_order, "$defender_team", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team", grc_everyone, pos10),
    (team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team_2", grc_everyone, pos10),
    (set_show_messages, 1),
    ], [])

common_siege_ai_trigger_init_after_2_secs = (
  0, 2, ti_once, [],
  [
    (try_for_agents, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_is_not_reinforcement, 1),
    (try_end),
    ])

common_siege_defender_reinforcement_check = (
  3, 0, 5, [],
  ## CC begin
  [
    (store_mission_timer_a,":mission_time"),
    (ge,":mission_time",10),
    (try_begin),
      (store_mul, ":attacker_reinf_stage_mul_3", "$attacker_reinforcement_stage", 3),
      (this_or_next|lt, "$defender_reinforcement_stage", 14),
      (le, "$defender_reinforcement_stage", ":attacker_reinf_stage_mul_3"),
      (store_normalized_team_count, ":num_defenders_normalized", 0),
      (lt, ":num_defenders_normalized", 8),
      (add_reinforcements_to_entry,4, 7),
      (val_add,"$defender_reinforcement_stage",1),
    (try_end),
    ## CC end
   (try_begin),
     (gt, ":mission_time", 300), #5 minutes, don't let small armies charge
     (get_player_agent_no, ":player_agent"),
     (agent_get_team, ":player_team", ":player_agent"),
     (neq, ":player_team", "$defender_team"), #player should be the attacker
     (neq, ":player_team", "$defender_team_2"), #player should be the attacker
     (ge, "$defender_reinforcement_stage", 3), ## CC
     (set_show_messages, 0),
     (team_give_order, "$defender_team", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
     (team_give_order, "$defender_team_2", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
     (team_give_order, "$defender_team", grc_cavalry, mordr_charge), #AI desperate charge:cavalry!!!
     (team_give_order, "$defender_team_2", grc_cavalry, mordr_charge), #AI desperate charge:cavalry!!!
     (set_show_messages, 1),
     (ge, "$defender_reinforcement_stage", 6), ## CC
     (set_show_messages, 0),
     (team_give_order, "$defender_team", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
     (team_give_order, "$defender_team_2", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
     (set_show_messages, 1),
   (try_end),
   ])

#CC-C begin
#common_siege_defender_reinforcement_archer_reposition = (
  #2, 0, 0,
  #[
    #(gt, "$defender_reinforcement_stage", 0),
    #],
  #[
    #(call_script, "script_siege_move_archers_to_archer_positions"),
    #])
#CC-C end

## CC begin
common_siege_attacker_reinforcement_check = (
  1, 0, 5,
  [
    (assign, ":continue", 1),
    (try_begin),
      (ge,"$attacker_reinforcement_stage",10),
      (store_mul, ":defender_reinf_stage_mul_3", "$defender_reinforcement_stage", 3),
      (gt, "$attacker_reinforcement_stage", ":defender_reinf_stage_mul_3"),
      (assign, ":continue", 0),
    (try_end),
    (eq, ":continue", 1),
    (store_mission_timer_a,":mission_time"),
    (ge,":mission_time",10),
    (store_normalized_team_count,":num_attackers",1),
    (lt,":num_attackers",6)
    ],
  [
    (add_reinforcements_to_entry, 1, 8),
    (val_add,"$attacker_reinforcement_stage", 1),
    ])
## CC end

common_siege_attacker_do_not_stall = (
  5, 0, 0, [],
  [ #Make sure attackers do not stall on the ladders...
    (try_for_agents, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_team, ":agent_team", ":agent_no"),
      (this_or_next|eq, ":agent_team", "$attacker_team"),
      (eq, ":agent_team", "$attacker_team_2"),
      (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
    (try_end),
    ])

common_battle_check_friendly_kills = (
  2, 0, 0, [],
  [
    (call_script, "script_check_friendly_kills"),
    ])

common_battle_check_victory_condition = (
  5, 60, ti_once, ## CC
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 5),
    ##diplomacy begin
    (this_or_next|eq, "$g_dplmc_battle_continuation", 0),
    (neg|main_hero_fallen),
    ##diplomacy end
    (set_mission_result,1),
    (display_message,"str_msg_battle_won"),
    (assign,"$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    (call_script, "script_play_victorious_sound"),
    ],
  [
    (call_script, "script_count_mission_casualties_from_agents"),
    (finish_mission, 1),
    ])

common_battle_victory_display = (
  10, 0, 0, [],
  [
    (eq,"$g_battle_won",1),
    (display_message,"str_msg_battle_won"),
    ])

common_siege_refill_ammo = (
  120, 0, 0, [],
  [#refill ammo of defenders every two minutes.
    #(get_player_agent_no, ":player_agent"),  ##CC-C
    (try_for_agents,":cur_agent"),
      #(neq, ":cur_agent", ":player_agent"), #CC-C
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
##      (agent_is_defender, ":cur_agent"),
      (agent_get_team, ":agent_team", ":cur_agent"),
      (this_or_next|eq, ":agent_team", "$defender_team"),
      (eq, ":agent_team", "$defender_team_2"),
      (agent_refill_ammo, ":cur_agent"),
      ## CC reset it to 0
      #(agent_set_slot, ":cur_agent", slot_agent_refill_ammo_times, 0),  ##CC-C
      ## CC
    (try_end),
    (display_message,"@Defender Ammo full"),  ##CC-C
    ])

common_siege_check_defeat_condition = (
  1, 4,
##diplomacy begin
0,
##diplomacy end
  [
    (main_hero_fallen)
    ],
  [
    ##diplomacy begin
    (try_begin),
      (eq, "$g_dplmc_battle_continuation", 0),
      (assign, ":num_allies", 0),
      (try_for_agents, ":agent"),
       (agent_is_ally, ":agent"),
       (agent_is_alive, ":agent"),
       (val_add, ":num_allies", 1),
      (try_end),
      (gt, ":num_allies", 0),
      (try_begin),
        (eq, "$g_dplmc_cam_activated", 0),
        #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
        (assign, "$g_dplmc_cam_activated", 1),
        ## CC-D begin: mix Diplo + PBOD + SmoothDC
        (try_begin),
          (neq, "$g_cam_mode", 0),
          (assign, "$g_cam_mode", 0),
        (try_end),
        (try_begin),
          # Diplomacy Death Camera: already set $g_dplmc_cam_activated
          (eq, "$g_ccd_death_camera_select", 0),
          (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
          (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
          (display_message, "@You can toggle camera mode by LCtrl+T."),
          (assign, "$g_cam_mode", 1),
          (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
        (else_try),
          # Smooth Death Camera: set on trigger
          (eq, "$g_ccd_death_camera_select", 1),
          (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
        ## CC-D begin: add ModMerger PBOD
        #(else_try),
        #  # PBOD Death Camera: set here, because ModMerger not work
        #  (eq, "$g_ccd_death_camera_select", 2),
        #  (neq, "$cam_free", 1),
        #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
        #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
        #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
        ## CC-D end
        (try_end),
        
        #Diplomacy Battle Continuation -> PBOD charge
        #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: off on main siege
        (set_show_messages, 0),
        (get_player_agent_no, ":player_agent"),
        (agent_get_team, ":player_team", ":player_agent"),
        
        (try_begin),
          (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
          (neq, ":cur_order", mordr_charge),
          
          (team_set_order_listener, ":player_team", grc_everyone),
          (call_script, "script_ccc_team_clear_destination", ":player_team"),
          (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
          (team_give_order, ":player_team", grc_everyone, mordr_charge),
          
          ## CC-D begin: add ModMerger PBOD
          #(team_set_order_listener, ":player_team", grc_everyone),
          #(call_script, "script_player_order_formations", mordr_charge),
          ## CC-D end
        (try_end),
        (set_show_messages, 1),
        ## CC-D end
      (try_end),
    (else_try),
    ##diplomacy end
    (assign, "$pin_player_fallen", 1),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":agent_team", ":player_agent"),
    (try_begin),
      (neq, "$attacker_team", ":agent_team"),
      (neq, "$attacker_team_2", ":agent_team"),
      (str_store_string, s5, "str_siege_continues"),
      (call_script, "script_simulate_retreat", 8, 15, 0),
    (else_try),
      (str_store_string, s5, "str_retreat"),
      (call_script, "script_simulate_retreat", 5, 20, 0),
    (try_end),
    (assign, "$g_battle_result", -1),
    (set_mission_result,-1),
    (call_script, "script_count_mission_casualties_from_agents"),
    (finish_mission,0),
    ##diplomacy begin
    (try_end),
    ##diplomacy end
    ])

common_battle_order_panel = (
  0, 0, 0, [],
  [
    (game_key_clicked, gk_view_orders),
    ##diplomacy begin
    #(neg|main_hero_fallen), #CC-C
    ##diplomacy end
    (neg|is_presentation_active, "prsnt_battle"),
    (start_presentation, "prsnt_battle"),
    ])

## CC begin
common_battle_order_panel_tick = (
  0, 0, 0, [(eq,"$g_occc_peformance_minimap",0),],
  [
    (try_begin),
      (neg|is_presentation_active, "prsnt_battle"),
      (neg|is_presentation_active, "prsnt_mini_map"),
      ## NMCml begin: add by ModMerger PBOD
	  #(neg|is_presentation_active, "prsnt_caba_order_display"), #CABA ADD
      ## NMCml end
      ## CC-D begin
      (neg|is_presentation_active, "prsnt_ccd_gunsight"),
      (this_or_next|gt, "$g_hp_bar_ally", 0),
      (this_or_next|gt, "$g_hp_bar_enemy", 0),
      (ge, "$g_minimap_style", 1),
      ## CC-D end
      (start_presentation, "prsnt_mini_map"),
    (try_end),
    (try_begin),
      (is_presentation_active, "prsnt_battle"),
      (call_script, "script_update_order_panel_statistics_and_map"),
    (else_try),
      (is_presentation_active, "prsnt_mini_map"),
      ## NMCml begin
      #(call_script, "script_update_agent_hp_bar"),
      (try_begin),
        (this_or_next|gt, "$g_hp_bar_ally", 0),
        (gt, "$g_hp_bar_enemy", 0),
        (call_script, "script_update_agent_hp_bar"),
      (try_end),
      ## NMCml end
      (ge, "$g_minimap_style", 1),
      (call_script, "script_update_order_panel_map"),
    (try_end),
    #CC-C begin
    (set_fixed_point_multiplier, 100),
    #CC-C end
    ])
#occc start


common_battle_order_panel_tick_low_freq = (
  0.8, 0, 0, [(eq,"$g_occc_peformance_minimap",1),],
  [
    (try_begin),
      (neg|is_presentation_active, "prsnt_battle"),
      (neg|is_presentation_active, "prsnt_mini_map"),
      ## NMCml begin: add by ModMerger PBOD
	  #(neg|is_presentation_active, "prsnt_caba_order_display"), #CABA ADD
      ## NMCml end
      ## CC-D begin
      (neg|is_presentation_active, "prsnt_ccd_gunsight"),
      (this_or_next|gt, "$g_hp_bar_ally", 0),
      (this_or_next|gt, "$g_hp_bar_enemy", 0),
      (ge, "$g_minimap_style", 1),
      ## CC-D end
      (start_presentation, "prsnt_mini_map"),
    (try_end),
    (try_begin),
      (is_presentation_active, "prsnt_battle"),
      (call_script, "script_update_order_panel_statistics_and_map"),
    (else_try),
      (is_presentation_active, "prsnt_mini_map"),
      ## NMCml begin
      #(call_script, "script_update_agent_hp_bar"),
      (try_begin),
        (this_or_next|gt, "$g_hp_bar_ally", 0),
        (gt, "$g_hp_bar_enemy", 0),
        (call_script, "script_update_agent_hp_bar"),
      (try_end),
      ## NMCml end
      (ge, "$g_minimap_style", 1),
      (call_script, "script_update_order_panel_map"),
    (try_end),
    #CC-C begin
    (set_fixed_point_multiplier, 100),
    #CC-C end
    ])

#occc end
## CC end

common_battle_inventory = (
  ti_inventory_key_pressed, 0, 0, [],
  [
    (display_message,"str_use_baggage_for_inventory"),
    ])

common_inventory_not_available = (
  ti_inventory_key_pressed, 0, 0,
  [
    (display_message, "str_cant_use_inventory_now"),
    ], [])

common_siege_init_ai_and_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_siege_init_ai_and_belfry"),
    ], [])

common_siege_move_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_move_belfry"),
    ], [])

common_siege_rotate_belfry = (
  0, 2, ti_once,
  [
    (call_script, "script_cf_siege_rotate_belfry_platform"),
    ],
  [
    (assign, "$belfry_positioned", 3),
    ])

common_siege_assign_men_to_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_assign_men_to_belfry"),
    ], [])


tournament_triggers = [
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest"),
                                       (assign, "$g_arena_training_num_agents_spawned", 0)]),
  (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
  ## CC begin
  #custom_commander_camera,  ## CC-D: camera integrate
  #custom_commander_agent_refill_ammo,
  custom_commander_cheat_refill_ammo,
  custom_commander_change_weather,
  #custom_commander_toggle_charging,
  #custom_commander_horse_speed,
  #custom_commander_special_strike,
  #custom_commander_agent_set_hp,  ## NMCml del
  
  occc_vyrn_ai,#occc
  
  (1, 0, ti_once, 
  [
     (eq, "$g_mt_mode", abm_tournament),
     (assign, ":passed", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_kill_count, ":kill_count", ":player_agent", 1),
     (try_begin),
       (ge, ":kill_count", 2),
       (assign, ":passed", 1),
     (else_try),
       (eq, ":kill_count", 1),
       (le, "$g_tournament_cur_tier", 2),
       (assign, ":passed", 1),
     (try_end),
     (eq, ":passed", 1),
     (display_message, "@You advance to next round, you can press the Tab key and end this round."),
  ], []),
  ## CC end
  (ti_tab_pressed, 0, 0, [],
   [(try_begin),
      (eq, "$g_mt_mode", abm_visit),
      (set_trigger_result, 1),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ]),
  (ti_question_answered, 0, 0, [],
   [(store_trigger_param_1,":answer"),
    (eq,":answer",0),
    (try_begin),
      (eq, "$g_mt_mode", abm_tournament),
      (call_script, "script_end_tournament_fight", 0),
    (else_try),
      (eq, "$g_mt_mode", abm_training),
      (get_player_agent_no, ":player_agent"),
      (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
    (try_end),
    (finish_mission,0),
    ]),

  (1, 0, ti_once, [], [
      (eq, "$g_mt_mode", abm_visit),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (store_current_scene, reg(1)),
      (scene_set_slot, reg(1), slot_scene_visited, 1),
      (mission_enable_talk),
      (get_player_agent_no, ":player_agent"),
      (assign, ":team_set", 0),
      (try_for_agents, ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
        (eq, ":team_set", 0),
        (agent_set_team, ":agent_no", 1),
        (assign, ":team_set", 1),
      (try_end),
    ]),
  


  (0, 0, ti_once, [],
   [
     (eq, "$g_mt_mode", abm_tournament),
     (play_sound, "snd_arena_ambiance", sf_looping),
     (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
     ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_tournament),
                   (this_or_next|main_hero_fallen),
                   (num_active_teams_le, 1)],
   [
       (try_begin),
         (neg|main_hero_fallen),
         (call_script, "script_end_tournament_fight", 1),
         (call_script, "script_play_victorious_sound"),
         (finish_mission),
       (else_try),
         (call_script, "script_end_tournament_fight", 0),
         (finish_mission),
       (try_end),
       ]),

  (ti_battle_window_opened, 0, 0, [], [(eq, "$g_mt_mode", abm_training),(start_presentation, "prsnt_arena_training")]),
  
  (0, 0, ti_once, [], [(eq, "$g_mt_mode", abm_training),
                       (assign, "$g_arena_training_max_opponents", 40),
                       (assign, "$g_arena_training_num_agents_spawned", 0),
                       (assign, "$g_arena_training_kills", 0),
                       (assign, "$g_arena_training_won", 0),
                       (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
                       ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_training),
                   (store_mission_timer_a, ":cur_time"),
                   (gt, ":cur_time", 3),
                   (assign, ":win_cond", 0),
                   (try_begin),
                     (ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),#spawn at most 40 agents
                     (num_active_teams_le, 1),
                     (assign, ":win_cond", 1),
                   (try_end),
                   (this_or_next|eq, ":win_cond", 1),
                   (main_hero_fallen)],
   [
       (get_player_agent_no, ":player_agent"),
       (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
       (assign, "$g_arena_training_won", 0),
       (try_begin),
         (neg|main_hero_fallen),
         (assign, "$g_arena_training_won", 1),#use this for conversation
       (try_end),
       (assign, "$g_mt_mode", abm_visit),
       (set_jump_mission, "mt_arena_melee_fight"),
       (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
       (modify_visitors_at_site, ":arena_scene"),
       (reset_visitors),
       (set_visitor, 35, "trp_veteran_fighter"),
       (set_visitor, 36, "trp_hired_blade"),
       (set_jump_entry, 50),
       (jump_to_scene, ":arena_scene"),
       ]),


  (0.2, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training),
       (assign, ":num_active_fighters", 0),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (val_add, ":num_active_fighters", 1),
       (try_end),
       (lt, ":num_active_fighters", 7),
       (neg|main_hero_fallen),
       (store_mission_timer_a, ":cur_time"),
       (this_or_next|ge, ":cur_time", "$g_arena_training_next_spawn_time"),
       (this_or_next|lt, "$g_arena_training_num_agents_spawned", 6),
       (num_active_teams_le, 1),
       (lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
      ],
    [
       (assign, ":added_troop", "$g_arena_training_num_agents_spawned"),
       (store_div,  ":added_troop", "$g_arena_training_num_agents_spawned", 6),
       (assign, ":added_troop_sequence", "$g_arena_training_num_agents_spawned"),
       (val_mod, ":added_troop_sequence", 6),
       (val_add, ":added_troop", ":added_troop_sequence"),
       (val_min, ":added_troop", 9),
       (val_add, ":added_troop", "trp_arena_training_fighter_1"),
       (assign, ":end_cond", 10000),
       (get_player_agent_no, ":player_agent"),
       (agent_get_position, pos5, ":player_agent"),
       (try_for_range, ":unused", 0, ":end_cond"),
         (store_random_in_range, ":random_entry_point", 32, 40),
         (neq, ":random_entry_point", "$g_player_entry_point"), # make sure we don't overwrite player
         (entry_point_get_position, pos1, ":random_entry_point"),
         (get_distance_between_positions, ":dist", pos5, pos1),
         (gt, ":dist", 1200), #must be at least 12 meters away from the player
         (assign, ":end_cond", 0),
       (try_end),
       (add_visitors_to_current_scene, ":random_entry_point", ":added_troop", 1),
       (store_add, ":new_spawned_count", "$g_arena_training_num_agents_spawned", 1),
       (store_mission_timer_a, ":cur_time"),
       (store_add, "$g_arena_training_next_spawn_time", ":cur_time", 14),
       (store_div, ":time_reduction", ":new_spawned_count", 3),
       (val_sub, "$g_arena_training_next_spawn_time", ":time_reduction"),
       ]),

  (0, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training)
       ],
    [
       (assign, ":max_teams", 6),
       (val_max, ":max_teams", 1),
       (get_player_agent_no, ":player_agent"),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_slot_eq, ":agent_no", slot_agent_arena_team_set, 0),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 6), #player is always team 6.
         (else_try),
           (store_random_in_range, ":selected_team", 0, ":max_teams"),
          # find strongest team
           (try_for_range, ":t", 0, 6),
             (troop_set_slot, "trp_temp_array_a", ":t", 0),
           (try_end),
           (try_for_agents, ":other_agent_no"),
             (agent_is_human, ":other_agent_no"),
             (agent_is_alive, ":other_agent_no"),
             (neq, ":agent_no", ":player_agent"),
             (agent_slot_eq, ":other_agent_no", slot_agent_arena_team_set, 1),
             (agent_get_team, ":other_agent_team", ":other_agent_no"),
             (troop_get_slot, ":count", "trp_temp_array_a", ":other_agent_team"),
             (val_add, ":count", 1),
             (troop_set_slot, "trp_temp_array_a", ":other_agent_team", ":count"),
           (try_end),
           (assign, ":strongest_team", 0),
           (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", 0),
           (try_for_range, ":t", 1, 6),
             (troop_slot_ge, "trp_temp_array_a", ":t", ":strongest_team_count"),
             (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", ":t"),
             (assign, ":strongest_team", ":t"),
           (try_end),
           (store_random_in_range, ":rand", 5, 100),
           (try_begin),
             (lt, ":rand", "$g_arena_training_num_agents_spawned"),
             (assign, ":selected_team", ":strongest_team"),
           (try_end),
           (agent_set_team, ":agent_no", ":selected_team"),
         (try_end),
         (agent_set_slot, ":agent_no", slot_agent_arena_team_set, 1),
         (try_begin),
           (neq, ":agent_no", ":player_agent"),
           (val_add, "$g_arena_training_num_agents_spawned", 1),
         (try_end),
       (try_end),
       ]),

#LAZERAS MODIFIED  {lancer backup weapon}   
   # For lancers in tournaments (who've been equipped with a backup weapon).
   # Note:  It appears that (agent_set_wielded_item, <agent_id>, <item_id>),
   # will only change the wielded weapon if the one you request that they
   # switch to is in their inventory somewhere.  So it's safe to ask all NPCs
   # in a battle to switch items to a particular one as only the ones that have
   # said item will switch.  This is very handy.
   # Force mounted NPCs to switch to their lance.  This is called once at the
   # start of the battle.
   (0, 1, ti_once, [(eq, "$g_mt_mode", abm_tournament),],
   [
      # Run through all active NPCs on the tournament battle field.
      (try_for_agents, ":agent"),
        # Isn't a player.
        (agent_is_non_player, ":agent"),
        # Isn't a horse.
        (agent_is_human, ":agent"),
        # Hasn't been defeated.
        (agent_is_alive, ":agent"),
        # They riding a horse?
        (agent_get_horse, ":horse", ":agent"),
        # Is riding a horse.
        (gt, ":horse", 0),
        # Get wielded item.
        (agent_get_wielded_item, ":wielded", ":agent", 0),
        # Is it a practice lance? 
        (neq, ":wielded", "itm_practice_lance"),
        # Force the NPC to wield the lance, but this will only happen if they
        # actually have a lance in their inventory.  Otherwise this does
        # nothing.  So those armed normally with sword/shield, two-handed
        # swords, axe/shield, bow/sword, bow/crossbow etc. wont be affected.
        (agent_set_wielded_item, ":agent", "itm_practice_lance"),
      (try_end),   
   ]),
   
   # Check to make sure there are no lance users on foot, if so force them to
   # switch to their sword.
   (0, 0, 1, [(eq, "$g_mt_mode", abm_tournament),],
   [
      # Run through all active NPCs on the tournament battle field.
      (try_for_agents, ":agent"),
        # Isn't a player.
        (agent_is_non_player, ":agent"),
        # Isn't a horse.
        (agent_is_human, ":agent"),
        # Hasn't been defeated.
        (agent_is_alive, ":agent"),
        # They riding a horse?
        (agent_get_horse, ":horse", ":agent"),
        # Isn't riding a horse.
        (le, ":horse", 0),
        # Get wielded item.
        (agent_get_wielded_item, ":wielded_item", ":agent", 0),
        # Is it a practice lance?
        (eq, ":wielded_item", "itm_practice_lance"),
        # Equip their backup weapon.  We've preset this to be a sword.
        (agent_set_wielded_item, ":agent", "itm_practice_sword"),
      (try_end),
   ]),
#LAZERAS MODIFIED  {lancer backup weapon}
  ]

mission_templates = [
  (
    "town_default",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_scene_source,af_override_horse,0,1,[]),
     (10,mtef_scene_source,af_override_horse,0,1,[]),
     (11,mtef_scene_source,af_override_horse,0,1,[]),
     (12,mtef_scene_source,af_override_horse,0,1,[]),
     (13,mtef_scene_source,0,0,1,[]),
     (14,mtef_scene_source,0,0,1,[]),
     (15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),
     (17,mtef_visitor_source,af_override_horse,0,1,[]),
     (18,mtef_visitor_source,af_override_horse,0,1,[]),
     (19,mtef_visitor_source,af_override_horse,0,1,[]),
     (20,mtef_visitor_source,af_override_horse,0,1,[]),
     (21,mtef_visitor_source,af_override_horse,0,1,[]),
     (22,mtef_visitor_source,af_override_horse,0,1,[]),
     (23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),
     (25,mtef_visitor_source,af_override_horse,0,1,[]),
     (26,mtef_visitor_source,af_override_horse,0,1,[]),
     (27,mtef_visitor_source,af_override_horse,0,1,[]),
     (28,mtef_visitor_source,af_override_horse,0,1,[]),
     (29,mtef_visitor_source,af_override_horse,0,1,[]),
     (30,mtef_visitor_source,af_override_horse,0,1,[]),
     (31,mtef_visitor_source,af_override_horse,0,1,[]),
     ## Tavern Animation Pack by Daedalus
     (1,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#32
     (2,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#33
     (3,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#34
     (4,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#35
     (5,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#36
     (6,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#37
     (7,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#38
     (8,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#39
     (10,mtef_visitor_source,af_override_horse|af_override_gloves,0,1,[]),#40
     ## Tavern Animation Pack end
     ],     
     [
      dedal_tavern_animations,  ## Tavern Animation Pack by Daedalus
      
      (1, 0, ti_once, [], 
      [
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),
	  		  	        
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_initialize_tavern_variables"),
	  ]),

      (ti_inventory_key_pressed, 0, 0, 
      [
        (set_trigger_result,1)
      ], []),
      
      #tavern - belligerent drunk leaving/fading out
      (1, 0, 0, 
      [
        (gt, "$g_belligerent_drunk_leaving", 0),
        (entry_point_get_position, pos0, 0),
        (agent_get_position, pos1, "$g_belligerent_drunk_leaving"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (le, ":dist", 150),
      ],
      [
        (agent_fade_out, "$g_belligerent_drunk_leaving"),
        (assign, "$g_belligerent_drunk_leaving", 0),
      ]),
      
      (ti_tab_pressed, 0, 0, 
      [
        (try_begin),
          (eq, "$g_main_attacker_agent", 0),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (set_trigger_result, 1),
        (try_end),  
      ], []),

	  #tavern brawl triggers - drunk
      (2, 0, 0, 
      [
	    (neg|conversation_screen_is_active),

		(eq, "$talk_context", tc_tavern_talk),
		
		(neg|troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),		
		(troop_slot_eq, "trp_belligerent_drunk", slot_troop_cur_center, "$g_encountered_party"),		
		(eq, "$drunks_dont_pick_fights", 0),		
	  ], 
	  [	  
	    (try_begin),
	      (eq, "$g_start_belligerent_drunk_fight", 0),
	      (assign, "$g_start_belligerent_drunk_fight", 1),
	      
	      (try_for_agents, ":cur_agent"),
	        (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
	        (eq, ":cur_agent_troop", "trp_belligerent_drunk"),
	        (assign, "$g_belligerent_drunk", ":cur_agent"),
	      (try_end),
	    (else_try),
	      (eq, "$g_start_belligerent_drunk_fight", 1),	 
	           
	      (agent_is_active, "$g_belligerent_drunk"),
	      (agent_is_alive, "$g_belligerent_drunk"),
	      (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),
	      (agent_get_position, pos1, "$g_belligerent_drunk"),
	      (get_distance_between_positions, ":dist", pos0, pos1),
	      (position_get_z, ":pos0_z", pos0),
	      (position_get_z, ":pos1_z", pos1),
	      (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
	      (try_begin),
	        (le, ":z_difference", 0),
	        (val_mul, ":z_difference", -1),
	      (try_end),
	      (store_mul, ":z_difference_mul_3", ":z_difference", 3),
	      (val_add, ":dist", ":z_difference_mul_3"),
	      (store_random_in_range, ":random_value", 0, 200),
	      (store_add, ":400_plus_random_200", 400, ":random_value"),
	      (le, ":dist", ":400_plus_random_200"),
	      
 		  (call_script, "script_activate_tavern_attackers"),
  		  (start_mission_conversation, "trp_belligerent_drunk"),
  		  (assign, "$g_start_belligerent_drunk_fight", 2),
	    (try_end),  
	  ]),
	  	  
	  #tavern brawl triggers - assassin
      (2, 0, 0, [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),		
	  ], 
	  [
	    (try_begin),
	      (eq, "$g_start_hired_assassin_fight", 0),
	      (assign, "$g_start_hired_assassin_fight", 1),
	      
	      (try_for_agents, ":cur_agent"),
	        (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
	        (eq, ":cur_agent_troop", "trp_hired_assassin"),
	        (assign, "$g_hired_assassin", ":cur_agent"),
	      (try_end),	      
	    (else_try),  
	      (eq, "$g_start_hired_assassin_fight", 1),

	      (agent_is_active, "$g_hired_assassin"),
	      (agent_is_alive, "$g_hired_assassin"),
	      (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),
	      (agent_get_position, pos1, "$g_hired_assassin"),
	      (get_distance_between_positions, ":dist", pos0, pos1),
	      (position_get_z, ":pos0_z", pos0),
	      (position_get_z, ":pos1_z", pos1),
	      (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
	      (try_begin),
	        (le, ":z_difference", 0),
	        (val_mul, ":z_difference", -1),
	      (try_end),
	      (store_mul, ":z_difference_mul_3", ":z_difference", 3),
	      (val_add, ":dist", ":z_difference_mul_3"),
	      (store_random_in_range, ":random_value", 0, 200),
	      (store_add, ":400_plus_random_200", 400, ":random_value"),
	      (le, ":dist", ":400_plus_random_200"),

		  (call_script, "script_activate_tavern_attackers"),
		  (assign, "$g_start_hired_assassin_fight", 2),
		(try_end),  
	  ]),
	  	  
	  #Aftermath talks
      (3, 0, ti_once, 
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),
				
		(this_or_next|neg|agent_is_alive, "$g_main_attacker_agent"),
		(agent_is_wounded, "$g_main_attacker_agent"),
      ],
      [
        (mission_enable_talk),
      
		(try_for_agents, ":agent"),
		  (agent_is_alive, ":agent"),
		  (agent_get_position, pos4, ":agent"),
		  (agent_set_scripted_destination, ":agent", pos4),
		(try_end),
		
		(party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
		(start_mission_conversation, ":tavernkeeper"),	 
	  ]),

	  
	  #Aftermath talks
      (3, 0, ti_once, 
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),
		(main_hero_fallen),		
      ],
      [
      ## CC-D begin: over hp fix
      (call_script, "script_ccc_last_agent_hp_fix"),
      ## CC-D end
	  (jump_to_menu, "mnu_lost_tavern_duel"),
	  (finish_mission,0)
	  
	  ]),	  
	  
	  
	  #No shooting in the tavern
      (1, 0, 0, 
      [
	    (neg|conversation_screen_is_active),
		(eq, "$talk_context", tc_tavern_talk),
		(gt, "$g_main_attacker_agent", 0),
		
		(get_player_agent_no, ":player_agent"),
		(agent_is_alive, ":player_agent"),
		
		(agent_get_wielded_item, ":wielded_item", ":player_agent", 0),
		(is_between, ":wielded_item", "itm_darts", "itm_torch"),
		(neq, ":wielded_item", "itm_javelin_melee"),
		(neq, ":wielded_item", "itm_throwing_spear_melee"),
		(neq, ":wielded_item", "itm_jarid_melee"),
		(neq, ":wielded_item", "itm_light_throwing_axes_melee"),
		(neq, ":wielded_item", "itm_throwing_axes_melee"),
		(neq, ":wielded_item", "itm_heavy_throwing_axes_melee"),
      ], 
      [
		(party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
		##diplomacy start+
		#Turn of this !@#$%ing obnoxious and totally illogical restriction provided:
		(try_begin),
			#1) there is an actual fight
			(gt, "$g_main_attacker_agent", 0),
			(agent_is_alive, "$g_main_attacker_agent"),
			(neg|agent_is_wounded, "$g_main_attacker_agent"),
			#2) the player is the lord of this town, a mercenary captain in the kingdom's employ, or ruler of this kingdom
			(store_faction_of_party , ":center_faction", "$g_encountered_party"),
			(this_or_next|eq, ":center_faction", "$players_kingdom"),
				(eq, ":center_faction", "fac_player_supporters_faction"),
		(else_try),
		#Else, original behavior:
			(start_mission_conversation, ":tavernkeeper"),
		(try_end),
		##diplomacy stop+
	  ]),
	  	  	  
	  #Check for weapon in hand of attacker, also, everyone gets out of the way
      (1, 0, 0, 
      [
		(gt, "$g_main_attacker_agent", 0),	
      ],
      [
        (agent_get_wielded_item, ":wielded_item", "$g_main_attacker_agent", 0),
        (val_max, "$g_attacker_drawn_weapon", ":wielded_item"),               
        
        (call_script, "script_neutral_behavior_in_fight"),
      ]),	  			
    ] + custom_commander_commom_triggers_without_kick, ## CC
  ),

# This template is used in party encounters and such.
# 
  (
    "conversation_encounter",0,-1,
    "Conversation_encounter",
    [
     ##CC-C begin
     ( 0,mtef_visitor_source,0,0,1,[]),( 1,mtef_visitor_source,0,0,1,[]),
     ( 2,mtef_visitor_source,0,0,1,[]),( 3,mtef_visitor_source,0,0,1,[]),( 4,mtef_visitor_source,0,0,1,[]),( 5,mtef_visitor_source,0,0,1,[]),( 6,mtef_visitor_source,0,0,1,[]),
     ( 7,mtef_visitor_source,0,0,1,[]),( 8,mtef_visitor_source,0,0,1,[]),( 9,mtef_visitor_source,0,0,1,[]),(10,mtef_visitor_source,0,0,1,[]),(11,mtef_visitor_source,0,0,1,[]),
    #prisoners now...
     (12,mtef_visitor_source,0,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_visitor_source,0,0,1,[]),(15,mtef_visitor_source,0,0,1,[]),(16,mtef_visitor_source,0,0,1,[]),
    #Other party
     (17,mtef_visitor_source,0,0,1,[]),(18,mtef_visitor_source,0,0,1,[]),(19,mtef_visitor_source,0,0,1,[]),(20,mtef_visitor_source,0,0,1,[]),(21,mtef_visitor_source,0,0,1,[]),
     (22,mtef_visitor_source,0,0,1,[]),(23,mtef_visitor_source,0,0,1,[]),(24,mtef_visitor_source,0,0,1,[]),(25,mtef_visitor_source,0,0,1,[]),(26,mtef_visitor_source,0,0,1,[]),
     (27,mtef_visitor_source,0,0,1,[]),(28,mtef_visitor_source,0,0,1,[]),(29,mtef_visitor_source,0,0,1,[]),(30,mtef_visitor_source,0,0,1,[]),(31,mtef_visitor_source,0,0,1,[]),
     ##CC-C end
     ],
    [],
  ),
  
#----------------------------------------------------------------
#mission templates before this point are hardwired into the game.
#-----------------------------------------------------------------

  (
    "town_center",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),     
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,0,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),
	 (23,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (24,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	 (25,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	 (26,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	 (27,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	 (28,mtef_visitor_source,af_override_horse,0,1,[]), #guard
	 (29,mtef_visitor_source,af_override_horse,0,1,[]),
	 (30,mtef_visitor_source,af_override_horse,0,1,[]),
	 (31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),
	 (33,mtef_visitor_source,af_override_horse,0,1,[]),
	 (34,mtef_visitor_source,af_override_horse,0,1,[]),
	 (35,mtef_visitor_source,af_override_horse,0,1,[]),
	 (36,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
	 (37,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
	 (38,mtef_visitor_source,af_override_horse,0,1,[]),
	 (39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	 (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	 (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	 (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	 (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	 (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	 (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),		  
          (troop_slot_eq, ":troop_no", slot_troop_will_join_prison_break, 1),
          ## CC begin
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (agent_set_team, ":agent_no", ":player_team"),
          ## CC end
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),
          #CC-C begin
          (agent_ai_set_aggressiveness, ":agent_no", 70),
          (agent_set_is_alarmed,":agent_no",1),
          (agent_force_rethink,":agent_no"),
          #CC-C end
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),            
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (try_end),         
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (assign, "$g_main_attacker_agent", 0),
	  ]),
		 
      (1, 0, ti_once, 
      [],
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_end),
        (call_script, "script_init_town_walker_agents"),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),

      (ti_before_mission_start, 0, 0, 
      [], 
      [
        (call_script, "script_change_banners_and_chest")
      ]),
        
      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ], 
      []),
       
      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          (mission_enable_talk),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (set_trigger_result,1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], 
      []),

      (ti_on_leave_area, 0, 0,
      [
        (try_begin),
          (eq, "$g_defending_against_siege", 0),
          (assign,"$g_leave_town",1),
        (try_end),			
      ], 
      [
        (try_begin),
          (eq, "$talk_context", tc_escape),
          (call_script, "script_deduct_casualties_from_garrison"),
          (jump_to_menu,"mnu_sneak_into_town_caught_dispersed_guards"),
        (try_end),
        
        (mission_enable_talk),
      ]),            

     (0, 0, ti_once, 
     [], 
     [
       (party_slot_eq, "$current_town", slot_party_type, spt_town),
       (call_script, "script_town_init_doors", 0),
       (try_begin),
         (eq, "$town_nighttime", 0),
         (play_sound, "snd_town_ambiance", sf_looping),
       (try_end),
     ]),

	(3, 0, 0, 
	[
	  (call_script, "script_tick_town_walkers")
	], 
	[]),
	
    (2, 0, 0, 
    [
      (call_script, "script_center_ambiance_sounds")
    ], 
    []),
		
	#JAILBREAK TRIGGERS 
	#Civilians get out of the way
    (1, 0, 0,
	[
	  (this_or_next|eq, "$talk_context", tc_prison_break),
      (eq, "$talk_context", tc_escape),		
	],
	[
	  #(agent_get_team, ":prisoner_agent", 0),
	  (call_script, "script_neutral_behavior_in_fight"),
	  (mission_disable_talk),	  	  
	]),

	#The game begins with the town alerted
    (1, 0, ti_once, 
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
	  ],	  
	  [
		(get_player_agent_no, ":player_agent"),
	    (assign, reg6, ":player_agent"),
		(call_script, "script_activate_town_guard"),		
		
		(get_player_agent_no, ":player_agent"),
		(agent_get_position, pos4, ":player_agent"),
		
		(try_for_range, ":prisoner", active_npcs_begin, kingdom_ladies_end),		
		  (troop_slot_ge, ":prisoner", slot_troop_mission_participation, mp_prison_break_fight),

		  (str_store_troop_name, s4, ":prisoner"),
		  (display_message, "str_s4_joins_prison_break"),
			
		  (store_current_scene, ":cur_scene"), #this might be a better option?
		  (modify_visitors_at_site, ":cur_scene"),
			            
          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>), 
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode            
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),                      
          (add_visitors_to_current_scene, 24, ":prisoner", 1, 0, 0),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1),					          
        (try_end),
	  ]),
	
   (3, 0, 0, 
   [     
     (main_hero_fallen, 0),
   ],	  
   [
     (try_begin),
       (this_or_next|eq, "$talk_context", tc_prison_break),
       (eq, "$talk_context", tc_escape),
       
       (call_script, "script_deduct_casualties_from_garrison"),
	   (jump_to_menu,"mnu_captivity_start_castle_defeat"), 
	 
	   (assign, ":end_cond", kingdom_ladies_end),
       (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
  	     (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new	  
  	   (try_end),  
	 
	   (mission_enable_talk),
	   (finish_mission, 0),
	 (else_try),  
	   ## CC-D begin: over hp fix
	   (call_script, "script_ccc_last_agent_hp_fix"),
	   ## CC-D end
	   (set_trigger_result,1),
	 (try_end),	 	 
   ]),
		
   (3, 0, 0, 
   [
     (eq, "$talk_context", tc_escape),
	 (neg|main_hero_fallen,0),
     (store_mission_timer_a, ":time"),
     (ge, ":time", 10),
		
     (all_enemies_defeated), #1 is default enemy team for in-town battles
   ],	  
   [
     (call_script, "script_deduct_casualties_from_garrison"),
	 (try_for_agents, ":agent"),
	 (agent_get_troop_id, ":troop", ":agent"),
       (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
       (try_begin),
         (agent_is_alive, ":agent"),
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
       (else_try),	
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
       (try_end),
     (try_end),
     (jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),
     
     (mission_enable_talk),
     (finish_mission,0)
   ]),
   
   (ti_on_agent_killed_or_wounded, 0, 0, [],
   [
     (store_trigger_param_1, ":dead_agent_no"),
     (store_trigger_param_2, ":killer_agent_no"),
     #(store_trigger_param_3, ":is_wounded"),
        
     (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
     (ge, ":killer_agent_no", 0),  ## CC-D fix
     (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),
                
     (try_begin), 
       (this_or_next|eq, ":dead_agent_troop_no", "trp_swadian_prison_guard"),
       (this_or_next|eq, ":dead_agent_troop_no", "trp_vaegir_prison_guard"),
       (this_or_next|eq, ":dead_agent_troop_no", "trp_khergit_prison_guard"),
       (this_or_next|eq, ":dead_agent_troop_no", "trp_nord_prison_guard"),
       (this_or_next|eq, ":dead_agent_troop_no", "trp_rhodok_prison_guard"),
#CC-C begin add faction
        (this_or_next|eq, ":dead_agent_troop_no", "trp_psf_prison_guard"),
        (this_or_next|eq, ":dead_agent_troop_no", "trp_ccc_dark_knight_prison_guard"),
#CC-C end
       (eq, ":dead_agent_troop_no", "trp_sarranid_prison_guard"),
          
       (eq, ":killer_agent_troop_no", "trp_player"),
          
       (display_message, "@You got keys of dungeon."),
     (try_end),
   ]),     
   
	#occc
	occc_vyrn_ai,
	#occc_vyrn_ai_continue,

  ] + custom_commander_commom_triggers, ## CC
 ),

  (
    "village_center",0,-1,
    "village center",
    [(0,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,0,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_visitor_source,0,0,1,[]),(15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,0,1,[]),(28,mtef_visitor_source,af_override_horse,0,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source,af_override_horse,0,1,[]),(41,mtef_visitor_source,af_override_horse,0,1,[]),(42,mtef_visitor_source,af_override_horse,0,1,[]),(43,mtef_visitor_source,af_override_horse,0,1,[]),(44,mtef_visitor_source,af_override_horse,0,1,[]),(45,mtef_visitor_source,af_override_horse,0,1,[]),(46,mtef_visitor_source,af_override_horse,0,1,[]),(47,mtef_visitor_source,af_override_horse,0,1,[]),
     ],
    [
      (1, 0, ti_once, [], [
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
          (call_script, "script_init_town_walker_agents"),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
        ]),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_hunt_down_fugitive"),
                                (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                                (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                                (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
								(quest_get_slot, ":target_trp", "qst_hunt_down_fugitive", slot_quest_temp_slot),#occc
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", ":target_trp"),#occc trp_fugitive->:target_trp
                                  (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
                                (try_end),
                              (try_end),
                              ## CC-D begin: over hp fix
                              (call_script, "script_ccc_last_agent_hp_fix"),
                              ## CC-D end
                              (set_trigger_result,1)], []),
      (ti_on_leave_area, 0, 0, [
          (try_begin),
            (assign,"$g_leave_town",1),
          (try_end),
          ], []),
      (3, 0, 0, [(call_script, "script_tick_town_walkers")], []),
      (2, 0, 0, [(call_script, "script_center_ambiance_sounds")], []),

      (1, 0, ti_once, [(check_quest_active, "qst_hunt_down_fugitive"),
                       (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                       (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                       (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
                       (quest_get_slot, ":target_trp", "qst_hunt_down_fugitive", slot_quest_temp_slot),#occc
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", ":target_trp"),#occc trp_fugitive->:target_trp
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_change_player_relation_with_center", "$current_town", -2),
          (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
        (try_end),
        ]),
	#occc
	occc_vyrn_ai,
	#occc_vyrn_ai_continue,
    ] + custom_commander_commom_triggers_without_kick, ## CC
  ),

  (
    "bandits_at_night",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,
      
      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_town_bandits_failed"),
         (else_try),
           (jump_to_menu, "mnu_town_bandits_succeeded"),
         (try_end),
         (finish_mission),
         ]),
      ## CC begin
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      ## CC end
      ] + custom_commander_commom_triggers, ## CC
    ),

  
  (
    "village_training", mtf_arena_fight, -1,
    "village_training",
    [(2,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_train_peasants_against_bandits_training_succeeded", 0),
         (call_script, "script_change_banners_and_chest"),
         ]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         ]),
      
      common_inventory_not_available,

      (1, 4, ti_once,
       [
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_train_peasants_against_bandits_training_succeeded", 1),
         (try_end),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers_training, ## occc
    ),
## CC-D begin
  (
    "ccd_castle_training", mtf_arena_fight, -1,
    "castle_training",
    [(0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,12,[]),
     (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,12,[]),
     ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_ccd_castle_train", 0),
         (call_script, "script_change_banners_and_chest"),
         ]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         ]),
      
      common_inventory_not_available,
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,

      (1, 4, ti_once,
       [
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_ccd_castle_train", 1),
         (try_end),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers, ## CC
    ),
## CC-D end
    
  (
    "visit_town_castle",0,-1,
    "You enter the halls of the lord.",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),  ## CC-D del: |af_override_head
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), 
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),
     (10,mtef_scene_source,af_override_horse,0,1,[]),
     (11,mtef_scene_source,af_override_horse,0,1,[]),
     (12,mtef_visitor_source,af_override_horse,0,1,[]),
     (13,mtef_visitor_source,0,0,1,[]),
     (14,mtef_visitor_source,0,0,1,[]),
     (15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_castle_lord,0,1,[]),
     (17,mtef_visitor_source,af_castle_lord,0,1,[]),
     (18,mtef_visitor_source,af_castle_lord,0,1,[]),
     (19,mtef_visitor_source,af_castle_lord,0,1,[]),
     (20,mtef_visitor_source,af_castle_lord,0,1,[]),
     (21,mtef_visitor_source,af_castle_lord,0,1,[]),
     (22,mtef_visitor_source,af_castle_lord,0,1,[]),
     (23,mtef_visitor_source,af_castle_lord,0,1,[]),
     (24,mtef_visitor_source,af_castle_lord,0,1,[]),
     (25,mtef_visitor_source,af_castle_lord,0,1,[]),
     (26,mtef_visitor_source,af_castle_lord,0,1,[]),
     (27,mtef_visitor_source,af_castle_lord,0,1,[]),
     (28,mtef_visitor_source,af_castle_lord,0,1,[]),
     (29,mtef_visitor_source,af_castle_lord,0,1,[]),
     (30,mtef_visitor_source,af_castle_lord,0,1,[]),
     (31,mtef_visitor_source,af_castle_lord,0,1,[])
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
      ]),
      
      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
      ]),
       
      (ti_inventory_key_pressed, 0, 0, 
      [
        (set_trigger_result,1)
      ], []),
	  
	  
	  occc_female_lords_show_face_in_castle,#occc
	  
	  #adjust for prison break
      (ti_tab_pressed, 0, 0,
	  [
	    (neq, "$talk_context", tc_prison_break),
	    ## CC-D begin: over hp fix
	    (call_script, "script_ccc_last_agent_hp_fix"),
	    ## CC-D end
	    (set_trigger_result,1)
	  ], []),
	  
      (ti_on_leave_area, 0, 0,
      [
 	    (eq, "$talk_context", tc_prison_break),
 	  ], 
	  [
	    (display_message, "str_leaving_area_during_prison_break"),
        ## CC-D begin: over hp fix
        (call_script, "script_ccc_last_agent_hp_fix"),
        ## CC-D end
	    (set_jump_mission, "mt_sneak_caught_fight"),
	  ]),
	 	  
      (0, 0, ti_once, [], [
        #(set_fog_distance, 150, 0xFF736252)
        (try_begin),
          (eq, "$talk_context", tc_court_talk),
          (try_begin),
            (store_faction_of_party, ":center_faction", "$current_town"),
            (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
            (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
            (call_script, "script_music_set_situation_with_culture", mtf_sit_feast),
            #(call_script, "script_music_set_situation_with_culture", mtf_sit_lords_hall),
          ## CC-D begin
          (else_try),
            (call_script, "script_music_set_situation_with_culture", mtf_sit_lords_hall),
          ## CC-D end
          (try_end),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", 0), #prison
        (try_end),
        ]),
      ## CC begin
      (0, 0, 0.5, [], [
        (key_is_down, key_right_mouse_button),
        (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (prop_instance_get_position, pos1, ":player_chest"),
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos2, ":player_agent"),
        (get_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 300),
        (start_presentation, "prsnt_deposit_withdraw_money"),
      ]),
      
      (3, 0, 12, [(neg|conversation_screen_is_active)], [  #BUGFIX - Caba
        (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (prop_instance_get_position, pos1, ":player_chest"),
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos2, ":player_agent"),
        (get_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 300),
        (neg|is_presentation_active, "prsnt_deposit_withdraw_money"),
        (display_message, "@Go near the chest and hold down the right mouse button for a while, then you can deposit or withdraw money from the chest."),
      ]),
      ## CC end
    ] + custom_commander_commom_triggers_without_kick, ## CC 
  ),

		  
  (
    "back_alley_kill_local_merchant",mtf_battle_mode,-1,
    "You enter the back alley",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         ]),

      (0, 0, ti_once, [
          (store_mission_timer_a,":cur_time"),
          (ge,":cur_time",1), 
          (assign, ":merchant_hp", 0),
          (assign, ":player_hp", 0),
          (assign, ":merchant_hp", 0),
          (assign, ":merchant_agent", -1),
          (assign, ":player_agent", -1),
          (try_for_agents, ":agent_no"),
            (agent_get_troop_id, ":troop_id", ":agent_no"),
            (try_begin),
              (eq, ":troop_id", "trp_local_merchant"),
              (store_agent_hit_points, ":merchant_hp", ":agent_no"),
              (assign, ":merchant_agent", ":agent_no"),
            (else_try),
              (eq, ":troop_id", "trp_player"),
              (store_agent_hit_points, ":player_hp",":agent_no"),
              (assign, ":player_agent", ":agent_no"),
            (try_end),
          (try_end),
          (ge, ":player_agent", 0),
          (ge, ":merchant_agent", 0),
          (agent_is_alive, ":player_agent"),
          (agent_is_alive, ":merchant_agent"),
          (is_between, ":merchant_hp", 1, 30),
          (gt, ":player_hp", 50),
          (start_mission_conversation, "trp_local_merchant"),
          ], []),
      
      (1, 4, ti_once, [(assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "trp_local_merchant"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1)],
       [
           ## CC-D begin: over hp fix
           (call_script, "script_ccc_last_agent_hp_fix"),
           ## CC-D end
           (try_begin),
             (main_hero_fallen),
             (call_script, "script_fail_quest", "qst_kill_local_merchant"),
           (else_try),
             (call_script, "script_change_player_relation_with_center", "$current_town", -4),
             (call_script, "script_succeed_quest", "qst_kill_local_merchant"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers, ## CC
  ),

  (
    "back_alley_revolt",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [(0,mtef_team_0|mtef_use_exact_number,af_override_horse|af_override_weapons|af_override_head,aif_start_alarmed,4,[itm_quarter_staff]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      common_inventory_not_available,

      common_battle_init_banner,

      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_want_to_retreat"),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
        (jump_to_menu, "mnu_collect_taxes_failed"),
        (finish_mission),]),

      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
		 #occc extramusic
		 	#occc start
		(try_begin),
			(ge,"$occc_extramusic",1),
			(call_script, "script_occc_encounter_extra_music"),
			(assign,"$occc_extramusic",0),
		(try_end),#occc

         ]),

      (1, 4, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
       [
           ## CC-D begin: over hp fix
           (call_script, "script_ccc_last_agent_hp_fix"),
           ## CC-D end
           (try_begin),
             (main_hero_fallen),
             (jump_to_menu, "mnu_collect_taxes_failed"),
           (else_try),
             (jump_to_menu, "mnu_collect_taxes_rebels_killed"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers, ## CC
  ),

  (
    "lead_charge",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [
      (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,12,[]),#CC-C
     (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
      (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,12,[]),#CC-C
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         #(agent_ai_set_aggressiveness,":agent_no",200),  ##CC-C add cave09  ## CC-D del
         (assign, ":initial_courage_score", 4150),#occc 5000->4000->4150
                  
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 40), #chief aumenta a 35 moral por nivel de tropa... OCCC 35 -> 40
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700
		#courage bonus
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (try_begin),
                (eq,":troop_id","trp_occc_vaegir_musician"),
				(val_add, ":initial_courage_score", 500), 
		(else_try),
                (eq,":troop_id","trp_occc_rhodok_signifer"),
				(val_add, ":initial_courage_score", 500), 
         (try_end), 
		#       

		 
         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500 
         (val_add, ":initial_courage_score", ":randomized_addition_courage"), 
                   
         (agent_get_party_id, ":agent_party", ":agent_no"),
         (ge, ":agent_party", 0), ## CC
         (party_get_morale, ":cur_morale", ":agent_party"),
         
         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"), 
         
         #average = 5000 + 700 + 1500 = 7200; min : 5700, max : 8700
         #morale effect = min : -2100(party morale is 0), average : 0(party morale is 70), max : 900(party morale is 100)
         #min starting : 3600, max starting  : 9600, average starting : 7200
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"), 
         ]),
		 
		 #Project Age Of Machinery begin-----------------------------------------------
      (ti_before_mission_start,0,0,[(eq,"$g_occc_age_of_machinery",1),(eq,"$occc_use_machinery_map",1),],#cannon placement
      [
	  (assign,"$artillery_firing",1),#occc set
      (call_script,"script_artillery_variables_reset"),
      (call_script,"script_field_artillery_spawn_a"),
      ]),
      (0,0.1,ti_once,[(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0),(eq,"$occc_use_machinery_map",1),],
      [(call_script,"script_field_artillery_spawn_b"),
      ]),
      (3,0,0,[(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0)],#cannon ready for fire?
      [(call_script,"script_prepare_artillery"),
      ]),
      (1,0.5,0,#cannon fire
      [(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0),
      (call_script,"script_artillery_fire_a"),
      ],
      [(call_script,"script_artillery_fire_b"),
      ]),
      (0.1,0,0,[(eq,"$occc_use_machinery_map",1),(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0)],[(val_add,"$timer_arty",1)]),
      (0.1,0,0,[(eq,"$occc_use_machinery_map",1),(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0)],
      [
      (assign,reg1,"$timer_arty"),
      (val_sub,reg1,"$last_time"),
      (gt,reg1,0),
      (val_add,"$last_time",reg1),
      (try_for_range,":ammo","spr_cannonball","spr_cannonball_start_position"),
      (scene_prop_get_num_instances,":num_cannonballs",":ammo"),
      (try_for_range,":instance_no",0,":num_cannonballs"),
       (scene_prop_get_instance,":instance", ":ammo", ":instance_no"),
       (item_get_slot,":moving",":instance",216),
       (try_begin),
        (eq,":moving",1),
        (item_get_slot,":time",":instance",215),
        (val_add,":time",reg1),
        (item_set_slot,":instance",215,":time"),
       (else_try),
        (call_script,"script_get_cannon_instance",":instance_no"),
        (item_get_slot,":time",reg0,206),
        (val_sub,":time",reg1),
        (item_set_slot,reg0,206,":time"),
       (try_end),
      (try_end),
      (try_end),
      ]),
      (0.1,0,0,[(eq,"$occc_use_machinery_map",1),(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0)],
      [(call_script,"script_projectile_physics_field"),
      ]),
      (0,1,10,[(eq,"$occc_use_machinery_map",1),(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0)],
      [
      (try_for_agents,":agent_no"),
	 (agent_get_troop_id,":troop_id",":agent_no"),
	 (is_between,":troop_id","trp_foot_gunner","trp_new_array_a"),
         (agent_is_alive,":agent_no"),
	 (agent_slot_eq,":agent_no",12,0),
	 (agent_get_team,":agent_team",":agent_no"),
	 (try_begin),
	   (neg|teams_are_enemies,":agent_team",1),
	   (assign,":agent_team",1),
	   (val_add,"$team1_gunner_spawn",1),
	   (assign,":num_cannons","$team1_num_cannons"),
	   #(assign,":num_other_cannons","$team0_num_cannons"),
	   (assign,":num_gunners","$team1_gunner_spawn"),
         (else_try),
	   (neg|teams_are_enemies,":agent_team",0),
	   (assign,":agent_team",0),
	   (val_add,"$team0_gunner_spawn",1),
	   (assign,":num_gunners","$team0_gunner_spawn"),
	   #(assign,":num_other_cannons","$team1_num_cannons"),
	   (assign,":num_cannons","$team0_num_cannons"),
	 (try_end),
	 (gt,":num_cannons",0),
	 (store_div,":line",":num_gunners",":num_cannons"),
	 (val_mod,":num_gunners",":num_cannons"),
	 (val_mul,":line",-100),
         #(get_player_agent_no,":player_agent"), #FIX HYPERCHARGE
#         (agent_get_team,":players_team",":player_agent"),
#	 (try_begin),
#	   (neq,":agent_team",":players_team"),
#           (val_add,":num_gunners",":num_other_cannons"),
#	 (try_end),
#	 (call_script,"script_get_cannon_instance",":num_gunners"),
	 (assign,":number",-1),
         (try_for_range,":scene_prop","spr_art_mangonel","spr_cannonball"),
           (scene_prop_get_num_instances,":num_instances",":scene_prop"),
           (try_for_range,":instance_no",0,":num_instances"),
	      (scene_prop_get_instance,":cannon_instance",":scene_prop",":instance_no"),
	      (item_slot_eq,":cannon_instance",204,":agent_team"),
	      (val_add,":number",1),
	      (eq,":number",":num_gunners"),
	      (assign,":instance",":cannon_instance"),
	   (try_end),
	 (try_end),
#	 (assign,":instance",reg0),
         (is_between,":instance",0,9999999),
	 (prop_instance_get_position,pos1,":instance"),
	 (position_move_x,pos1,-250),
	 (position_move_y,pos1,":line"),
	 (position_set_z,pos1,10000),
	 (position_set_z_to_ground_level,pos1),
	 (agent_set_slot,":agent_no",12,2),
	 (agent_set_slot,":agent_no",13,":instance"),
#	 (agent_set_position,":agent_no",pos1),
         (agent_set_scripted_destination,":agent_no",pos1),
      (try_end),
      ]),
	  #occc arty fire order
	(0, 0, 1,
  [ (eq,"$occc_use_machinery_map",1),(eq,"$g_occc_age_of_machinery",1),(eq,"$error_stop_artillery",0),
    (key_clicked, key_right_alt),
  ],
  [
	(try_begin),
	  (neq,"$artillery_firing",0),
	  (assign,"$artillery_firing",0),
	  (display_message,"@Artilleries, hold your fire!"),
	(else_try),
	  (assign,"$artillery_firing",1),
	  (display_message,"@Artilleries, fire at will!"),
	(try_end),
  ]),

#Project Age Of Machinery end-----------------------------------------------

      common_battle_init_banner,
		 
      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),  ##CC-C  ## CC-D add: select troop runaway
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
##          (str_store_troop_name, s6, ":dead_agent_troop_id"),
##          (assign, reg0, ":dead_agent_no"),
##          (assign, reg1, ":killer_agent_no"),
##          (assign, reg2, ":is_wounded"),
##          (agent_get_team, reg3, ":dead_agent_no"),          
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          ## CC-D begin: stop dead agent rivive to become prisoner
          ##CC-C
          #(store_random_in_range,":chance",0,10),
          #(this_or_next|eq,":chance",0),
          ##CC-C
          ## CC-D end
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),

        ## CC-D begin: select troop runaway
        (try_begin),
          (eq, "$g_ccd_no_run_away", 0),
        
        (call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),  ##CC-C
        
        (try_end),
        ## CC-D end
       ]),

      common_battle_tab_press,


      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_place_player_banner_near_inventory_bms"),

         (party_clear, "p_routed_enemies"),

         (assign, "$g_latest_order_1", 1), 
         (assign, "$g_latest_order_2", 1), 
         (assign, "$g_latest_order_3", 1), 
         (assign, "$g_latest_order_4", 1), 
         ]),

      
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC begin
                           ## CC-D begin: CC-C not use
                           #(assign, "$g_defender_reinforcement_limit", "$g_reinforcement_stage"),
                           ## CC-D end
                           ## CC-D begin: not use mordr_hold here, because PBOD has hold option
                           #(get_player_agent_no, ":player_agent"),
                           #(agent_get_team, ":player_team", ":player_agent"),
                           #(set_show_messages, 0),
                           #(team_give_order, ":player_team", grc_everyone, mordr_hold),
                           #(set_show_messages, 1),
                           ## CC-D end
                           ## CC end
                           ##diplomacy begin
                           (assign, "$g_dplmc_cam_activated", 0),
                           #(assign, "$g_dplmc_charge_when_dead", 0),  ##CC-C
                           ##diplomacy end
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,
	  ##occc start
	  occc_AI_horse_archer,
	  occc_elephant_trampling,
	  occc_extra_music_set,
	   
	 #occc
	 #When You playing as a Freelancer, let your companions follow you
	 (0, 0, ti_once, [(eq, "$freelancer_state", 1),], 
      [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (team_give_order, ":player_team", grc_everyone, mordr_follow),
      ]),

	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end
	  ##occc end

##CC-C begin
      #(1, 0, 5, [
                              
      #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
      #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
      #(call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
      #(assign, ":total_enemy_soldiers", reg0),
      
      #decrease number of agents already in battle area to find all number of reinforcement enemies
      #(assign, ":enemy_soldiers_in_battle_area", 0),
      #(try_for_agents,":cur_agent"),
        #(agent_is_human, ":cur_agent"),
        #(agent_get_party_id, ":agent_party", ":cur_agent"),
        #(try_begin),
          #(neq, ":agent_party", "p_main_party"),
          #(neg|agent_is_ally, ":cur_agent"),
          #(val_add, ":enemy_soldiers_in_battle_area", 1),
        #(try_end),
      #(try_end),
      #(store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

      #(try_begin),
        #(lt, ":total_enemy_reinforcements", 15),
        #(ge, "$defender_reinforcement_stage", 2),
        #(eq, "$defender_reinforcement_limit_increased", 0),
        #(val_add, "$g_defender_reinforcement_limit", 1),                    
        #(assign, "$defender_reinforcement_limit_increased", 1),
      #(try_end),    
      #new (25.11.09) ends
      
      
      
      
      
      
      #(lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
                 #(store_mission_timer_a,":mission_time"),
                 #(ge,":mission_time",10),
                 #(store_normalized_team_count,":num_defenders", 0),
                 #(lt,":num_defenders",6)],
           #[(add_reinforcements_to_entry,0,2), #CC-C
            #(assign, "$defender_reinforcement_limit_increased", 0),
            #(val_add,"$defender_reinforcement_stage",1),
           #]),
      
      #(1, 0, 5, [(lt,"$attacker_reinforcement_stage", "$g_reinforcement_stage"), ## CC
                 #(store_mission_timer_a,":mission_time"),
                 #(ge,":mission_time",10),
                 #(store_normalized_team_count,":num_attackers", 1),
                 #(lt,":num_attackers",6)],
           #[(add_reinforcements_to_entry,3,10), ## CC
            #(val_add,"$attacker_reinforcement_stage",1),
           #]),
##CC-C end

      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
            ]),

      common_battle_inventory,


      #AI Triggers
      (0, 0, ti_once, [
          (store_mission_timer_a,":mission_time"),(ge,":mission_time",2),
          ],
        [
## CC-D begin: to merge formAI
##CC-C begin AI
        (call_script, "script_ccc_select_battle_tactic"),
        (call_script, "script_ccc_battle_tactic_init"),

##CC-C end
#       (call_script, "script_select_battle_tactic"),
#       (call_script, "script_battle_tactic_init"),
## CC-D end
        #(call_script, "script_battle_calculate_initial_powers"), #deciding run away method changed and that line is erased
        ]),
      
#CC-C begin
      (1.1, 0, 0, [
          (store_mission_timer_a,":mission_time"),
          (ge,":mission_time",20),#
          (call_script, "script_ccc_battle_tactic_apply"),
      ], []), #applying battle tactic
#CC-C end

      (3, 0, 0, [
          ## CC-D begin: select troop runaway
          (try_begin),
            #(this_or_next|party_slot_eq, "p_main_party", slot_party_pref_formations, 1),  ## CC-D: add by ModMerger PBOD
            (eq, "$g_ccd_no_run_away", 0),
            
          (call_script, "script_apply_effect_of_other_people_on_courage_scores"),
            
          (try_end),
          ## CC-D end
              ], []), #calculating and applying effect of people on others courage scores

      (3, 0, 0, [
          ## CC-D begin: select troop runaway
          (try_begin),
            #(this_or_next|party_slot_eq, "p_main_party", slot_party_pref_formations, 1),  ## CC-D: add by ModMerger PBOD
            (eq, "$g_ccd_no_run_away", 0),
            
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),
			(neg|agent_slot_eq, ":agent_no", slot_agent_never_turnback, 1),#occc
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),          
            (call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
          (try_end),          
            
          (try_end),
          ## CC-D end
              ], []), #controlling courage score and if needed deciding to run away for each agent

##OCCC begin
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
		 (agent_get_troop_id,":troop_no",":agent_no"),
		 (this_or_next|is_between,":troop_no",undeads_begin,undeads_end),##occc undeads
		 (this_or_next|is_between,":troop_no","trp_nord_footman","trp_ccc_rhodok_tribesman"),##occc true nords never back down!!!!!
		 (is_between,":troop_no","trp_sarranid_mamluke","trp_ccc_dark_knight_tribesman"),#occc sarranid higher level troops never retreat
         (agent_set_slot, ":agent_no", slot_agent_never_turnback, 1),
         ]),

##OCCC end
			  
			  
#CC-C begin
#      (5, 0, 0, [
#          (store_mission_timer_a,":mission_time"),
#
#          (ge,":mission_time",3),
#          
#          (call_script, "script_battle_tactic_apply"),
#          ], []), #applying battle tactic
#CC-C end
      ## CC-D begin
      (300, 0, ti_once, [
        (store_character_level, ":player_level", "trp_player"),
        (gt, ":player_level", 20),
        
        (party_get_current_terrain, ":terrain_type", "p_main_party"),
        (is_between, ":terrain_type", rt_steppe, rt_bridge),
        
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),
        (is_between, ":encountered_party_template", bandit_party_template_begin, bandit_party_template_end),
        
        (store_random_in_range, ":random", 0, 100),
        (lt, ":random", 3),
        
        (neg|troop_slot_ge, "trp_ccd_overlord_red", slot_troop_prisoner_of_party, 0),
        
        (get_scene_boundaries, pos10, pos11),
        (assign, ":border_x", 0),
        (assign, ":border_y", 0),
        (assign, ":rotate_z", 0),
        (store_random_in_range, ":random", 0, 4),
        (try_begin),
          (eq, ":random", 0),
          (position_get_x, ":border_x", pos11),
          (val_div, ":border_x", 2),
          (position_get_y, ":border_y", pos10),
          (val_add, ":border_y", 100),
          (assign, ":rotate_z", 0),
        (else_try),
          (eq, ":random", 1),
          (position_get_x, ":border_x", pos10),
          (val_add, ":border_x", 100),
          (position_get_y, ":border_y", pos11),
          (val_div, ":border_y", 2),
          (assign, ":rotate_z", 270),
        (else_try),
          (eq, ":random", 2),
          (position_get_x, ":border_x", pos11),
          (val_sub, ":border_x", 100),
          (position_get_y, ":border_y", pos11),
          (val_div, ":border_y", 2),
          (assign, ":rotate_z", 90),
        (else_try),
          (eq, ":random", 3),
          (position_get_x, ":border_x", pos11),
          (val_div, ":border_x", 2),
          (position_get_y, ":border_y", pos11),
          (val_sub, ":border_y", 100),
          (assign, ":rotate_z", 180),
        (try_end),
        
        (init_position, pos1),
        (position_set_x, pos1, ":border_x"),
        (position_set_y, pos1, ":border_y"),
        (position_set_z_to_ground_level, pos1),
        (position_rotate_z, pos1, ":rotate_z"),
        
        (set_spawn_position, pos1),
        (troop_set_health, "trp_ccd_overlord_red", 100),
        (spawn_agent, "trp_ccd_overlord_red"),
        (agent_set_hit_points, reg0, 100),
        (agent_set_team, reg0, 7),
        (team_set_relation, 0, 7, -1),
        (team_set_relation, 1, 7, -1),
        (agent_set_is_alarmed, reg0, 1),
        (agent_ai_set_aggressiveness, reg0, 200),
        # (assign,"$occc_boss_agent",reg0),
		
        (display_message, "@Someone is entering this battle field."),
        (play_track, "track_ambushed_by_darkknight", 1),
        (play_sound, "snd_quest_failed"),
    ], []),

      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      custom_commander_check_player_can_join_battle, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_lead_triggers,  ##CC-C
    ##diplomacy end
  ),

  (
    "village_attack_bandits",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [
     (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     (1,mtef_team_0|mtef_use_exact_number,0,aif_start_alarmed, 7,[]),
     (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_tab_press,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (assign, "$g_battle_result", -1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign, "$g_battle_won", 0),
                           (assign, "$defender_reinforcement_stage", 0),
                           (assign, "$attacker_reinforcement_stage", 0),
                           (try_begin),
                             (eq, "$g_mt_mode", vba_after_training),
                             (add_reinforcements_to_entry, 1, 6),
                           (else_try),
                             (add_reinforcements_to_entry, 1, 29),
                           (try_end),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC begin
                           (get_player_agent_no, ":player_agent"),
                           (agent_get_team, ":player_team", ":player_agent"),
                           (set_show_messages, 0),
                           (team_give_order, ":player_team", grc_everyone, mordr_hold),
                           (set_show_messages, 1),
                           ## CC end
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission, 0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
              ]),

      common_battle_inventory,      
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      custom_commander_check_player_can_join_battle, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers_training + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),



  (
    "village_raid",mtf_battle_mode,charge,
    "You lead your men to battle.",
    [
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,12,[]),
     (3,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,12,[]),
     (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ],
    [
      common_battle_tab_press,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           #(assign,"$defender_reinforcement_stage",0),  ##CC-C
                           #(assign,"$attacker_reinforcement_stage",0),  ##CC-C
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC begin
                           (get_player_agent_no, ":player_agent"),
                           (agent_get_team, ":player_team", ":player_agent"),
                           (set_show_messages, 0),
                           (team_give_order, ":player_team", grc_everyone, mordr_hold),
                           (set_show_messages, 1),
                           ## CC end
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,
#CC-C begin
      #(1, 0, 5, [(lt,"$defender_reinforcement_stage","$g_reinforcement_stage"), ## CC
                 #(store_mission_timer_a,":mission_time"),
                 #(ge,":mission_time",10),
                 #(store_normalized_team_count,":num_defenders", 0),
                 #(lt,":num_defenders",6)],
           #[(add_reinforcements_to_entry,0,6),(val_add,"$defender_reinforcement_stage",1)]),
      #(1, 0, 5, [(lt,"$attacker_reinforcement_stage", "$g_reinforcement_stage"), ## CC
                 #(store_mission_timer_a,":mission_time"),
                 #(ge,":mission_time",10),
                 #(store_normalized_team_count,":num_attackers", 1),
                 #(lt,":num_attackers",6)],
           #[(add_reinforcements_to_entry,3,6),(val_add,"$attacker_reinforcement_stage",1)]),
      ccc_init_reinforcement,
      ccc_lead_reinforcement,
#CC-C end
      (1, 60, ti_once,
       [
         (store_mission_timer_a,reg(1)),
         (ge,reg(1),10),
         (all_enemies_defeated, 5),
         (this_or_next|eq, "$g_dplmc_battle_continuation", 0),  ## NMCml fix
         (neg|main_hero_fallen, 0),
         (set_mission_result,1),
         (display_message,"str_msg_battle_won"),
         (assign,"$g_battle_won",1),
         (assign, "$g_battle_result", 1),
         (try_begin),
           (eq, "$g_village_raid_evil", 0),
           (call_script, "script_play_victorious_sound"),
         (else_try),
           (play_track, "track_victorious_evil", 1),
         (try_end),
         ],
       [
         (call_script, "script_count_mission_casualties_from_agents"),
         (finish_mission, 1),
         ]),

      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
          ]),

      common_battle_inventory,
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      custom_commander_check_player_can_join_battle, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),



  (
    "besiege_inner_battle_castle",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (17, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (18, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (19, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (20, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),
        ]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (assign, "$g_dplmc_cam_activated", 0),
                           #(assign, "$g_dplmc_charge_when_dead", 1),  ##CC-C
                           ##diplomacy end
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
                           ]),
      
      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),

      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
              ]),
      
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      common_battle_inventory,
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),

  (
    "besiege_inner_battle_town_center",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     ## CC begin
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,30,[]),
     (2, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (23, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (24, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (25, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (26, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (27, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (28, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     ## CC end
     ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),
        ]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (assign, "$g_dplmc_cam_activated", 0),
                           #(assign, "$g_dplmc_charge_when_dead", 1),  ##CC-C
                           ##diplomacy end
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
                           ]),
      
      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),

      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                #(eq, "$g_dplmc_cam_activated", 0),  ## CC-D
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end

              ]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      common_battle_inventory,
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers, ##CC-C
    ##diplomacy end
  ),

  (
    "castle_attack_walls_defenders_sally",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,12,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,12,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),
         ]),
      
      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_change_banners_and_chest"),
         (call_script, "script_remove_siege_objects"),
         ]),

      common_battle_tab_press,
      common_battle_init_banner,
	  
	  #occc start hardmode unequip ammo  
	  (ti_on_agent_spawn, 0, 0, [(ge, "$g_occc_mildmode", 1),(eq, "$g_occc_sally_hardmode_toomuch_archers", 1),],
	   [
        (store_trigger_param_1, ":agent_no"),
		(agent_is_non_player, ":agent_no"),
		(agent_is_human, ":agent_no"),
		(agent_is_alive, ":agent_no"),
		(agent_is_ally, ":agent_no"),
		(agent_get_wielded_item, ":cur_weapon", ":agent_no", 0),
		#(agent_get_slot, ":cur_weapon", ":agent_no", slot_agent_use_range),
		(gt, ":cur_weapon", 0),
		(item_get_type, ":type", ":cur_weapon"),
        (this_or_next|eq, ":type", itp_type_bow),
        (this_or_next|eq, ":type", itp_type_pistol),
        (this_or_next|eq, ":type", itp_type_crossbow),#occc
        (eq, ":type", itp_type_musket),
		(agent_unequip_item,":agent_no",":cur_weapon"),# UNEQUIP
		(agent_set_slot, ":agent_no", slot_agent_use_range, 0),
        (assign, ":new_item", 0),
        (try_begin),
          (neg|agent_slot_eq, ":agent_no", slot_agent_use_polearm, 0),
          (agent_get_slot, ":new_item", ":agent_no", slot_agent_use_polearm),
        (else_try),
          (neg|agent_slot_eq, ":agent_no", slot_agent_use_two_hand, 0),
          (agent_get_slot, ":new_item", ":agent_no", slot_agent_use_two_hand),
        (else_try),
          (neg|agent_slot_eq, ":agent_no", slot_agent_use_one_hand, 0),
          (agent_get_slot, ":new_item", ":agent_no", slot_agent_use_one_hand),
        (try_end),
        (try_begin),
          (neq, ":new_item", 0),
          (agent_set_wielded_item, ":agent_no", ":new_item"),
        (try_end),

		# # FIND WEAPON AND SET AMMO TYPE
			# (try_for_range, ":cur_slot", 0, 4),
			  # (agent_get_item_slot, ":cur_item", ":agent_no", ":cur_slot"),
			  # (try_begin),
				# # (eq, ":cur_item", ":cur_weapon"),
				# # (assign, ":weapon_slot", ":cur_slot"),
			  # # (else_try),
				# (gt, ":cur_item", 0),
				# (item_get_type, ":type", ":cur_item"),
				# (this_or_next|eq, ":type", itp_type_bolts),
				# (this_or_next|eq, ":type", itp_type_arrows),
				# (eq, ":type", itp_type_bullets),
				# (agent_unequip_item,":agent_no",":cur_item"),# UNEQUIP
			  # (try_end),
			# (try_end),

	    ]),
		
	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end

	  #occc end

      (ti_on_agent_killed_or_wounded, 0, 0, [], #new
       [
        (store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),  ##CC-C
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          #(str_store_troop_name, s6, ":dead_agent_troop_id"),  ##CC-C
          #(assign, reg0, ":dead_agent_no"),  ##CC-C
          #(assign, reg1, ":killer_agent_no"),  ##CC-C
          #(assign, reg2, ":is_wounded"),  ##CC-C
          #(agent_get_team, reg3, ":dead_agent_no"),  ##CC-C
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),
       ]),

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           (assign, "$g_dplmc_cam_activated", 0),
                           #(assign, "$g_dplmc_charge_when_dead", 1),  ##CC-C
                           ##diplomacy end
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),
      
      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 60, ti_once, [(store_mission_timer_a, reg(1)),
                        (ge, reg(1), 10),
                        (all_enemies_defeated, 2),
                        (this_or_next|eq, "$g_dplmc_battle_continuation", 0),  ## NMCml fix
                        (neg|main_hero_fallen,0),
                        (set_mission_result,1),
                        (display_message,"str_msg_battle_won"),
                        (assign, "$g_battle_won", 1),
                        (assign, "$g_battle_result", 1),
                        (assign, "$g_siege_sallied_out_once", 1),
                        (assign, "$g_siege_method", 1), #reset siege timer
                        (call_script, "script_play_victorious_sound"),
                        ],
           [(call_script, "script_count_mission_casualties_from_agents"),
            (finish_mission,1)]),

      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
            (try_begin),
              (eq, "$g_dplmc_battle_continuation", 0),
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
               (agent_is_ally, ":agent"),
               (agent_is_alive, ":agent"),
               (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      common_battle_inventory,
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),


  (
    "castle_attack_walls_belfry",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     ## CC begin
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,18,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,8,[]),
     (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

     (40,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (41,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (42,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (43,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (44,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (45,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (46,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (47,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     ## CC end
     ],
    [
      common_battle_mission_start,
      common_battle_tab_press,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,

      (0, 0, ti_once,
       [
         (set_show_messages, 0),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (set_show_messages, 1),
         ], []),
      
      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),  ##CC-C
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          #(str_store_troop_name, s6, ":dead_agent_troop_id"),  ##CC-C
          #(assign, reg0, ":dead_agent_no"),  ##CC-C
          #(assign, reg1, ":killer_agent_no"),  ##CC-C
          #(assign, reg2, ":is_wounded"),  ##CC-C
          #(agent_get_team, reg3, ":dead_agent_no"),  ##CC-C
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),
       ]),

      #common_siege_ai_trigger_init_after_2_secs,  ##CC-C
      #common_siege_defender_reinforcement_check,  ##CC-C
      #common_siege_defender_reinforcement_archer_reposition,  ##CC-C
      #common_siege_attacker_reinforcement_check,  ##CC-C
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      common_inventory_not_available,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
	  custom_commander_check_player_can_join_battle_dismounted, ## CC
      #CC-C begin
      ccc_siege_troop_type_init,
      ccc_init_reinforcement,
      ccc_siege_spawn_good_entry,
      ccc_siege_get_good_entry,
      ccc_siege_reinforcement,
      #dplmc_death_camera,  ## CC-D: camera integrate
      #CC-C end
	 ##occc begin	  
	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end
	 ##occc end

    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),

  (
    "castle_attack_walls_ladder",mtf_battle_mode,-1,
    "You attack the walls of the castle...",
    [
     ## CC begin
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,18,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,8,[]),
     (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

     (40,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (41,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (42,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (43,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (44,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (45,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (46,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     ## CC end
     ],
    [
      common_battle_mission_start,
      common_battle_tab_press,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,
      #common_siege_ai_trigger_init_after_2_secs,  ##CC-C
      #common_siege_defender_reinforcement_check,  ##CC-C
      #common_siege_defender_reinforcement_archer_reposition,  ##CC-C
      #common_siege_attacker_reinforcement_check,  ##CC-C
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      common_inventory_not_available,
      custom_commander_check_player_can_join_battle_dismounted, ## CC
      
      #CC-C begin
      ccc_siege_troop_type_init,
      ccc_init_reinforcement,
      ccc_siege_spawn_good_entry,
      ccc_siege_get_good_entry,
      ccc_siege_reinforcement,
      #dplmc_death_camera,  ## CC-D: camera integrate
      #CC-C end
	  ##occc begin
	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end
	  ##occc end
	  
      ## CC begin
## NMCml begin: stop CC ladder AI to walk rightly
#      (ti_before_mission_start, 0, 0, [],
#        [
#          (call_script, "script_get_num_ladders"), 
#          (assign, "$num_ladders", reg0),
#          (assign, "$cur_ladder_to_assign_archers", 0),
#          (assign, "$cur_ladder_to_assign_others", 0),
#        ]),
#       
#      (ti_on_agent_spawn, 0, 0, [], 
#        [
#          (store_trigger_param_1, ":cur_agent"),
#          (ge, "$num_ladders", 2),
#          (call_script, "script_setup_bot_initials", ":cur_agent"),
#        ]),
#
#      (0, 0, ti_once, [], 
#        [
#          (set_show_messages, 0),
#          (team_give_order, "$attacker_team", grc_everyone, mordr_charge),
#          (team_give_order, "$attacker_team_2", grc_everyone, mordr_charge),
#          (set_show_messages, 1),
#        ]),
#
#
#      (0.5, 0, 0, [], 
#       [
#          (ge, "$num_ladders", 2),
#          (call_script, "script_process_siege_attackers"),
#       ]),
## NMCml end
       
      (0, 0, ti_once, [], 
        [
          (set_show_messages, 0),
		  #occc begin
          # (troop_set_class, "trp_khergit_horse_archer", grc_archers),
          # (troop_set_class, "trp_khergit_veteran_horse_archer", grc_archers),
          # (troop_set_class, "trp_ccc_khergit_manghit", grc_archers),
          #occc end
		  
		  #player is defender - archers ready
          (try_begin),
            (get_player_agent_no, ":player_agent"),
            (ge, ":player_agent", 0),
            (agent_get_team, ":player_team", ":player_agent"),
            (neq, ":player_team", "$attacker_team"),
            (neq, ":player_team", "$attacker_team_2"),
			(neg|entry_point_is_auto_generated, 60),#occc - continue only when entry point 60 is put by the creator in the castle scene
            (entry_point_get_position, pos60, 60),
            (team_give_order, "$attacker_team", grc_archers, mordr_hold),
            (team_give_order, "$attacker_team", grc_archers, mordr_stand_closer),
            (team_set_order_position, "$attacker_team", grc_archers, pos60),
            (team_give_order, "$attacker_team_2", grc_archers, mordr_hold),
            (team_give_order, "$attacker_team_2", grc_archers, mordr_stand_closer),
            (team_set_order_position, "$attacker_team_2", grc_archers, pos60),
          (try_end),
          (set_show_messages, 1),
        ]),
        
      (3, 0, 0, [], 
        [
          (try_begin), 
            (get_player_agent_no, ":player_agent"),
            (ge, ":player_agent", 0),
            (agent_get_team, ":player_team", ":player_agent"),
            # player is defender
            (neq, ":player_team", "$attacker_team"),
            (neq, ":player_team", "$attacker_team_2"),
            (try_for_agents, ":agent_no"), # enemy
              (neq, ":agent_no", ":player_agent"),
              (agent_is_alive, ":agent_no"),
              (agent_is_human, ":agent_no"),
              (neg|agent_is_ally, ":agent_no"),
              (agent_get_ammo, ":agent_ammo", ":agent_no"),
              (this_or_next|le, ":agent_ammo", 0),
              (ge,"$attacker_reinforcement_stage",6),
              (agent_set_division, ":agent_no", grc_infantry),
            (try_end),
            (call_script, "script_get_archer_ratio_of_agents", 0),
            (assign, ":archer_ratio", reg0),
            (ge, ":archer_ratio", 90),
            (try_for_agents, ":agent_no"), # enemy
              (neq, ":agent_no", ":player_agent"),
              (agent_is_alive, ":agent_no"),
              (agent_is_human, ":agent_no"),
              (neg|agent_is_ally, ":agent_no"),
              (agent_get_troop_id, ":troop_no", ":agent_no"),
              (troop_is_guarantee_ranged, ":troop_no"),
              (store_random_in_range, ":random_no", 0, 100),
              (lt, ":random_no", 10),
              (agent_set_division, ":agent_no", grc_infantry),
            (try_end),
          (try_end),
        ]),
      ## CC end

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),  ##CC-C
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          #(str_store_troop_name, s6, ":dead_agent_troop_id"),  ##CC-C
          #(assign, reg0, ":dead_agent_no"),  ##CC-C
          #(assign, reg1, ":killer_agent_no"),  ##CC-C
          #(assign, reg2, ":is_wounded"),  ##CC-C
          #(agent_get_team, reg3, ":dead_agent_no"),  ##CC-C
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),
       ]),
    ]
    ##diplomacy begin
    + dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ##diplomacy end
  ),
  

  (
    "castle_visit",0,-1,#occc attention
    "Castle visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons|af_override_head,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise), 
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(18,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(19,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (20,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(21,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(22,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(29,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(30,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(31,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     # Party members
     (40,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (41,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (42,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (43,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (44,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (45,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (46,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     ],
    [    
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (try_begin),
          (neq, ":player_agent", ":agent_no"),
          (agent_set_team, ":agent_no", 7),
        (try_end),
        
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (troop_get_slot, ":will_join_prison_break", ":troop_no", slot_troop_will_join_prison_break),
          (eq, ":will_join_prison_break", 1),
          ## CC begin
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (agent_set_team, ":agent_no", ":player_team"),
          ## CC end
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),
          #CC-C begin
          (agent_ai_set_aggressiveness, ":agent_no", 70),
          (agent_set_is_alarmed,":agent_no",1),
          (agent_force_rethink,":agent_no"),
          #CC-C end
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),                        
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (try_end),
      ]),
      
      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
        (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),
                
        (try_begin), 
          (this_or_next|eq, ":dead_agent_troop_no", "trp_swadian_prison_guard"),
          (this_or_next|eq, ":dead_agent_troop_no", "trp_vaegir_prison_guard"),
          (this_or_next|eq, ":dead_agent_troop_no", "trp_khergit_prison_guard"),
          (this_or_next|eq, ":dead_agent_troop_no", "trp_nord_prison_guard"),
          (this_or_next|eq, ":dead_agent_troop_no", "trp_rhodok_prison_guard"),
#CC-C begin add faction
        (this_or_next|eq, ":dead_agent_troop_no", "trp_psf_prison_guard"),
        (this_or_next|eq, ":dead_agent_troop_no", "trp_ccc_dark_knight_prison_guard"),
#CC-C end
          (eq, ":dead_agent_troop_no", "trp_sarranid_prison_guard"),
          
          (eq, ":killer_agent_troop_no", "trp_player"),
          
          (display_message, "@You got keys of dungeon."),
        (try_end),
      ]),     

      #JAILBREAK TRIGGERS 
      #Civilians get out of the way
      (1, 0, 0,
      [
        (this_or_next|eq, "$talk_context", tc_prison_break),
        (eq, "$talk_context", tc_escape),
      ],
      [
        #(agent_get_team, ":prisoner_agent", 0),
        (call_script, "script_neutral_behavior_in_fight"),
        (mission_disable_talk),
      ]),
      
      #The game begins with the town alerted
      (1, 0, ti_once,
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
      ],
      [
        (get_player_agent_no, ":player_agent"),
        (assign, reg6, ":player_agent"),
        (call_script, "script_activate_town_guard"),		
        
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos4, ":player_agent"),
        
        (try_for_range, ":prisoner", active_npcs_begin, kingdom_ladies_end),
          (troop_slot_ge, ":prisoner", slot_troop_mission_participation, 1),
          
          (str_store_troop_name, s4, ":prisoner"),
          (display_message, "str_s4_joins_prison_break"),
          
          (store_current_scene, ":cur_scene"), #this might be a better option?
          (modify_visitors_at_site, ":cur_scene"),
          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>), 
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (assign, ":nearest_entry_no", 24),
          (add_visitors_to_current_scene, ":nearest_entry_no", ":prisoner", 1, 0, 0),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1),          
        (try_end),
	  ]),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (set_trigger_result, 1),
          (mission_enable_talk),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], 
      []),
            
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_remove_siege_objects"),
      ]),
      
      (3, 0, 0, 
      [     
        (main_hero_fallen, 0),
      ],	  
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_prison_break),
          (eq, "$talk_context", tc_escape),
       
          (call_script, "script_deduct_casualties_from_garrison"),
	      (jump_to_menu,"mnu_captivity_start_castle_defeat"), 
	 
	      (assign, ":end_cond", kingdom_ladies_end),
          (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
  	        (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new	  
  	      (try_end),  
	 
	      (mission_enable_talk),
	      (finish_mission, 0),
	    (else_try),  
	      (mission_enable_talk),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
	      (finish_mission, 0),
	      (set_trigger_result, 1),
        (try_end),	 	 
      ]),
      
      (3, 0, 0, 
      [
        (eq, "$talk_context", tc_escape),
        (neg|main_hero_fallen,0),
        (store_mission_timer_a, ":time"),
        (ge, ":time", 10),      
        (all_enemies_defeated), #1 is default enemy team for in-town battles
      ],
      [
        (call_script, "script_deduct_casualties_from_garrison"),
        (try_for_agents, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
          (try_begin),
            (agent_is_alive, ":agent"),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
          (else_try),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
          (try_end),
        (try_end),
        (jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
        (mission_enable_talk),
        (finish_mission, 0),
      ]),
      ## CC begin
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      ## CC end
    ] + custom_commander_commom_triggers_without_kick, ## CC
  ),


  (
    "training_ground_trainer_talk", 0, -1,
    "Training.",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (2,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (3,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (4,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (5,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (6,mtef_scene_source|mtef_team_0,0,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (call_script, "script_change_banners_and_chest"),
         ]),
      (ti_inventory_key_pressed, 0, 0,
       [
         (set_trigger_result,1),
         ], []),
      (ti_tab_pressed, 0, 0,
       [
         (set_trigger_result,1),
         ], []),
     (0.0, 1.0, 2.0,
      [(lt, "$trainer_help_message", 2),
        ],
      [(try_begin),
         (eq, "$trainer_help_message", 0),
#         (tutorial_box, "str_trainer_help_1", "@Tutorial"),
       (else_try),
#         (tutorial_box, "str_trainer_help_2", "@Tutorial"),
       (try_end),
       (val_add, "$trainer_help_message", 1),
          ]),
      
    ],
  ),

  (
    "training_ground_trainer_training",mtf_arena_fight,-1,
    "You will fight a match in the arena.",
    [
      (16, mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_shield,itm_practice_sword,itm_practice_boots]),
      (17, mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (18, mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (19, mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_boots]),
      (20, mtef_visitor_source,0,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1, ":answer"),
         (eq, ":answer", 0),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (1, 3, ti_once, [(main_hero_fallen,0)],
       [
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (1, 3, ti_once,
       [
         (store_mission_timer_a, reg1),
         (ge, reg1, 1),
         (num_active_teams_le, 1),
         (neg|main_hero_fallen),
         (assign, "$training_fight_won", 1),
         ],
       [
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
    ] + custom_commander_commom_triggers_training, ## CC
  ),


  (
    "training_ground_training", mtf_arena_fight, -1,
    "Training.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (1,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (2,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (3,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (8,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (9,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (10,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (11,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (12,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (13,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (14,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (15,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_last_destroyed_gourds", 0),
         (call_script, "script_change_banners_and_chest")]),
      
      common_arena_fight_tab_press,
	  
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         (assign, "$g_training_ground_training_success_ratio", 0),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),
      
      common_inventory_not_available,

      (0, 0, ti_once,
       [
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (set_fixed_point_multiplier, 100),
           (entry_point_get_position, pos1, 0),
           (init_position, pos2),
           (position_set_y, pos2, "$g_training_ground_ranged_distance"),
           (position_transform_position_to_parent, pos3, pos1, pos2),
           (copy_position, pos1, pos3),
           (assign, ":end_cond", 10),
           (assign, ":shift_value", 0),
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_sub, ":cur_instance", ":cur_i", ":shift_value"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_instance"),
             (copy_position, pos2, pos1),
             (init_position, pos0),
             (store_random_in_range, ":random_no", 0, 360),
             (position_rotate_z, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 50, 600),
             (position_move_x, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 0, 360),
             (position_transform_position_to_local, pos3, pos1, pos2),
             (position_rotate_z, pos0, ":random_no"),
             (position_transform_position_to_parent, pos4, pos0, pos3),
             (position_transform_position_to_parent, pos2, pos1, pos4),
             (position_set_z_to_ground_level, pos2),
             (position_move_z, pos2, 150),
             (assign, ":valid", 1),
             (try_for_range, ":cur_instance_2", 0, 10),
               (eq, ":valid", 1),
               (neq, ":cur_instance", ":cur_instance_2"),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd", ":cur_instance_2"),
               (prop_instance_get_position, pos3, ":target_object_2"),
               (get_distance_between_positions, ":dist", pos2, pos3),
               (lt, ":dist", 100),
               (assign, ":valid", 0),
             (try_end),
             (try_begin),
               (eq, ":valid", 0),
               (val_add, ":end_cond", 1),
               (val_add, ":shift_value", 1),
             (else_try),
               (prop_instance_set_position, ":target_object", pos2),
               (prop_instance_animate_to_position, ":target_object", pos2, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_instance"),
               (position_move_z, pos2, -150), #moving back to ground level
               (prop_instance_set_position, ":target_object_2", pos2),
               (prop_instance_animate_to_position, ":target_object_2", pos2, 1),
             (try_end),
           (try_end),
         (else_try),
           (eq, "$g_mt_mode", ctm_mounted),
           (assign, ":num_gourds", 0),
           #First, placing gourds on the spikes
           (try_for_range, ":cur_i", 0, 100),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_i"),
             (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_i"),
             (ge, ":target_object", 0),
             (ge, ":target_object_2", 0),
             (val_add, ":num_gourds", 1),
             (prop_instance_get_position, pos0, ":target_object_2"),
             (position_move_z, pos0, 150),
             (prop_instance_set_position, ":target_object", pos0),
             (prop_instance_animate_to_position, ":target_object", pos0, 1),
           (try_end),
           (store_sub, ":end_cond", ":num_gourds", "$g_training_ground_training_num_gourds_to_destroy"),
           #Second, removing gourds and their spikes randomly
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_random_in_range, ":random_instance", 0, ":num_gourds"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":random_instance"),
             (prop_instance_get_position, pos0, ":target_object"),
             (position_get_z, ":pos_z", pos0),
             (try_begin),
               (lt, ":pos_z", -50000),
#               (val_add, ":end_cond", 1), #removed already, try again
             (else_try),
               (position_set_z, pos0, -100000),
               (prop_instance_set_position, ":target_object", pos0),
               (prop_instance_animate_to_position, ":target_object", pos0, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":random_instance"),
               (prop_instance_set_position, ":target_object_2", pos0),
               (prop_instance_animate_to_position, ":target_object_2", pos0, 1),
             (try_end),
           (try_end),
         (try_end),
         ],
       []),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_melee),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_training_ground_training_success_ratio", 100),
         (else_try),
           (assign, ":alive_enemies", 0),
           (try_for_agents, ":agent_no"),
             (agent_is_alive, ":agent_no"),
             (agent_is_human, ":agent_no"),
             (agent_get_team, ":team_no", ":agent_no"),
             (eq, ":team_no", 1),
             (val_add, ":alive_enemies", 1),
           (try_end),
           (store_sub, ":dead_enemies", "$g_training_ground_training_num_enemies", ":alive_enemies"),
           (store_mul, "$g_training_ground_training_success_ratio", ":dead_enemies", 100),
           (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_enemies"),
         (try_end),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_ranged),
         (get_player_agent_no, ":player_agent"),
         (agent_get_ammo, ":ammo", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|main_hero_fallen),
         (this_or_next|eq, ":ammo", 0),
         (gt, ":cur_seconds", 116), 
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 10),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_mounted),
         (get_player_agent_no, ":player_agent"),
         (agent_get_horse, ":player_horse", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|lt, ":player_horse", 0),
         (this_or_next|main_hero_fallen),
         (this_or_next|ge, "$scene_num_total_gourds_destroyed", "$g_training_ground_training_num_gourds_to_destroy"),
         (gt, ":cur_seconds", 120),
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 100),
         (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_gourds_to_destroy"),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (0, 0, 0,
       [
         (gt, "$g_last_destroyed_gourds", 0),
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (entry_point_get_position, pos1, 0),
           (position_move_y, pos1, 100, 0),
           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos2, ":player_agent"),
           (try_begin),
             (position_is_behind_position, pos2, pos1),
             (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
           (else_try),
             (display_message, "@You must stay behind the line on the ground! Point is not counted."),
           (try_end),
         (else_try),
           (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
         (try_end),
         (assign, "$g_last_destroyed_gourds", 0),
         ],
       []),
    ] + custom_commander_commom_triggers_training, ## CC
  ),

  (
    "sneak_caught_fight",mtf_battle_mode,-1,
    "You must fight your way out!",
    [
     (0,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (48,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (49,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (50,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (51,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (52,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (53,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (54,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (55,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (56,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (57,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (58,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (59,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (60,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (61,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (62,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (63,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (64,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     
     # (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     # (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [    
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
      ]),
      
      (ti_after_mission_start, 0, 0, [],
       [
        (assign, ":num_guards", 5),
        
        (try_begin),
          (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),                          
          (store_current_hours, ":cur_time"),
          (store_add, ":fire_finish_time", ":last_nearby_fire_time", 4),                          
          (is_between, ":cur_time", ":fire_finish_time", ":last_nearby_fire_time"),
          (assign, ":num_guards", 2),
        (else_try),  
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),

          (assign, ":num_guards", 4),
        (try_end),
        
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (entry_point_get_position, pos0, 7), 
        (else_try),          
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (entry_point_get_position, pos0, 0), 
        (else_try),  
          (entry_point_get_position, pos0, 1), 
        (try_end),
                        
        (assign, ":last_nearest_entry_distance", -1),
        (assign, ":last_nearest_entry_point", -1),
        (try_for_range, ":guard_no", 0, ":num_guards"),
          (assign, ":smallest_dist", 100000),
          (try_for_range, ":guard_entry_point", 2, 64),
            (neq, ":last_nearest_entry_point", ":guard_entry_point"),
            (entry_point_get_position, pos1, ":guard_entry_point"), 
            (get_distance_between_positions, ":dist", pos0, pos1),
            (lt, ":dist", ":smallest_dist"),
            (gt, ":dist", ":last_nearest_entry_distance"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":guard_entry_point"),
          (try_end),  
          
          (store_faction_of_party, ":town_faction","$current_town"),
          (try_begin),
            (this_or_next|eq, ":guard_no", 0),
            (eq, ":guard_no", 2),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_2_troop),
          (else_try),  
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_2_troop),
          (try_end),
          
          (assign, ":last_nearest_entry_point", ":nearest_entry_point"),
          (assign, ":last_nearest_entry_distance", ":smallest_dist"),
                    
          (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_guard", 1, 0),                      
        (try_end),
      ]),
      
      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_wish_to_surrender")]),
       
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),(eq,":answer",0),
        ## CC-D begin: over hp fix
        (call_script, "script_ccc_last_agent_hp_fix"),
        ## CC-D end
        (jump_to_menu,"mnu_captivity_start_castle_defeat"),(finish_mission,0),]),
      
      (1, 0, ti_once, [],
       [
         (play_sound,"snd_sneak_town_halt"),
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),
         
      (0, 3, 0,
       [
          (main_hero_fallen,0),
        ],
       [
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu,"mnu_captivity_start_castle_defeat"),
         (finish_mission,0),
       ]),
       
      (1, 0, 0, [], 
       [
	    (get_player_agent_no, ":player_agent"),
	    (agent_get_position, pos0, ":player_agent"),
	    	    
        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),
          
          (agent_get_position, pos1, ":agent_no"),
        
          (get_distance_between_positions, ":dist", pos0, pos1),
         
          (try_begin),
            (le, ":dist", 800),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),  
            (agent_set_scripted_destination, ":agent_no", pos0, 0),
          (try_end),
        (try_end),                  	      
       ]), 

	   (5, 1, ti_once, 
	   [
	     (num_active_teams_le,1),
	     (neg|main_hero_fallen),

         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
	   ],
       [
         (assign,"$auto_menu",-1),
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (jump_to_menu,"mnu_sneak_into_town_caught_dispersed_guards"),
         (finish_mission,1),
       ]),
       
	   (ti_on_leave_area, 0, ti_once, [],
       [(assign,"$auto_menu",-1),
        ## CC-D begin: over hp fix
        (call_script, "script_ccc_last_agent_hp_fix"),
        ## CC-D end
        (jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),(finish_mission,0)]),

      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
      
      ## CC begin
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,
      ## CC end

    ] + custom_commander_commom_triggers, ## CC
  ),

   (
    "ai_training",0,-1,
    "You start training.",
    [
#     (0,0,af_override_horse,aif_start_alarmed,1,[]),
     (0,0,0,aif_start_alarmed,30,[]),
#     (1,mtef_no_leader,0,0|aif_start_alarmed,5,[]),
#     (0,mtef_no_leader,0,0|aif_start_alarmed,0,[]),
#     (3,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,6,[]),
#     (4,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,0,[]),
     ],
    [
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100), (set_fog_distance, 10)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,

##      (0, 0, ti_once,
##       [
##         (key_clicked, key_numpad_7),
##        (mission_cam_set_mode,1),
##        (get_player_agent_no, ":player_agent"),
##        (mission_cam_set_target_agent, ":player_agent", 1),
##        (mission_cam_set_animation, "anim_test_cam"),], []),
    ],
  ),
   (
    "camera_test",0,-1,
    "camera Test.",
    [
#     (0,mtef_attackers,0,aif_start_alarmed,5,[]),
     ],
    [
      (1, 0, 0, [(mission_cam_set_mode,1),
          (entry_point_get_position, pos3, 3),
          (mission_cam_set_position, pos3)], []),
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),
    ],
  ),

  (
    "arena_melee_fight",mtf_arena_fight,-1,
    "You enter a melee fight in the arena.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (1,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword, itm_arena_tunic_red]),
      (2,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (3,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (4,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger, itm_arena_tunic_red]),
      (5,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_red]),
      (6,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red]),
      (7,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),

      (8,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_blue]),
      (9,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (10,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (11,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue, itm_blue_tourney_helmet]),
      (12,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_blue]),
      (13,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (14,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (15,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue]),

      (16,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (17,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (18,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (19,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (20,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_green, itm_green_tourney_helmet]),
      (21,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_green]),
      (22,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green]),
      (23,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),

      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (25,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (26,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (27,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (28,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (29,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (30,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (31,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
#32
      (32, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword]),
      (33,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_staff]),
      (34,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword, itm_practice_shield]),
      (35,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_staff]),
      (36, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger]),
      (37,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_sword, itm_practice_shield]),
      (38,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword]),
      (39,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_staff]),
#40-49 not used yet
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),

      (50, mtef_scene_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (51, mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (52, mtef_scene_source,af_override_horse,0,1,[]),
#not used yet:
      (53, mtef_scene_source,af_override_horse,0,1,[]),(54, mtef_scene_source,af_override_horse,0,1,[]),(55, mtef_scene_source,af_override_horse,0,1,[]),
#used for torunament master scene

      (56, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_segmented_helmet]),
      (57, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_segmented_helmet]),
    ],
    tournament_triggers
  ),



  (
    "arena_challenge_fight",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [
      (56, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
      (58, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),

		 
	#NOTE -- THIS IS A VESTIGIAL SCRIPT. FOR LORD DUELS, USE THE NEXT SCRIPT DOWN 	 
      (1, 4, ti_once, [
	  (this_or_next|main_hero_fallen),
		(num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_for_lady"),
			 (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_for_lady"),
           (else_try),
			 (check_quest_active, "qst_duel_for_lady"),
			 (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_for_lady"),
		   (else_try),
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_courtship_rival"),
			 (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_courtship_rival"),
           (else_try),
			 (check_quest_active, "qst_duel_courtship_rival"),
			 (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
		   (else_try),	 
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_avenge_insult"),
			 (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_avenge_insult"),
           (else_try),
			 (check_quest_active, "qst_duel_avenge_insult"),
			 (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
		   (else_try),	 
             (main_hero_fallen),
			 (check_quest_active, "qst_denounce_lord"),
			 (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_denounce_lord"),
           (else_try),
			 (check_quest_active, "qst_denounce_lord"),
			 (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_denounce_lord"),
		   (else_try),
			 (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
		     (str_store_troop_name, s4, ":target_troop"),
		   (try_end),
           ## CC-D begin: over hp fix
           (call_script, "script_ccc_last_agent_hp_fix"),
           ## CC-D end
           (finish_mission),
           ]),
		   

    ] + custom_commander_commom_triggers, ## CC
  ),

  (
    "duel_with_lord",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [    
	  (0, mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
	  (16, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),


      (1, 4, ti_once, [
	  (this_or_next|main_hero_fallen),
		(num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_for_lady"),
			 (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_for_lady"),
           (else_try),
			 (check_quest_active, "qst_duel_for_lady"),
			 (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_for_lady"),
		   (else_try),
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_courtship_rival"),
			 (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_courtship_rival"),
           (else_try),
			 (check_quest_active, "qst_duel_courtship_rival"),
			 (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
		   (else_try),	 
             (main_hero_fallen),
			 (check_quest_active, "qst_duel_avenge_insult"),
			 (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_avenge_insult"),
           (else_try),
			 (check_quest_active, "qst_duel_avenge_insult"),
			 (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
		   (else_try),	 
             (main_hero_fallen),
			 (check_quest_active, "qst_denounce_lord"),
			 (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_denounce_lord"),
           (else_try),
			 (check_quest_active, "qst_denounce_lord"),
			 (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_denounce_lord"),
		   (else_try),
			 (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
		     (str_store_troop_name, s4, ":target_troop"),
		   (try_end),
           ## CC-D begin: over hp fix
           (call_script, "script_ccc_last_agent_hp_fix"),
           ## CC-D end
           (finish_mission),
           ]),

    ] + custom_commander_commom_triggers, ## CC
  ),


  (
    "wedding",0,-1,
    "Wedding",
    [
        (0,mtef_visitor_source,af_override_everything,0,1,[itm_tabard, itm_ankle_boots]),
        (1,mtef_visitor_source,af_override_everything,0,1,[itm_bride_dress, itm_bride_crown, itm_bride_shoes]),
        (2,mtef_visitor_source,af_castle_lord,0,1,[]),
        (3,mtef_visitor_source,af_override_everything,0,1,[itm_courtly_outfit, itm_blue_hose]),
        (4,mtef_visitor_source,af_castle_lord,0,1,[]),
        (5,mtef_visitor_source,af_castle_lord,0,1,[]),
        (6,mtef_visitor_source,af_castle_lord,0,1,[]),
        (7,mtef_visitor_source,af_castle_lord,0,1,[]),
        (8,mtef_visitor_source,af_castle_lord,0,1,[]),
        (9,mtef_visitor_source,af_castle_lord,0,1,[]),
        (10,mtef_visitor_source,af_castle_lord,0,1,[]),
        (11,mtef_visitor_source,af_castle_lord,0,1,[]),
        (12,mtef_visitor_source,af_castle_lord,0,1,[]),
        (13,mtef_visitor_source,af_castle_lord,0,1,[]),
        (14,mtef_visitor_source,af_castle_lord,0,1,[]),
        (15,mtef_visitor_source,af_castle_lord,0,1,[]),
        (16,mtef_visitor_source,af_castle_lord,0,1,[]),
        (17,mtef_visitor_source,af_castle_lord,0,1,[]),
        (18,mtef_visitor_source,af_castle_lord,0,1,[]),
        (19,mtef_visitor_source,af_castle_lord,0,1,[]),
        (20,mtef_visitor_source,af_castle_lord,0,1,[]),
        (21,mtef_visitor_source,af_castle_lord,0,1,[]),
        (22,mtef_visitor_source,af_castle_lord,0,1,[]),
        (23,mtef_visitor_source,af_castle_lord,0,1,[]),
        (24,mtef_visitor_source,af_castle_lord,0,1,[]),
        (25,mtef_visitor_source,af_castle_lord,0,1,[]),
        (26,mtef_visitor_source,af_castle_lord,0,1,[]),
        (27,mtef_visitor_source,af_castle_lord,0,1,[]),
        (28,mtef_visitor_source,af_castle_lord,0,1,[]),
        (29,mtef_visitor_source,af_castle_lord,0,1,[]),
        (30,mtef_visitor_source,af_castle_lord,0,1,[]),
        (31,mtef_visitor_source,af_castle_lord,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [
         (show_object_details_overlay, 1),
         (finish_mission,0),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (show_object_details_overlay, 1),
        (finish_mission,0),
        ]),

      (ti_after_mission_start, 0, 0, [],
       [
        (assign, "$g_wedding_state", 0),
        (play_track, "track_wedding", 2),
        (show_object_details_overlay, 0),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (troop_get_type, ":gender", ":troop_no"),
         (set_fixed_point_multiplier, 100),
         (try_begin),
           (eq, ":troop_no", "$g_wedding_bishop_troop"),
         (else_try),
           (eq, ":troop_no", "$g_wedding_bride_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_groom_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (agent_set_position, ":agent_no", pos1),
           (agent_set_animation, ":agent_no", "anim_wedding_groom_wait"),
         (else_try),
           (try_begin),
             (eq, ":gender", 0), #male
             (store_random_in_range, ":random_no", 0, 3),
             (try_begin),
               (eq, ":random_no", 0),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_notr"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest_notr"),
             (else_try),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest"),
             (try_end),
           (else_try), #female
             (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_woman"),
             (agent_set_animation, ":agent_no", "anim_wedding_guest_woman"),
           (try_end),
           (store_random_in_range, ":progress", 0, 100),
           (agent_set_animation_progress, ":agent_no", ":progress"),
         (try_end),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":agent_no"),
           (agent_get_troop_id, ":troop_no", ":agent_no"),
           (try_begin),
             (eq, ":troop_no", "$g_wedding_groom_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bride_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bishop_troop"),
           (else_try),
             (agent_get_slot, ":cur_animation", ":agent_no", slot_agent_cur_animation),
             (agent_set_animation, ":agent_no", ":cur_animation"),
           (try_end),
         (try_end),
         (try_begin),
           (eq, "$g_wedding_state", 0),
           (mission_cam_set_mode, 1, 0, 0),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, 5),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 1),
           (ge, ":cur_time", 4),
           (init_position, pos1),
           (position_rotate_z, pos1, 90),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 700),
           (position_set_z, pos1, 200),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 150),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 100),
           (position_set_z, pos1, 200),
           (mission_cam_animate_to_position, pos1, 6000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 2),
           (ge, ":cur_time", 9),
           (mission_cam_animate_to_screen_color, 0xFF000000, 1000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 3),
           (ge, ":cur_time", 10),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_stairs"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_stairs"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -90),
           (position_set_x, pos1, 300),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 420),
           (mission_cam_set_position, pos1),
           (position_set_x, pos1, 175),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 320),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (mission_cam_animate_to_screen_color, 0x00000000, 500),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 4),
           (ge, ":cur_time", 14),
           (init_position, pos1),
           (position_rotate_z, pos1, -60),
           (position_rotate_x, pos1, 10),
           (position_set_x, pos1, -400),
           (position_set_y, pos1, 200),
           (position_set_z, pos1, 115),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 5),
           (ge, ":cur_time", 20),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_walk"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_walk"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -140),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -625),
           (position_set_y, pos1, -530),
           (position_set_z, pos1, 180),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 6),
           (ge, ":cur_time", 22),
           (init_position, pos1),
           (position_rotate_z, pos1, 45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -260),
           (position_set_y, pos1, 120),
           (position_set_z, pos1, 275),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, 10),
           (mission_cam_animate_to_position, pos1, 2000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 7),
           (ge, ":cur_time", 24),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_groom_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_groom_last"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -900),
           (position_set_y, pos1, -850),
           (position_set_z, pos1, 230),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 8),
           (ge, ":cur_time", 31),
           (init_position, pos1),
           (position_set_x, pos1, -550),
           (position_set_y, pos1, -625),
           (position_set_z, pos1, 1500),
           (particle_system_burst, "psys_wedding_rose", pos1, 750),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 9),
           (ge, ":cur_time", 33),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_set_x, pos1, -536),
           (position_set_y, pos1, -415),
           (position_set_z, pos1, 135),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, -8),
           (position_set_z, pos1, 350),
           (position_rotate_x, pos1, 35),
           (mission_cam_animate_to_position_and_aperture, pos1, 10, 9000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 10),
           (ge, ":cur_time", 41),
           (mission_cam_set_screen_color, 0x00FFFFFF),
           (mission_cam_animate_to_screen_color, 0xFFFFFFFF, 3000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 11),
           (ge, ":cur_time", 48),
           (show_object_details_overlay, 1),
           (finish_mission,0),
         (try_end),
         ], []),
    ],
  ),

  (
    "tutorial_training_ground",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (33,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (34,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (35,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (42,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (62,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (63,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (64,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$g_tutorial_training_ground_state", 20),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        ## CC-D begin: over hp fix
        (call_script, "script_ccc_last_agent_hp_fix"),
        ## CC-D end
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (ti_battle_window_opened, 0, 0, [],
       [
         (start_presentation, "prsnt_tutorial_show_mouse_movement"),
        ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
         (agent_set_no_death_knock_down_only, ":agent_no", 1),
         (agent_set_invulnerable_shield, ":agent_no", 1),
         (agent_get_position, pos1, ":agent_no"),
         (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, -1),
         (get_player_agent_no, ":player_agent"),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 7),
         (try_end),
         (try_for_range, ":cur_entry_point", 0, 64),
           (entry_point_get_position, pos2, ":cur_entry_point"),
           (get_sq_distance_between_positions, ":dist", pos1, pos2),
           (lt, ":dist", 100), #10 cm
           (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, ":cur_entry_point"),
         (try_end),
         (agent_get_troop_id, ":cur_agent_troop", ":agent_no"),
         (try_begin),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (agent_get_position, pos1, ":agent_no"),
           (agent_set_scripted_destination, ":agent_no", pos1),
           (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
           (assign, ":shortest_dist", 10000000),
           (assign, ":best_instance", -1),
           (try_for_range, ":cur_instance", 0, ":num_instances"),
             (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
             (prop_instance_get_position, pos2, ":spr_instance"),
             (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
             (lt, ":cur_dist", ":shortest_dist"),
             (assign, ":shortest_dist", ":cur_dist"),
             (assign, ":best_instance", ":spr_instance"),
           (try_end),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, ":best_instance"),
         (else_try),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_set_slot, ":agent_no", slot_agent_target_entry_point, 48),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, -1),
           (entry_point_get_position, pos1, 48),
           (agent_set_scripted_destination, ":agent_no", pos1),
         (try_end),
         ]),

      (ti_on_agent_knocked_down, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (store_trigger_param_2, ":enemy_agent_no"),
         (agent_get_troop_id, ":agent_troop", ":agent_no"),
         (agent_get_troop_id, ":enemy_agent_troop", ":enemy_agent_no"),
         (try_begin),
           (ge, "$g_tutorial_training_ground_melee_trainer_attack", 0),
           #do nothing
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_parry", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 2), #player knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 3), #trainer knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_chamber", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 7), #player knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 8), #trainer knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_combat", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 4), #player knocked down in combat
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
##             (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 1), #not used
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 5), #trainer knocked down in combat
             (play_sound, "snd_tutorial_2"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (try_end),
         (else_try),
           (agent_is_human, ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_winner", ":enemy_agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_loser", ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 7),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 7),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
         (try_end),
         (agent_set_hit_points, ":agent_no", 100, 0),
         (agent_set_hit_points, ":enemy_agent_no", 100, 0),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         (team_set_relation, 0, 1, 0),
         (team_set_relation, 0, 2, 0),
         (team_set_relation, 0, 3, 0),
         (team_set_relation, 0, 7, 0),
         (team_set_relation, 7, 1, 1),
         (team_set_relation, 7, 2, 1),
         (team_set_relation, 7, 3, 1),
         (team_set_relation, 1, 2, -1),
         (team_set_relation, 1, 3, 1),
         (team_set_relation, 2, 3, 1),
         (assign, "$g_position_to_use_for_replacing_scene_items", pos8),
         (call_script, "script_replace_scene_items_with_spawn_items_before_ms"),
         (assign, "$g_tutorial_training_ground_state", 0),
         (assign, "$g_tutorial_training_ground_conversation_state", 0),
         (assign, "$g_tutorial_training_ground_melee_paused", 0),
         (assign, "$g_tutorial_training_ground_melee_state", 0),
         (assign, "$g_tutorial_training_ground_melee_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
         (assign, "$g_tutorial_training_ground_melee_last_loser", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
##         (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 0), #not used
         (assign, "$g_tutorial_training_ground_melee_trainer_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_next_score_time", 0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (assign, "$g_pointer_arrow_height_adder", -1000),
         ]),

      (0, 0, ti_once, [],
       [
         (tutorial_message_set_size, 17, 17),
         (tutorial_message_set_position, 500, 650),
         (tutorial_message_set_center_justify, 0),
         (mission_enable_talk),
         (call_script, "script_replace_scene_items_with_spawn_items_after_ms"),
         (entry_point_get_position, pos1, 59),
         (set_spawn_position, pos1),
         (spawn_horse, "itm_practice_horse", 0),
         (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_crossbow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bolts", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_javelin", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_arena_lance", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         ]),

      (0, 1, ti_once, [],
       [
         (tutorial_message_set_background, 1),
         (tutorial_message, "str_tutorial_training_ground_intro_message"),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (position_move_z, pos1, 10),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_get_slot, ":target_entry_point", ":cur_agent", slot_agent_target_entry_point),
           (entry_point_get_position, pos1, ":target_entry_point"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (try_begin),
             (lt, ":cur_dist", 6400),
             (val_add, ":target_entry_point", 1),
             (try_begin),
               (gt, ":target_entry_point", 57), #last entry point
               (assign, ":target_entry_point", 48), #first entry point
             (try_end),
             (agent_set_slot, ":cur_agent", slot_agent_target_entry_point, ":target_entry_point"),
             (entry_point_get_position, pos1, ":target_entry_point"),
             (agent_set_scripted_destination, ":cur_agent", pos1),
           (try_end),
           (try_begin),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_bow"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (position_is_behind_position, pos2, pos1), #target is facing towards us
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 40000), #20 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
                 (lt, ":shortest_dist", 22500), #15 meters
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
                 (agent_set_attack_action, ":cur_agent", 0),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 40000), #20 meters
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
               (try_end),
             (try_end),
           (else_try),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_sword"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_sword"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_dummy_a_undestructable"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_dummy_a_undestructable", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 10000), #10 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (agent_set_attack_action, ":cur_agent", 2, 1), #left
                 (else_try),
                   (agent_set_attack_action, ":cur_agent", 1, 1), #right
                 (try_end),
                 (this_or_next|lt, ":shortest_dist", 900), #3 meters
                 (lt, ":local_y", 100), #1 meter
                 (agent_set_attack_action, ":cur_agent", 0, 0), #release
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 10000), #10 meters
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (call_script, "script_iterate_pointer_arrow"),
         ], []),


      (5, 0, 0,
       [
         (try_begin),
           (store_mission_timer_a, ":cur_time"),
           (ge, ":cur_time", 30),
           (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
           (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
           (tutorial_message, -1),
         (try_end),
         (get_player_agent_no, ":player_agent"),
         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (neq, ":cur_agent", ":player_agent"),
           (agent_refill_ammo, ":cur_agent"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (agent_get_wielded_item, ":wielded_weapon", ":player_agent", 0),
         (assign, ":refill", 0),
         (try_begin),
           (eq, ":wielded_weapon", "itm_practice_bow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_bow_2"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows_2"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_crossbow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_bolts"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_javelin"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (le, ":cur_ammo", 1),
           (assign, ":refill", 1),
         (try_end),
         (eq, ":refill", 1),
         (agent_refill_ammo, ":player_agent"),
         (tutorial_box, "str_tutorial_training_ground_ammo_refill", "@Tutorial"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (assign, "$g_tutorial_training_ground_current_score", 0),
           (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 2),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),

               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),

               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (prop_instance_get_position, pos0, ":item_instance"),
                 (position_move_z, pos0, 1000, 1),
                 (prop_instance_set_position, ":item_instance", pos0),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 4),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 5),
           (try_begin),
             (agent_get_horse, ":player_horse", ":player_agent"),
             (lt, ":player_horse", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_2"),
             (try_begin),
               (assign, ":horse_agent_to_mount", -1),
               (try_for_agents, ":cur_agent"),
                 (agent_get_item_id, ":cur_agent_item", ":cur_agent"),
                 (eq, ":cur_agent_item", "itm_practice_horse"),
                 (assign, ":horse_agent_to_mount", ":cur_agent"),
               (try_end),
               (agent_get_position, pos0, ":horse_agent_to_mount"),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 100),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 6),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_3"),
           (else_try),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
             (assign, ":prop_to_search_for", "spr_dummy_a_undestructable"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_4"),
           (else_try),
             (assign, ":prop_to_search_for", "spr_archery_target_with_hit_a"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_5"),
           (try_end),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (store_add, ":cur_entry_point", "$g_tutorial_training_ground_current_score", 48),
             (entry_point_get_position, pos0, ":cur_entry_point"),
             (init_position, pos2),
             (position_move_y, pos2, -800),
             (position_transform_position_to_parent, pos3, pos0, pos2),
             (copy_position, pos0, pos3),
             (agent_get_position, pos2, ":player_agent"),
             (try_begin),
               (get_distance_between_positions, ":cur_dist", pos0, pos2),
               (lt, ":cur_dist", 500), #5 meters
               (val_add, "$g_tutorial_training_ground_current_score", 1),
               (ge, "$g_tutorial_training_ground_current_score", 10),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
             (try_begin),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 1),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 150),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (scene_prop_get_num_instances, ":end_cond", ":prop_to_search_for"),
             (try_begin),
               (lt, "$g_tutorial_training_ground_current_score", 6),
               (assign, ":next_prop_instance", -1),
               (store_add, ":var_id_to_search_for", "$g_tutorial_training_ground_current_score", 1),
               (try_for_range, ":cur_instance", 0, ":end_cond"),
                 (scene_prop_get_instance, ":prop_instance", ":prop_to_search_for", ":cur_instance"),
                 (prop_instance_get_variation_id_2, ":var_id_2", ":prop_instance"),
                 (eq, ":var_id_to_search_for", ":var_id_2"),
                 (assign, ":next_prop_instance", ":prop_instance"),
                 (assign, ":end_cond", 0),
               (try_end),
               (try_begin),
                 (prop_instance_get_position, pos0, ":next_prop_instance"),
                 (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
                 (prop_instance_get_position, pos1, ":pointer_instance"),
                 (set_fixed_point_multiplier, 1),
                 (position_get_x, ":x1", pos0),
                 (position_get_x, ":x2", pos1),
                 (position_get_y, ":y1", pos0),
                 (position_get_y, ":y2", pos1),
                 (this_or_next|neq, ":x1", ":x2"),
                 (neq, ":y1", ":y2"),
                 (prop_instance_set_position, ":pointer_instance", pos0),
                 (assign, "$g_pointer_arrow_height_adder", 200),
                 (play_sound, "snd_tutorial_1"),
               (try_end),
             (else_try),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (try_end),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_begin),
             (assign, "$g_last_destroyed_gourds", 0),
             (assign, "$g_tutorial_training_ground_current_score", 0),
             (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_1", 0),
             (prop_instance_get_position, pos0, ":item_instance"),
             (position_move_z, pos0, 1000, 1),
             (prop_instance_set_position, ":item_instance", pos0),

             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (prop_instance_set_position, ":pointer_instance", pos0),
             (assign, "$g_pointer_arrow_height_adder", 100),

             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),
             (try_end),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 2),
           (try_begin),
             (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
             (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
             (play_sound, "snd_tutorial_1"),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 4),
           (try_begin),
             (try_for_range, ":cur_instance", 0, 3),
               (scene_prop_get_instance, ":gourd_instance", "spr_gourd", ":cur_instance"),
               (prop_instance_refill_hit_points, ":gourd_instance"),
               (entry_point_get_position, pos0, 45),
               (init_position, pos1),
               (store_sub, ":cur_rotation", ":cur_instance", 1),
               (val_mul, ":cur_rotation", 5),
               (position_rotate_z, pos1, ":cur_rotation"),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
                 (position_move_y, pos1, 1300), #for bow and crossbow
               (else_try),
                 (position_move_y, pos1, 800), #for javelin
                 (val_mul, ":cur_rotation", 2),
               (try_end),
               (position_transform_position_to_parent, pos2, pos0, pos1),
               (position_set_z_to_ground_level, pos2),
               (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", ":cur_instance"),
               (prop_instance_set_position, ":spike_instance", pos2),
               (position_move_z, pos2, 150, 1),
               (prop_instance_set_position, ":gourd_instance", pos2),
             (try_end),
             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", 1),
             (prop_instance_get_position, pos1, ":spike_instance"),
             (prop_instance_set_position, ":pointer_instance", pos1),
             (assign, "$g_pointer_arrow_height_adder", 200),
             (tutorial_message, "str_tutorial_training_ground_archer_text_2"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 5),
           (try_begin),
             (try_begin),
               (neq, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (assign, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (try_begin),
                 (lt, "$g_last_destroyed_gourds", 3),
                 (play_sound, "snd_tutorial_1"),
               (else_try),
                 (play_sound, "snd_tutorial_2"),
               (try_end),
             (try_end),
             (try_begin),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 0),
               (entry_point_get_position, pos0, 45),
               (agent_get_position, pos1, ":player_agent"),
               (neg|position_is_behind_position, pos1, pos0),
               (tutorial_message, "str_tutorial_training_ground_archer_text_3"),
             (else_try),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 1),
               (tutorial_message, "str_tutorial_training_ground_archer_text_4"),
             (try_end),
             (ge, "$g_last_destroyed_gourds", 3),
             (assign, "$g_pointer_arrow_height_adder", -1000),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 6),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
             (try_end),
             (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_5", 0, 10),
             (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
             (val_add, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_attack"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (store_random_in_range, "$g_tutorial_training_ground_melee_state", 1, 5), #random attack dir
             (assign, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_training_ground_next_score_time", 0),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_attack_action, ":attack_action", ":player_agent"),
             (try_begin),
               (eq, ":attack_action", 2), #release
               (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (agent_set_defend_action, ":trainer_agent", 0, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (agent_set_defend_action, ":trainer_agent", 3, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (agent_set_defend_action, ":trainer_agent", 2, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (agent_set_defend_action, ":trainer_agent", 1, 1),
               (try_end),
             (try_end),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (tutorial_message, -1),
               (assign, "$g_tutorial_training_ground_melee_state", 0),
               (agent_set_team, ":player_agent", 0),
               (agent_set_team, ":trainer_agent", 7),
               (agent_set_hit_points, ":player_agent", 100, 0),
               (agent_set_hit_points, ":trainer_agent", 100, 0),
##               (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 1), #not used
               (assign, "$g_tutorial_training_ground_conversation_state", 9), #attack complete
               (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_attack"),
               (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (eq, ":attack_action", 2), #release
           (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
           (store_add, ":attack_state", ":action_dir_attacker", 1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, ":attack_state", "$g_tutorial_training_ground_melee_state"),
             (val_add, "$g_tutorial_training_ground_current_score", 1),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (assign, "$g_tutorial_training_ground_melee_state", 5),
               (play_sound, "snd_tutorial_2"),
             (else_try),
               (play_sound, "snd_tutorial_1"),
               (assign, ":end_cond", 100),
               (try_for_range, ":unused", 0, ":end_cond"),
                 (store_random_in_range, ":random_no", 1, 5), #random attack dir
                 (neq, ":random_no", "$g_tutorial_training_ground_melee_state"),
                 (assign, "$g_tutorial_training_ground_melee_state", ":random_no"),
                 (assign, ":end_cond", 0), #break
               (try_end),
             (try_end),
             (assign, "$g_tutorial_update_mouse_presentation", 1),
           (else_try),
             (val_add, "$g_tutorial_training_ground_current_score_2", 1),
             (play_sound, "snd_tutorial_fail"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (assign, reg1, "$g_tutorial_training_ground_current_score_2"),
         (str_clear, s0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (try_begin),
           (neq, "$g_tutorial_training_ground_melee_state", 5), #finished
           (store_mission_timer_a, ":cur_time"),
           (this_or_next|eq, "$g_tutorial_update_mouse_presentation", 0),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, "$g_tutorial_training_ground_melee_state", 1), #down
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_down"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 4), #up
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_up"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 2), #right
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_right"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 3), #left
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_left"),
           (try_end),
           (store_sub, "$g_tutorial_mouse_dir", "$g_tutorial_training_ground_melee_state", 1),
           (assign, "$g_tutorial_mouse_click", 0),
           (try_begin),
             (eq, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_update_mouse_presentation", 0),
             (start_presentation, "prsnt_tutorial_show_mouse_movement"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_attack_training"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (assign, "$g_tutorial_mouse_dir", -1),
                 (assign, "$g_tutorial_mouse_click", -1),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 1), #parry complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
               (else_try),
                 (store_random_in_range, ":random_no", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", ":random_no", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (assign, "$g_tutorial_mouse_dir", ":random_no"),
                 (try_begin),
                   (is_between, ":random_no", 1, 3), #right or left
                   (store_sub, "$g_tutorial_mouse_dir", 3, ":random_no"), #revert sides
                 (try_end),
                 (assign, "$g_tutorial_mouse_click", 1),
                 (start_presentation, "prsnt_tutorial_show_mouse_movement"),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (agent_get_defend_action, ":defend_action", ":player_agent"),
               (gt, ":defend_action", 0), #parrying or blocking
               (agent_get_action_dir, ":action_dir_defender", ":player_agent"),
               (agent_get_action_dir, ":action_dir_attacker", ":trainer_agent"),
               (assign, ":actions_match", 0),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (eq, ":action_dir_defender", 0), #down
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (eq, ":action_dir_defender", 3), #up
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (eq, ":action_dir_defender", 2), #left
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (eq, ":action_dir_defender", 1), #right
                 (assign, ":actions_match", 1),
               (try_end),
               (eq, ":actions_match", 1),
               (assign, "$g_tutorial_mouse_dir", -1),
               (assign, "$g_tutorial_mouse_click", -1),
               (agent_set_attack_action, ":trainer_agent", 0, 0), #release
               (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
               (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (try_begin),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_parry_training"),
         (else_try),
           (neq, ":shield_item", -1),
           (tutorial_message, "str_tutorial_training_ground_warning_shield"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee_with_parry"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 6), #chamber complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
               (else_try),
                 (store_random_in_range, "$g_tutorial_training_ground_melee_trainer_attack_dir", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", -1, 0), #cancel
                 (agent_set_defend_action, ":trainer_agent", 0, 1), #cancel
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 0),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 3),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           #add first, because player might immediately start attacking after parry
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
           (eq, ":attack_action", 1), #readying_attack
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (tutorial_message, "str_tutorial_training_ground_chamber_training"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_clear_scripted_mode, ":trainer_agent"),
             (agent_force_rethink, ":trainer_agent"),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (eq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (eq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_enable_talk),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (get_player_agent_no, ":player_agent"),
         (agent_get_position, pos1, ":player_agent"),
         (assign, ":shortest_dist", 10000000),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
           (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (lt, ":cur_dist", ":shortest_dist"),
           (assign, ":shortest_dist", ":cur_dist"),
         (try_end),
         (try_begin),
           (le, ":shortest_dist", 1600), #4 meters
           (assign, "$g_tutorial_training_ground_melee_paused", 1),
           (try_for_agents, ":cur_agent"),
             (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
             (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
             (agent_set_team, ":cur_agent", 7),
             (agent_get_position, pos2, ":cur_agent"),
             (agent_set_scripted_destination, ":cur_agent", pos2),
             (try_begin),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (agent_force_rethink, ":cur_agent"),
             (agent_set_look_target_agent, ":cur_agent", ":player_agent"),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_paused", 0),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
             (try_for_range, ":unused", 0, 2),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_melee_last_winner", 0),
                 (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_last_winner"),
                 (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
               (try_end),
               (this_or_next|eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
               (eq, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
               (assign, ":num_candidates", 0),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_add, ":num_candidates", 1),
               (try_end),
               (store_random_in_range, ":random_candidate", 0, ":num_candidates"),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_sub, ":random_candidate", 1),
                 (lt, ":random_candidate", 0),
                 (try_begin),
                   (eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", ":cur_agent"),
                 (else_try),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", ":cur_agent"),
                 (try_end),
               (try_end),
             (try_end),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1), #fighters are chosen
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 3),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (try_for_agents, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (try_begin),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (entry_point_get_position, pos1, 30),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (entry_point_get_position, pos1, 31),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
                 (entry_point_get_position, pos1, ":spawn_point"),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 2),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (entry_point_get_position, pos2, 30),
             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
             (lt, ":sq_dist_1", 400), #2 meters
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (entry_point_get_position, pos2, 31),
             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
             (lt, ":sq_dist_2", 400), #2 meters
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 3),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 1),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 2),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (try_end),
         ], []),


    ] + custom_commander_commom_triggers, ## CC
  ),

  (
    "tutorial_1",0,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only,af_override_everything,0,1,[itm_tutorial_shield,itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_1_state", 5),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	               (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_1_state", 0),
                       (assign, "$tutorial_1_msg_1_displayed", 0),
                       (assign, "$tutorial_1_msg_2_displayed", 0),
                       (assign, "$tutorial_1_msg_3_displayed", 0),
                       (assign, "$tutorial_1_msg_4_displayed", 0),
                       (assign, "$tutorial_1_msg_5_displayed", 0),
                       (assign, "$tutorial_1_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_1_state", 0),
                   (try_begin),
                     (eq, "$tutorial_1_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_1_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_1"),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (entry_point_get_position,pos1,1),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (tutorial_message, "str_tutorial_1_msg_1"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,2),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 1),
                   (try_begin),
                     (eq, "$tutorial_1_msg_2_displayed", 0),
                     (assign, "$tutorial_1_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,3),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 2),
                   (try_begin),
                     (eq, "$tutorial_1_msg_3_displayed", 0),
                     (assign, "$tutorial_1_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_3"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 4),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                 (else_try),
                   (eq, "$tutorial_1_state", 3),
                   (try_begin),
                     (eq, "$tutorial_1_msg_4_displayed", 0),
                     (assign, "$tutorial_1_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_4"),
                     (store_mission_timer_a, "$tutorial_time"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a, ":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (gt, ":cur_time", 10),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 4),
                   (try_begin),
                     (eq, "$tutorial_1_msg_5_displayed", 0),
                     (assign, "$tutorial_1_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_5"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 5),
                   (eq, "$tutorial_1_msg_6_displayed", 0),
                   (assign, "$tutorial_1_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_1_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_1_finished", 1), ## CC
                 (try_end),
                 ], []),
    ],
  ),



  (
    "tutorial_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_shield,itm_leather_jerkin,itm_leather_boots]),
        (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_1,0,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_2_state", 9),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),
      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_2_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),
		               
                       (assign, "$tutorial_2_state", 0),
                       (assign, "$tutorial_2_msg_1_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_4_displayed", 0),
                       (assign, "$tutorial_2_msg_5_displayed", 0),
                       (assign, "$tutorial_2_msg_6_displayed", 0),
                       (assign, "$tutorial_2_msg_7_displayed", 0),
                       (assign, "$tutorial_2_msg_8_displayed", 0),
                       (assign, "$tutorial_2_msg_9_displayed", 0),
                       (assign, "$tutorial_2_melee_agent_state", 0),
                       ], []),

      (10, 0, 0, [(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                  (agent_refill_ammo, reg0)], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_2_state", 0),
                   (try_begin),
                     (eq, "$tutorial_2_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_2_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_1"),
                     (team_give_order, 1, grc_everyone, mordr_stand_ground),
                     (team_give_order, 1, grc_infantry, mordr_charge),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 1),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (try_begin),
                     (eq, "$tutorial_2_melee_agent_state", 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (agent_clear_scripted_mode, ":cur_agent"),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (store_mission_timer_a,"$tutorial_time"),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 2),
                     (try_begin),
                       (eq, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 1),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (store_mission_timer_a,":cur_time"),
                     (val_sub, ":cur_time", "$tutorial_time"),
                     (store_sub, reg3, 20, ":cur_time"),
                     (tutorial_message, "str_tutorial_2_msg_2"),
                     (gt, ":cur_time", 20),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 3),
                     (try_begin),
                       (eq, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 1),
                       (tutorial_message, "str_tutorial_2_msg_3"),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 2),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 4),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 2),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 30),
                     (agent_set_position, ":cur_agent", pos1),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                     (prop_instance_get_position, pos1, ":door_object"),
                     (position_rotate_z, pos1, 90),
                     (prop_instance_animate_to_position, ":door_object", pos1, 150),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (val_add, "$tutorial_2_state", 1),
                   (try_end),
                 (else_try),
                   (eq, "$tutorial_2_state", 3),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 1), #reenable
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (store_mission_timer_a,"$tutorial_time"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 4),
                   (try_begin),
                     (eq, "$tutorial_2_msg_4_displayed", 0),
                     (assign, "$tutorial_2_msg_4_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_2_msg_4"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position,pos1,5),
                   (set_spawn_position, pos1),
                   (spawn_item, "itm_tutorial_sword"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_position, ":cur_agent", pos1),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 5),
                   (try_begin),
                     (eq, "$tutorial_2_msg_5_displayed", 0),
                     (assign, "$tutorial_2_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 2),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 6),
                   (try_begin),
                     (eq, "$tutorial_2_msg_6_displayed", 0),
                     (assign, "$tutorial_2_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_sword"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 7),
                   (try_begin),
                     (eq, "$tutorial_2_msg_7_displayed", 0),
                     (assign, "$tutorial_2_msg_7_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_7"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 4),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 8),
                   (try_begin),
                     (eq, "$tutorial_2_msg_8_displayed", 0),
                     (assign, "$tutorial_2_msg_8_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_8"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 9),
                   (eq, "$tutorial_2_msg_9_displayed", 0),
                   (assign, "$tutorial_2_msg_9_displayed", 1),
                   (tutorial_message, "str_tutorial_2_msg_9"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_2_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_2_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_leather_jerkin,itm_leather_boots]),
        (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (5,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 12),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       (assign, "$tutorial_3_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, pos1),
                     (spawn_item, "itm_tutorial_staff_no_attack"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_staff_no_attack"),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_3"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 6),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 7),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 8),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 9),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 10),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 11),
                   (try_begin),
                     (eq, "$tutorial_3_msg_5_displayed", 0),
                     (assign, "$tutorial_3_msg_5_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_5"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 12),
                   (try_begin),
                     (eq, "$tutorial_3_msg_6_displayed", 0),
                     (assign, "$tutorial_3_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 5),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 13),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 5),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_staff,itm_leather_jerkin,itm_leather_boots]), 
        (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (6,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),


      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_1"),
                     (play_sound, "snd_tutorial_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id","trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (neg|agent_is_alive, reg0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),                 
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (neg|agent_is_alive, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (eq, "$tutorial_3_msg_5_displayed", 0),
                   (assign, "$tutorial_3_msg_5_displayed", 1),
                   (tutorial_message, "str_tutorial_3_2_msg_5"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_3_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),

      
    ],
  ),

  (
    "tutorial_4",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_4_state", 11),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         ]),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_4_state", 0),
                       (assign, "$tutorial_4_msg_1_displayed", 0),
                       (assign, "$tutorial_4_msg_2_displayed", 0),
                       (assign, "$tutorial_4_msg_3_displayed", 0),
                       (assign, "$tutorial_4_msg_4_displayed", 0),
                       (assign, "$tutorial_4_msg_5_displayed", 0),
                       (assign, "$tutorial_4_msg_6_displayed", 0),
                       (assign, "$tutorial_4_msg_7_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_4_state", 0),
                   (try_begin),
                     (eq, "$tutorial_4_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_4_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_1"),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, 1),
                     (spawn_horse, "itm_tutorial_saddle_horse"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_horse, ":horse_agent", ":player_agent"),
                   (ge, ":horse_agent", 0),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 2),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 1),
                   (try_begin),
                     (eq, "$tutorial_4_msg_2_displayed", 0),
                     (assign, "$tutorial_4_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 3),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 3),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 4),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 4),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 5),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 4),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 5),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 6),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 7),
                   (try_begin),
                     (eq, "$tutorial_4_msg_3_displayed", 0),
                     (assign, "$tutorial_4_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 8),
                   (try_begin),
                     (eq, "$tutorial_4_msg_4_displayed", 0),
                     (assign, "$tutorial_4_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 2),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 8),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 9),
                   (try_begin),
                     (eq, "$tutorial_4_msg_5_displayed", 0),
                     (assign, "$tutorial_4_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 8),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 10),
                   (try_begin),
                     (eq, "$tutorial_4_msg_6_displayed", 0),
                     (assign, "$tutorial_4_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_4_state", 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 11),
                   (eq, "$tutorial_4_msg_7_displayed", 0),
                   (assign, "$tutorial_4_msg_7_displayed", 1),
                   (tutorial_message, "str_tutorial_4_msg_7"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_4_finished", 1), ## CC
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_5",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_visitor_source|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_shield,itm_tutorial_short_bow,itm_tutorial_arrows,itm_tutorial_saddle_horse,itm_leather_jerkin,itm_leather_boots]),
        (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_5_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),


      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_5_state", 100),
        ], []),

      (0, 0, ti_once, [
      	               (tutorial_message_set_size, 17, 17),
	                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_5_state", 0),
                       (assign, "$tutorial_5_msg_1_displayed", 0),
                       (assign, "$tutorial_5_msg_2_displayed", 0),
                       (assign, "$tutorial_5_msg_3_displayed", 0),
                       (assign, "$tutorial_5_msg_4_displayed", 0),
                       (assign, "$tutorial_5_msg_5_displayed", 0),
                       (assign, "$tutorial_5_msg_6_displayed", 0),
                       ], []),

      (0, 0, ti_once, [(set_show_messages, 0),
                       (team_give_order, 0, grc_everyone, mordr_stand_ground),
                       (set_show_messages, 1),
                       (store_mission_timer_a, ":cur_time"),
                       (gt, ":cur_time", 3),
                       ], []),

      (0, 0, 0, [(call_script, "script_cf_turn_windmill_fans", 0)], []),
      
      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_5_state", 0),
                   (try_begin),
                     (eq, "$tutorial_5_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_5_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_1"),
                     (entry_point_get_position, pos1, 5),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 1),
                   (try_begin),
                     (eq, "$tutorial_5_msg_2_displayed", 0),
                     (assign, "$tutorial_5_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 2),
                   (try_begin),
                     (eq, "$tutorial_5_msg_3_displayed", 0),
                     (assign, "$tutorial_5_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,5,"trp_vaegir_archer"),
                   (set_visitor,6,"trp_vaegir_archer"),
                   (set_visitor,7,"trp_vaegir_archer"),
                   (entry_point_get_position, pos1, 11),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 12),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (set_show_messages, 0),
                   (team_give_order, 0, grc_archers, mordr_stand_ground),
                   (set_show_messages, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 3),
                   (try_begin),
                     (eq, "$tutorial_5_msg_4_displayed", 0),
                     (assign, "$tutorial_5_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_archers),
                   (entry_point_get_position, pos2, 11),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 12),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,8,"trp_bandit"),
                   (set_visitor,9,"trp_bandit"),
                   (set_visitor,10,"trp_bandit"),
                   (set_visitor,11,"trp_bandit"),
                   (team_give_order, 1, grc_everyone, mordr_charge),
                 (else_try),
                   (eq, "$tutorial_5_state", 4),
                   (try_begin),
                     (eq, "$tutorial_5_msg_5_displayed", 0),
                     (assign, "$tutorial_5_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (assign, ":enemy_count", 0),
                   (try_for_agents, ":cur_agent"),
                     (agent_is_human, ":cur_agent"),
                     (agent_is_alive, ":cur_agent"),
                     (agent_get_team, ":cur_team", ":cur_agent"),
                     (eq, ":cur_team", 1),
                     (val_add, ":enemy_count", 1),
                   (try_end),
                   (eq, ":enemy_count", 0),
                   (val_add, "$tutorial_5_state", 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 5),
                   (eq, "$tutorial_5_msg_6_displayed", 0),
                   (assign, "$tutorial_5_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_5_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_5_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_5_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "quick_battle_battle",mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 15),
         ]),

      common_battle_init_banner,
      
      (0, 0, ti_once, [],
        [
          (assign, "$g_battle_result", 0),
          (call_script, "script_combat_music_set_situation_with_culture"),
         ]),

      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
    ]
	##diplomacy begin
	+ dplmc_battle_mode_triggers + custom_commander_commom_triggers + ccc_lead_triggers,  ##CC-C
	##diplomacy end
  ),

  (
    "quick_battle_siege", mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_mission_start,
      common_battle_init_banner,

      (0, 0, ti_once,
       [
         (assign, "$defender_team", 0),
         (assign, "$attacker_team", 1),
         (assign, "$defender_team_2", 2),
         (assign, "$attacker_team_2", 3),
         ], []),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 15),
         ]),

      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,
      common_custom_siege_init,
      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
      common_siege_attacker_do_not_stall,
      common_siege_refill_ammo,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
      common_siege_ai_trigger_init_2,
      ] + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC-C
    ),


    (
    "multiplayer_dm",mtf_battle_mode,-1, #deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      #multiplayer_server_check_belfry_movement,      
     
      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         
         (multiplayer_make_everyone_enemy),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly 
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext. 

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #ELITE_WARRIOR achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (player_get_kill_count, ":kill_count", ":my_player_no"),
           (player_get_death_count, ":death_count", ":my_player_no"),
           (store_mul, ":my_score_plus_death", ":kill_count", 1000),
           (val_sub, ":my_score_plus_death", ":death_count"),
           (assign, ":continue", 1),
           (get_max_players, ":num_players"),
           (assign, ":end_cond", ":num_players"),
           (try_for_range, ":player_no", 0, ":end_cond"),
             (player_is_active, ":player_no"),
             (player_get_team_no, ":player_team", ":player_no"),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (player_get_kill_count, ":kill_count", ":player_no"),
             (player_get_death_count, ":death_count", ":player_no"), #get_death_count
             (store_mul, ":player_score_plus_death", ":kill_count", 1000),
             (val_sub, ":player_score_plus_death", ":death_count"),
             (gt, ":player_score_plus_death", ":my_score_plus_death"),
             (assign, ":continue", 0),
             (assign, ":end_cond", 0), #break
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_ELITE_WARRIOR),
           (call_script, "script_ccd_record_achievement", ACHIEVEMENT_ELITE_WARRIOR),  ## CC-D add: for local achievement
         (try_end),
         #ELITE_WARRIOR achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"),
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),
         
           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),
         
           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      
      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),

    (
    "multiplayer_tdm",mtf_battle_mode,-1, #team_deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #GLORIOUS_MOTHER_FACTION achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (team_get_score, ":team_1_score", 0),
           (team_get_score, ":team_2_score", 1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_score", ":team_2_score"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_score", ":team_1_score"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_GLORIOUS_MOTHER_FACTION),
           (call_script, "script_ccd_record_achievement", ACHIEVEMENT_GLORIOUS_MOTHER_FACTION),  ## CC-D add: for local achievement
         (try_end),
         #GLORIOUS_MOTHER_FACTION achievement end

         (call_script, "script_multiplayer_event_mission_end"),
         
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin),
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":killer_agent_team"),
           (val_add, ":team_score", 1),
           (team_set_score, ":killer_agent_team", ":team_score"),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),
      
      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 20 seconds (tdm)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ],
  ),
  
  (
    "multiplayer_hq", mtf_battle_mode,-1, #headquarters mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (store_mul, ":initial_hq_score", "$g_multiplayer_game_max_points", 10000),
         
         (assign, "$g_score_team_1", ":initial_hq_score"),
         (assign, "$g_score_team_2", ":initial_hq_score"),

         (try_for_range, ":cur_flag_slot", multi_data_flag_owner_begin, multi_data_flag_owner_end),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
         (try_end),
           
         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
         (try_end),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),

         (try_begin),
           (multiplayer_is_server),
           (team_set_score, 0, "$g_multiplayer_game_max_points"),
           (team_set_score, 1, "$g_multiplayer_game_max_points"),
         (try_end),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),         
         (set_spawn_effector_scene_prop_kind, 0, "$team_1_flag_scene_prop"), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to $team_1_flag_scene_prop
         (set_spawn_effector_scene_prop_kind, 1, "$team_2_flag_scene_prop"), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to $team_2_flag_scene_prop
         
         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           (assign, "$g_number_of_flags", 0),
         
           #place base flags
           (entry_point_get_position, pos1, multi_base_point_team_1),
           (entry_point_get_position, pos3, multi_base_point_team_1),

           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),           
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),           
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),           
         
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
           (val_add, "$g_number_of_flags", 1),

           (entry_point_get_position, pos2, multi_base_point_team_2),
           (entry_point_get_position, pos3, multi_base_point_team_2),
         
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),                    
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
           (val_add, "$g_number_of_flags", 1),

           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
           (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
             (try_begin),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_red_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_blue_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_gray_headquarters_flag"),
             (try_end),
             (gt, ":num_instances_of_headquarters_flag", 0),
             (try_for_range, ":instance_no", 0, ":num_instances_of_headquarters_flag"),
               (scene_prop_get_instance, ":flag_id", ":headquarters_flag_no", ":instance_no"),
               (prop_instance_get_position, pos0, ":flag_id"),
        
               (set_spawn_position, pos0),
               (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),               
         
               #place other flags
               (try_for_range, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red", ":end_cond"),
                 (set_spawn_position, pos0),             
                 (try_begin),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red"),
                   (spawn_scene_prop, "$team_1_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_blue"),
                   (spawn_scene_prop, "$team_2_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_gray"),
                   (spawn_scene_prop, "spr_headquarters_flag_gray_code_only"),
                 (try_end),                         
               (try_end),

               #assign who owns this flag values
               (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
               (try_begin),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 0),
               (try_end),
               (val_add, "$g_number_of_flags", 1),         
             (try_end),
           (try_end),

           (assign, "$g_number_of_initial_team_1_flags", 0),
           (assign, "$g_number_of_initial_team_2_flags", 0),

           (try_for_range, ":place_no", 0, "$g_number_of_flags"),
             (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":place_no"),
             (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),
         
             (try_begin),
               (eq, ":place_no", 0),
               (entry_point_get_position, pos0, multi_base_point_team_1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_1", ":flag_id"),
             (else_try),
               (eq, ":place_no", 1),
               (entry_point_get_position, pos0, multi_base_point_team_2),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_2", ":flag_id"),
             (else_try),
               (assign, ":flag_start_red", 2),
               (scene_prop_get_num_instances, ":num_initial_red_flags", "spr_headquarters_flag_red"),
               (store_add, ":flag_start_blue", ":flag_start_red", ":num_initial_red_flags"),
               (scene_prop_get_num_instances, ":num_initial_blue_flags", "spr_headquarters_flag_blue"),
               (store_add, ":flag_start_gray", ":flag_start_blue", ":num_initial_blue_flags"),
               (scene_prop_get_num_instances, ":num_initial_gray_flags", "spr_headquarters_flag_gray"),         
               (try_begin),
                 (ge, ":place_no", ":flag_start_red"),
                 (gt, ":num_initial_red_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_red"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_blue"),
                 (gt, ":num_initial_blue_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_blue"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_gray"),
                 (gt, ":num_initial_gray_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_gray"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
               (try_end),             
               (prop_instance_get_position, pos0, ":flag_id"),
             (try_end),

             (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":place_no"),
             (prop_instance_set_position, ":pole_id", pos0),
         
             (position_move_z, pos0, multi_headquarters_pole_height),           
             (try_begin),
               (eq, ":current_owner", 0),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
             (else_try),
               (eq, ":current_owner", 1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_1_flags", 1),
             (else_try),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_2_flags", 1),
             (try_end),
           (try_end),
         (else_try),
           #these three lines both used in calculation of $g_number_of_flags and below part removing of initially placed flags
           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (assign, "$g_number_of_flags", 2),
           (val_add, "$g_number_of_flags", ":num_instances_of_red_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_blue_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_gray_headquarters_flag"),         
         (try_end),

         #remove initially placed flags
         (try_for_range, ":flag_no", 0, ":num_instances_of_red_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_blue_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_gray_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),

         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
       ]),         

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #RUIN_THE_RAID achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (call_script, "script_get_headquarters_scores"),
           (assign, ":team_1_num_flags", reg0),
           (assign, ":team_2_num_flags", reg1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_num_flags", ":team_2_num_flags"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_num_flags", ":team_1_num_flags"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_RUIN_THE_RAID),
           (call_script, "script_ccd_record_achievement", ACHIEVEMENT_RUIN_THE_RAID),  ## CC-D add: for local achievement
         (try_end),
         #RUIN_THE_RAID achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"),
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin), 
           (multiplayer_is_server),
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":dead_agent_team"),
           (try_begin),
             (eq, ":killer_agent_team", 0),
             (val_add, "$g_score_team_2", -10000), #if someone died from "team 2" then "team 2" loses 1 score point
           (else_try),
             (val_add, "$g_score_team_1", -10000), #if someone died from "team 1" then "team 1" loses 1 score point
           (try_end),
           (val_sub, ":team_score", 1),
           
           (get_max_players, ":num_players"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", ":dead_agent_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":dead_agent_team", ":team_score"),             
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for (a) counting seconds of flags being owned by their owners & (b) to calculate seconds past after that flag's pull message has shown          
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          #part a: counting seconds of flags being owned by their owners
          (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),
          (val_add, ":cur_flag_owned_seconds", 1),
          (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", ":cur_flag_owned_seconds"),
          #part b: to calculate seconds past after that flag's pull message has shown
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),        
      ]),               
      
      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs headqurters mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed program occured.
      [
        (multiplayer_is_server),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),
        
          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),        
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":cur_flag_owner", 1),
                (eq, ":old_team_1_agent_count", 0),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 1),
                (assign, ":continue", 1),
              (else_try),
                (neq, ":cur_flag_owner", 2),
                (eq, ":old_team_2_agent_count", 0),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 2),
                (assign, ":continue", 1),
              (try_end),
 
              (eq, ":continue", 1),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_is_pulling, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_is_pulling, ":flag_code"),
              (try_end),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),

              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (get_max_players, ":num_players"),
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (assign, ":new_flag_owner", -1),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.            

          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (try_begin),
            (try_begin),
              (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 1),
              (eq, ":flag_visibility", 0),
              (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 2),
              (eq, ":flag_visibility", 0),                    
              (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),        
              (assign, ":cur_shown_flag", 0),
            (try_end),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.

            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 2),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (neq, ":cur_shown_flag", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 0),
              (try_end),
            (else_try),
              (neq, ":cur_flag_owner", ":cur_shown_flag"),      
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (ge, ":squared_dist", multi_headquarters_distance_sq_to_set_flag), #if distance is more equal than 9 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (eq, ":cur_shown_flag", 1),
                (assign, ":new_flag_owner", 1),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":cur_shown_flag", 2),
                (assign, ":new_flag_owner", 2),
                (assign, ":new_shown_flag", 2),
              (try_end),        
            (try_end),
          (try_end),
        
          (try_begin),
            (ge, ":new_flag_owner", 0),
            (this_or_next|neq, ":new_flag_owner", ":cur_flag_owner"),
            (neq, ":cur_shown_flag", ":new_shown_flag"),

            (try_begin),
              (neq, ":cur_flag_owner", 0),
              (eq, ":new_flag_owner", 0),
              (try_begin),
                (eq, ":cur_flag_owner", 1),
                (assign, ":neutralizer_team", 2),
              (else_try),
                (eq, ":cur_flag_owner", 2),
                (assign, ":neutralizer_team", 1),
              (try_end),
              (store_mul, ":flag_code", ":neutralizer_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_neutralized, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (get_max_players, ":num_players"),        
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_neutralized, ":flag_code"),
              (try_end),              
            (try_end),
        
            (try_begin),
              (neq, ":cur_flag_owner", ":new_flag_owner"),
              (neq, ":new_flag_owner", 0),
              (store_mul, ":flag_code", ":new_flag_owner", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_captured, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (get_max_players, ":num_players"),        
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_captured, ":flag_code"),
              (try_end),              
            (try_end),

            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_set_num_agents_around_flag", ":flag_no", ":cur_flag_players_around"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (assign, ":number_of_total_players", 0),
            (get_max_players, ":num_players"),        
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":cur_flag_players_around"),
              (val_add, ":number_of_total_players", 1),
            (try_end),

            (store_mul, ":owner_code", ":new_flag_owner", 100),
            (val_add, ":owner_code", ":new_shown_flag"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_change_flag_owner", ":flag_no", ":owner_code"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_change_flag_owner, ":flag_no", ":owner_code"),          
            (try_end),

            (try_begin),
              (neq, ":new_flag_owner", 0),

              (try_begin),
                (eq, ":new_flag_owner", 1),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_1"),
              (else_try),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_2"),
              (try_end),

              (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
              (troop_get_slot, ":current_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),              
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),

              (val_min, ":current_flag_owned_seconds", 360), #360 seconds is max time for hq, this will limit money awarding by (180 x total_number_of_players)

              (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),

              (try_begin),
                (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
                (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
                (assign, ":flag_value", 2),
              (else_try),
                (assign, ":flag_value", 1),
              (try_end),

              (try_begin),                                #score awarding in flag capturing is changed in hq. If only one player captured flag he get 3 points,
                (le, ":number_of_players_around_flag", 1),   #if 2 player captured they get 2 points, if <=6 players get flag all get 1 points. There is no importance of flag value at scoring.
                (assign, ":score_award_per_player", 3),
              (else_try),
                (eq, ":number_of_players_around_flag", 2),
                (assign, ":score_award_per_player", 2),
              (else_try),
                (le, ":number_of_players_around_flag", 6),
                (assign, ":score_award_per_player", 1),
              (else_try),
                (assign, ":score_award_per_player", 0),
              (try_end),
              
              (store_mul, ":total_money_award", ":current_flag_owned_seconds", ":number_of_total_players"), #total money will be shared after a flag capturing is (0.50 * seconds * number_of_players)         
              (val_mul, ":total_money_award", ":flag_value"),                                               #example: if 15 players is playing and 120 seconds past before flag captured, award is 900 golds.
              (val_div, ":total_money_award", 2),

              (try_begin),
                (gt, ":number_of_players_around_flag", 0), #if there are still any living agents around flag.
                (store_div, ":money_award_per_player", ":total_money_award", ":number_of_players_around_flag"),
              (try_end),
        
              (get_max_players, ":num_players"),
                (try_for_range, ":player_no", 0, ":num_players"),
                (player_is_active, ":player_no"),
                (player_get_agent_id, ":cur_agent", ":player_no"),
                (ge, ":cur_agent", 0),
                (agent_get_team, ":cur_agent_team", ":cur_agent"),
                (val_add, ":cur_agent_team", 1),
                (eq, ":cur_agent_team", ":new_flag_owner"),
                (agent_get_position, pos1, ":cur_agent"), 
                (prop_instance_get_position, pos0, ":pole_id"), 
                (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
                (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
                (val_add, ":squared_dist", ":squared_height_dist"),
                (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),                
                (player_get_score, ":player_score", ":player_no"), #give score to player which helped flag to be owned by new_flag_owner team 
                (val_add, ":player_score", ":score_award_per_player"),
                (player_set_score, ":player_no", ":player_score"),                
                (player_get_gold, ":player_gold", ":player_no"), #give money to player which helped flag to be owned by new_flag_owner team 
                (val_add, ":player_gold", ":money_award_per_player"),
                (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),              
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
        #trigger for increasing score in each second.
        (assign, ":number_of_team_1_flags", 0),
        (assign, ":number_of_team_2_flags", 0),

        (assign, ":owned_flag_value", 0),        
        (assign, ":not_owned_flag_value", 0),
        
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
          (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),
        
          (try_begin),
            (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
            (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
            (assign, ":flag_value", 2),
          (else_try),
            (assign, ":flag_value", 1),
          (try_end),
        
          (try_begin),
            (eq, ":cur_flag_owner", 1),
            (val_add, ":number_of_team_1_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (eq, ":cur_flag_owner", 2),
            (val_add, ":number_of_team_2_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (val_add, ":not_owned_flag_value", ":flag_value"),
          (try_end),
        (try_end),
        
        (store_add, ":all_flag_value", ":owned_flag_value", ":not_owned_flag_value"),
        (store_sub, ":cur_flag_difference", ":number_of_team_1_flags", ":number_of_team_2_flags"),
        (store_mul, ":cur_flag_difference_mul_2", ":cur_flag_difference", 2),
        (store_sub, ":initial_flag_difference", "$g_number_of_initial_team_1_flags", "$g_number_of_initial_team_2_flags"),

        (assign, ":number_of_active_players", 0),
        (get_max_players, ":end_cond"),
        (try_for_range, ":player_no", 0, ":end_cond"),
          (player_is_active, ":player_no"),
          (val_add, ":number_of_active_players", 1),
          (assign, ":end_cond", 0),
        (try_end),

        (try_begin),
          (ge, ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_sub, ":difference", ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),
          
          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),        
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),
          
          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (val_sub, "$g_score_team_2", ":score_addition_winner"),
            (try_begin),
              (ge, ":number_of_team_2_flags", 1),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (try_end),
          (try_end),
        (else_try),
          (store_sub, ":difference", ":initial_flag_difference", ":cur_flag_difference_mul_2"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),
          
          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),
        
          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (try_begin),
              (ge, ":number_of_team_1_flags", 1),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (try_end),
            (val_sub, "$g_score_team_1", ":score_addition_winner"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_1", 0),
        (try_begin),
          (store_div, ":team_new_score_1", "$g_score_team_1", 10000),
          (neq, ":team_new_score_1", ":team_score_1"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 0, ":team_new_score_1"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_new_score_1"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_2", 1),
        (try_begin),
          (store_div, ":team_new_score_2", "$g_score_team_2", 10000),
          (neq, ":team_new_score_2", ":team_score_2"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 1, ":team_new_score_2"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_new_score_2"),
          (try_end),
        (try_end),
      ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
         
           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (hq)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),

    (
    "multiplayer_cf",mtf_battle_mode,-1, #capture_the_flag mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      
      (64,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (65,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (try_begin),
           (multiplayer_is_server),
           (store_current_scene, ":cur_scene"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_medium"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_large"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_steppe_medium"),
           (eq, ":cur_scene", "scn_random_multi_steppe_large"),
           (entry_point_get_position, pos0, 0),
           (entry_point_set_position, 64, pos0),
           (entry_point_get_position, pos1, 32),
           (entry_point_set_position, 65, pos1),
         (try_end),
         
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$flag_1_at_ground_timer", 0),
         (assign, "$flag_2_at_ground_timer", 0),
         
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
       
         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           (entry_point_get_position, pos0, multi_base_point_team_1),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
         
           (entry_point_get_position, pos0, multi_base_point_team_2),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),         

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),                                 #when an agent dies which carrying a flag, assign flag position to current position with
           (agent_is_human, ":dead_agent_no"),        #ground level z and do not change it again according to dead agent's any coordinate/rotation.
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":dead_agent_no"),
           (try_begin),
             (try_begin),
               (multiplayer_is_server),
  
               (ge, ":attached_scene_prop", 0), #moved from above after auto-set position

               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_attached_scene_prop", ":dead_agent_no", -1),
               (agent_set_horse_speed_factor, ":dead_agent_no", 100),
               #for only server itself-----------------------------------------------------------------------------------------------
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":dead_agent_no", -1),
               (try_end),

               (prop_instance_get_position, pos0, ":attached_scene_prop"), #moved from above to here after auto-set position
               (position_set_z_to_ground_level, pos0), #moved from above to here after auto-set position
               (prop_instance_set_position, ":attached_scene_prop", pos0), #moved from above to here after auto-set position

               (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
               (try_begin),
                 (eq, ":dead_agent_team", 0),
                 (assign, ":dead_agent_rival_team", 1),
               (else_try),
                 (assign, ":dead_agent_rival_team", 0),
               (try_end),
               (team_set_slot, ":dead_agent_rival_team", slot_team_flag_situation, 2), #2-flag at ground
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":dead_agent_rival_team", 2),
               #for only server itself-----------------------------------------------------------------------------------------------         
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":dead_agent_rival_team", 2), #flag at ground
               (try_end),
             (try_end),
           (try_end),         
         (try_end),
         ]),

      (1, 0, 0, [], #returning flag if it is not touched by anyone in 60 seconds
       [
         (multiplayer_is_server),
         (try_for_range, ":team_no", 0, 2),           
           (try_begin),
             (team_slot_eq, ":team_no", slot_team_flag_situation, 2),

             (assign, ":flag_team_no", -1),
         
             (try_begin),
               (eq, ":team_no", 0),
               (val_add, "$flag_1_at_ground_timer", 1),
               (ge, "$flag_1_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground),
               (assign, ":flag_team_no", 0),
             (else_try),
               (val_add, "$flag_2_at_ground_timer", 1),
               (ge, "$flag_2_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground), 
               (assign, ":flag_team_no", 1),
             (try_end),

             (try_begin),
               (ge, ":flag_team_no", 0),

               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (assign, "$flag_1_at_ground_timer", 0),
               (else_try),
                 (eq, ":flag_team_no", 1),
                 (assign, "$flag_2_at_ground_timer", 0),
               (try_end),
         
               #cur agent returned his own flag to its default position!
               (team_set_slot, ":flag_team_no", slot_team_flag_situation, 0), #0-flag at base

               #return team flag to its starting position.
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":flag_team_no", 0),
               #for only server itself-----------------------------------------------------------------------------------------------         
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":flag_team_no", 0),
               (try_end),

               (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
               (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),

               (assign, ":team_1_flag_id", ":flag_red_id"),
               (assign, ":team_1_base_entry_id", multi_base_point_team_1),

               (assign, ":team_2_flag_id", ":flag_blue_id"),
               (assign, ":team_2_base_entry_id", multi_base_point_team_2),

               #return team flag to its starting position.
               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (entry_point_get_position, pos5, ":team_1_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_1_flag_id", pos5), #moved from above to here after auto-set position
               (else_try),
                 (entry_point_get_position, pos5, ":team_2_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_2_flag_id", pos5), #moved from above to here after auto-set position
               (try_end),

               #(team_get_faction, ":team_faction", ":flag_team_no"),
               #(str_store_faction_name, s1, ":team_faction"),
               #(tutorial_message_set_position, 500, 500),
               #(tutorial_message_set_size, 30, 30),
               #(tutorial_message_set_center_justify, 1),
               #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

               (store_mul, ":minus_flag_team_no", ":flag_team_no", -1),
               (val_sub, ":minus_flag_team_no", 1),

               #for only server itself
               (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"), 
 
               #no need to send also server here
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"),
               (try_end),
             (try_end),
           (else_try),
             (try_begin),
               (eq, ":team_no", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (assign, "$flag_2_at_ground_timer", 0),         
             (try_end),
           (try_end),
         (try_end),           
         ]),
         
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (0, 0, 0, [], #control any agent captured flag or made score.
       [
         (multiplayer_is_server),
         (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
         (prop_instance_get_position, pos1, ":flag_red_id"), #hold position of flag of team 1 (red flag) at pos1

         (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),
         (prop_instance_get_position, pos2, ":flag_blue_id"), #hold position of flag of team 2 (blue flag) at pos2

         (multiplayer_get_my_player, ":my_player_no"),
         (get_max_players, ":num_players"),                               

         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"), #horses cannot take flag
           (agent_is_alive, ":cur_agent"),
           (neg|agent_is_non_player, ":cur_agent"), #for now bots cannot take flag or return flags to home.
           (agent_get_horse, ":cur_agent_horse", ":cur_agent"),
           (eq, ":cur_agent_horse", -1), #horseman cannot take flag
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":cur_agent"),
         
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0),
             (assign, ":cur_agent_rival_team", 1),
           (else_try),
             (assign, ":cur_agent_rival_team", 0),
           (try_end),

           (try_begin),
             (eq, ":cur_agent_team", 0), 
             (assign, ":our_flag_id", ":flag_red_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_1),
           (else_try), 
             (assign, ":our_flag_id", ":flag_blue_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_2),
           (try_end),

           (agent_get_position, pos3, ":cur_agent"),
           (prop_instance_get_position, pos4, ":our_flag_id"),
           (get_distance_between_positions, ":dist", pos3, pos4),
           (team_get_slot, ":cur_agent_flag_situation", ":cur_agent_team", slot_team_flag_situation),
         
           (try_begin), #control if agent can return his own flag to default position
             (eq, ":cur_agent_flag_situation", 2), #if our flag is at ground
             (lt, ":dist", 100), #if this agent is near to his team's own flag

             #cur agent returned his own flag to its default position!
             (team_set_slot, ":cur_agent_team", slot_team_flag_situation, 0), #0-flag at base

             #return team flag to its starting position.
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------         
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_team", 0),
             (try_end),

             #return team flag to its starting position.
             (entry_point_get_position, pos5, ":our_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":our_flag_id", pos5), #moved from above to here after auto-set position

             (try_begin), #give 1 score points to player which returns his/her flag to team base
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", multi_capture_the_flag_score_flag_returning),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":cur_agent"), 

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":cur_agent"),
             (try_end),         
           (try_end),
                   
           (try_begin), #control if agent carries flag and made score
             (neq, ":attached_scene_prop", -1), #if not agent is carrying anything
         
             (try_begin),
               (eq, ":cur_agent_team", 0), 
               (assign, ":rival_flag_id", ":flag_blue_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_2),
             (else_try), 
               (assign, ":rival_flag_id", ":flag_red_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_1),
             (try_end),
             
             (eq, ":attached_scene_prop", ":rival_flag_id"), #if agent is carrying rival flag
             (eq, ":cur_agent_flag_situation", 0), #if our flag is at home position         
             (lt, ":dist", 100), #if this agent (carrying rival flag) is near to his team's own

             #cur_agent's team is scored!#
             (team_get_score, ":cur_agent_team_score", ":cur_agent_team"), #this agent's team scored
             (val_add, ":cur_agent_team_score", 1),
             (team_set_score, ":cur_agent_team", ":cur_agent_team_score"),

             (try_begin), #give 5 score points to player which connects two flag and make score to his/her team
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", "$g_multiplayer_point_gained_from_capturing_flag"),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),
         
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_team_set_score", ":cur_agent_team", ":cur_agent_team_score"),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":cur_agent_team", ":cur_agent_team_score"),
             (try_end),

             (agent_set_attached_scene_prop, ":cur_agent", -1),             
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 0), #0-flag at base

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", -1),
             (agent_set_horse_speed_factor, ":cur_agent", 100),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", -1),
             (try_end),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------         
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 0),
             (try_end),

             #return rival flag to its starting position
             (entry_point_get_position, pos5, ":rival_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":rival_flag_id", pos5), #moved from above to here after auto-set position

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(player_get_agent_id, ":my_player_agent", ":my_player_no"),
             #(try_begin),
             #  (ge, ":my_player_agent", 0),
             #  (agent_get_team, ":my_player_team", ":my_player_agent"),
             #  (try_begin),
             #    (eq, ":my_player_team", ":cur_agent_team"),
             #    (assign, ":text_font_color", 0xFF33DDFF),
             #  (else_try),
             #    (assign, ":text_font_color", 0xFFFF0000),
             #  (try_end),
             #(else_try),
             #  (assign, ":text_font_color", 0xFFFFFFFF),
             #(try_end),    
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_captured_flag", ":text_font_color", 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_score, ":cur_agent"), 
             
             #no need to send to also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_score, ":cur_agent"),
             (try_end),
           (try_end),
         
           (eq, ":attached_scene_prop", -1), #agents carrying other scene prop cannot take flag.
           (agent_get_position, pos3, ":cur_agent"),
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0), #if this agent is from team 1, look its distance to blue flag.
             (get_distance_between_positions, ":dist", pos2, pos3),
             (assign, ":rival_flag_id", ":flag_blue_id"),
           (else_try), #if this agent is from team 2, look its distance to red flag.
             (get_distance_between_positions, ":dist", pos1, pos3),
             (assign, ":rival_flag_id", ":flag_red_id"),
           (try_end),

           (try_begin),  #control if agent stole enemy flag
             (le, ":dist", 100),
             (neg|team_slot_eq, ":cur_agent_rival_team", slot_team_flag_situation, 1), #if flag is not already stolen.
             
             (agent_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (agent_set_attached_scene_prop_x, ":cur_agent", 20),
             (agent_set_attached_scene_prop_z, ":cur_agent", 50),

             (try_begin),
               (eq, ":cur_agent_team", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (eq, ":cur_agent_team", 1),
               (assign, "$flag_2_at_ground_timer", 0),
             (try_end),

             #cur_agent stole rival team's flag!
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 1), #1-stolen flag
                      
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", ":rival_flag_id"),
             (agent_set_horse_speed_factor, ":cur_agent", 75),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (try_end),
         
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 1),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 1),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_taken_flag", 0xFFFFFFFF, 5), 

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_stole, ":cur_agent"), 

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_stole, ":cur_agent"),
             (try_end),         
           (try_end),
         (try_end),         
         ]),

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (cf)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (start_presentation, "prsnt_multiplayer_flag_projection_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),

    (
    "multiplayer_sg",mtf_battle_mode,-1, #siege
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_belfry_movement,      

      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
#CC-C begin
          (display_message,"@Welcome to Cave"),
#CC-C end
         (try_begin),
           (multiplayer_is_server),
           (this_or_next|player_is_active, ":player_no"),
           (eq, ":player_no", 0),
           (store_mission_timer_a, ":round_time"),
           (val_sub, ":round_time", "$g_round_start_time"),
           (try_begin),
             (lt, ":round_time", 25),
             (assign, ":number_of_respawns_spent", 0),
           (else_try),
             (lt, ":round_time", 60),
             (assign, ":number_of_respawns_spent", 1),
           (else_try),
             (lt, ":round_time", 105),
             (assign, ":number_of_respawns_spent", 2),
           (else_try),
             (lt, ":round_time", 160),
             (assign, ":number_of_respawns_spent", 3),
           (else_try),
             (assign, ":number_of_respawns_spent", "$g_multiplayer_number_of_respawn_count"),
           (try_end),
           (player_set_slot, ":player_no", slot_player_spawn_count, ":number_of_respawns_spent"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_spent, ":number_of_respawns_spent"),
         (try_end),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
           (assign, "$g_my_spawn_count", 0),
         (else_try),
           (assign, "$g_my_spawn_count", 0),
         (try_end),
      
         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (assign, "$g_flag_is_not_ready", 0),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         
         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_number_of_flags", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           #place base flags
           (entry_point_get_position, pos1, multi_siege_flag_point),
           (set_spawn_position, pos1),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),         
           (position_move_z, pos1, multi_headquarters_pole_height),         
           (set_spawn_position, pos1),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
         (try_end),
         (val_add, "$g_number_of_flags", 1),

         (try_begin),
           (multiplayer_is_server),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),

           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),
             (assign, "$g_my_spawn_count", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
           (try_end),  
         (try_end),         

         (try_begin), 
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),

           (val_add, "$g_my_spawn_count", 1),
         
           (try_begin),
             (ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (multiplayer_get_my_player, ":my_player_no"),
             (player_get_team_no, ":my_player_team_no", ":my_player_no"),
             (eq, ":my_player_team_no", 0),
             (assign, "$g_my_spawn_count", 999),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (player_set_slot, ":dead_agent_player_id", slot_player_spawned_this_round, 0),
         (try_end),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),
      
      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs siege mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed problem occured.
      [
        (multiplayer_is_server),
        (eq, "$g_round_ended", 0),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),
        
          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),            
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),        
              (eq, ":old_team_2_agent_count", 0),
              (gt, ":number_of_agents_around_flag_team_2", 0),
              (eq, ":number_of_agents_around_flag_team_1", 0),
              (assign, ":puller_team", 2),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),
              (get_max_players, ":num_players"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (eq, "$g_round_ended", 0), #if round still continues and any team did not sucseed yet
          (eq, "$g_flag_is_not_ready", 0), #if round still continues and any team did not sucseed yet
        
          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.            

          (try_begin),
            (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.
            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters
              
              (prop_instance_is_animating, ":is_animating", ":flag_id"),
              (eq, ":is_animating", 1),

              #end of round, attackers win
              (assign, "$g_winner_team", 1),
              (prop_instance_stop_animating, ":flag_id"),        
        
              (get_max_players, ":num_players"), 
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_draw_this_round", "$g_winner_team"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
              (try_end),

              (assign, "$g_flag_is_not_ready", 1),
            (try_end),        
          (try_end),
        (try_end),
        ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),

      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_flag_is_not_ready", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds")],
       [
         (assign, ":flag_no", 0),
         (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
         (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
         (store_mod, ":team_2_agent_count_around_flag", ":current_owner_code", 100),

         (try_begin),
           (eq, ":team_2_agent_count_around_flag", 0),
         
           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),

           (assign, "$g_flag_is_not_ready", 1),
        
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),
         (try_end),
         ]),          

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for calculating seconds past after that flag's pull message has shown          
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),        
      ]),               

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),          

      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),
             
             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 0),           
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
         
           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"), 
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),
         
         #assigning everbody's spawn counts to 0
         (assign, "$g_my_spawn_count", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawn_count, 0),
         (try_end),

         #(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_initialize_objects"),

         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
         
         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         #initialize flag coordinates (move up the flag at pole)
         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
           (prop_instance_get_position, pos1, ":pole_id"),
           (position_move_z, pos1, multi_headquarters_pole_height),
           (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
           (prop_instance_stop_animating, ":flag_id"),
           (prop_instance_set_position, ":flag_id", pos1),
         (try_end),
         
         (assign, "$g_round_ended", 0),
         
         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start time for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999),
         (try_end),         

         (assign, "$g_flag_is_not_ready", 0),
       ]),
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),
           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),
           (player_get_agent_id, ":player_agent", ":player_no"), #new added for siege mod
         
           (assign, ":spawn_new", 0), 
           (assign, ":num_active_players_in_team_0", 0),
           (assign, ":num_active_players_in_team_1", 0),
           (try_begin),
             (assign, ":num_active_players", 0),
             (get_max_players, ":num_players"),
             (try_for_range, ":cur_player", 0, ":num_players"),
               (player_is_active, ":cur_player"),

               (player_get_team_no, ":cur_player_team", ":cur_player"),
               (try_begin),
                 (eq, ":cur_player_team", 0),
                 (val_add, ":num_active_players_in_team_0", 1),
               (else_try),
                 (eq, ":cur_player_team", 1),
                 (val_add, ":num_active_players_in_team_1", 1),
               (try_end),

               (val_add, ":num_active_players", 1),
             (try_end),
             (store_mission_timer_a, ":round_time"),
             (val_sub, ":round_time", "$g_round_start_time"),
                  
             (eq, "$g_round_ended", 0),
         
             (try_begin), #addition for siege mod to allow players spawn more than once (begin)
               (lt, ":player_agent", 0), 

               (try_begin), #new added begin, to avoid siege-crack (rejoining of defenders when they die)
                 (eq, ":player_team", 0), 
                 (player_get_slot, ":player_last_team_select_time", ":player_no", slot_player_last_team_select_time),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":elapsed_time", ":current_time", ":player_last_team_select_time"),
                 
                 (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"), 
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time), #new added for siege mod
                 (lt, ":elapsed_time", ":player_team_respawn_period"),

                 (store_sub, ":round_time", ":current_time", "$g_round_start_time"),
                 (ge, ":round_time", multiplayer_new_agents_finish_spawning_time),
                 (gt, ":num_active_players", 2),
                 (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),
                 (neq, ":multipication_of_num_active_players_in_teams", 0),
         
                 (assign, ":spawn_new", 0),
               (else_try), #new added end         
                 (assign, ":spawn_new", 1),
               (try_end),
             (else_try), 
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"), 
               (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"), 
               (try_begin), 
                 (eq, ":player_team", 0), 
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time), 
               (try_end), 
               (this_or_next|gt, ":elapsed_time", ":player_team_respawn_period"), 
               (player_slot_eq, ":player_no", slot_player_spawned_at_siege_round, 0), 
               (assign, ":spawn_new", 1),
             (try_end), 
           (try_end), #addition for siege mod to allow players spawn more than once (end)

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),

           (try_begin),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (try_begin),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 0),
               (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
               (assign, ":spawn_new", 0),
             (else_try),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 1),      
               (ge, ":spawn_count", 999),
               (assign, ":spawn_new", 0),
             (try_end),
           (try_end),

           (eq, ":spawn_new", 1),

           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),
           (val_add, ":spawn_count", 1),
           (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),

           (try_begin),
             (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (eq, ":player_team", 0),
             (assign, ":spawn_count", 999),
             (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),
           (try_end),

           (assign, ":player_is_horseman", 0),
           (player_get_item_id, ":item_id", ":player_no", ek_horse),
           (try_begin),
             (is_between, ":item_id", horses_begin, horses_end), ## CC
             (assign, ":player_is_horseman", 1),
           (try_end),

           (try_begin),
             (lt, ":round_time", 20), #at start of game spawn at base entry point (only enemies)
             (try_begin),         
               (eq, ":player_team", 0), #defenders in siege mod at start of round
               (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":player_is_horseman"),
               (assign, ":entry_no", reg0),             
             (else_try),
               (eq, ":player_team", 1), #attackers in siege mod at start of round
               (assign, ":entry_no", multi_initial_spawn_point_team_2), #change later
             (try_end),
           (else_try),
             (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":player_is_horseman"),
             (assign, ":entry_no", reg0),             
           (try_end),
         
           (player_spawn_new_agent, ":player_no", ":entry_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 1),         
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),

    (
    "multiplayer_bt",mtf_battle_mode,-1, #battle mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         
         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$server_mission_timer_while_player_joined", 0),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           (entry_point_get_position, pos0, multi_death_mode_point),
           (position_set_z_to_ground_level, pos0),
           (position_move_z, pos0, -2000),

           (position_move_x, pos0, 100), 
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (position_move_x, pos0, -200), 
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (prop_instance_get_position, pos0, ":pole_1_id"),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),
         
           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (prop_instance_get_position, pos0, ":pole_2_id"),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),

           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),		   
         (try_end),

         #Equipment cost fix
         (agent_set_slot, ":agent_no", slot_agent_bought_horse, -1),
         (try_begin),
		     (multiplayer_is_server),
             (neg|agent_is_human, ":agent_no"),  #Spawned agent is horse
             (agent_get_rider, ":rider_agent_id", ":agent_no"),
             (agent_is_active, ":rider_agent_id"),
             (neg|agent_is_non_player, ":rider_agent_id"),
             (agent_get_player_id, ":rider_player_id", ":rider_agent_id"), 
             (neg|player_item_slot_is_picked_up, ":rider_player_id", ek_horse),
             (agent_set_slot, ":rider_agent_id", slot_agent_bought_horse, ":agent_no"),

             #Debugging
             #(str_store_player_username, s0, ":rider_player_id"), #used in multiplayer mode only
             #(agent_get_item_id, ":my_mount_type", ":agent_no"), #(works only for horses, returns -1 otherwise)
             #(str_store_item_name, s1, ":my_mount_type"),
             #(multiplayer_send_string_to_player, ":rider_player_id", multiplayer_event_show_server_message, "@{s0} bought a {s1}"),
             ##
         (try_end),
         ###
         
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
 
         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),  
         (try_end),         
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),         
             (try_begin),
               (agent_is_alive, ":cur_agent"),  
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),                    
           (try_begin),         
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),                
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (team_get_score, ":team_2_score", 1),
                   (val_add, ":team_2_score", 1),
                   (team_set_score, 1, ":team_2_score"),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #1 is winner team
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (team_get_score, ":team_1_score", 0),
                   (val_add, ":team_1_score", 1),
                   (team_set_score, 0, ":team_1_score"),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #0 is winner team  
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),       
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),
         
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),    
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),
      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),

                 (assign, ":overtime_needed", 0), #checking for if overtime is needed. Overtime happens when lower heighted flag is going up
                 (try_begin),
                   (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open
                    
                   (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
                   (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
                   (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
                   (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

                   (prop_instance_get_position, pos1, ":pole_1_id"),
                   (prop_instance_get_position, pos2, ":pole_2_id"),
                   (prop_instance_get_position, pos3, ":flag_1_id"),
                   (prop_instance_get_position, pos4, ":flag_2_id"),

                   (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
                   (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),
                   (store_add, ":height_of_flag_1_plus", ":height_of_flag_1", min_allowed_flag_height_difference_to_make_score),
                   (store_add, ":height_of_flag_2_plus", ":height_of_flag_2", min_allowed_flag_height_difference_to_make_score),

                   (try_begin),
                     (le, ":height_of_flag_1", ":height_of_flag_2_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_1_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_1_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_1_cur_z", pos3),
                     (ge, ":flag_2_animation_target_z", ":flag_1_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),
                   
                   (try_begin),
                     (le, ":height_of_flag_2", ":height_of_flag_1_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_2_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_2_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_2_cur_z", pos4),
                     (ge, ":flag_2_animation_target_z", ":flag_2_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),
                 (try_end),
                 (eq, ":overtime_needed", 0),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),                          
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -1),
         
         (try_begin), #checking for winning by death mod
           (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
           (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

           (prop_instance_get_position, pos1, ":pole_1_id"),
           (prop_instance_get_position, pos2, ":pole_2_id"),
           (prop_instance_get_position, pos3, ":flag_1_id"),
           (prop_instance_get_position, pos4, ":flag_2_id"),

           (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
           (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),

           (try_begin),
             (ge, ":height_of_flag_1", ":height_of_flag_2"), #if flag_1 is higher than flag_2
             (store_sub, ":difference_of_heights", ":height_of_flag_1", ":height_of_flag_2"), 
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than 
             (assign, "$g_winner_team", 0),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (else_try), #if flag_2 is higher than flag_1
             (store_sub, ":difference_of_heights", ":height_of_flag_2", ":height_of_flag_1"),
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than 
             (assign, "$g_winner_team", 1),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (try_end),
         (try_end),
    
         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),
        ]),          

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),

      #checking for starting "death mode part 1"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 0),
                 (store_mission_timer_a, ":seconds_past_till_round_started"),
                 (val_sub, ":seconds_past_till_round_started", "$g_round_start_time"),
                 (store_div, "$g_multiplayer_round_max_seconds_div_2", "$g_multiplayer_round_max_seconds", 2),
                 (ge, ":seconds_past_till_round_started", "$g_multiplayer_round_max_seconds_div_2")],
       [
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
         (assign, "$g_battle_death_mode_started", 1),
         ]),

      #checking during "death mode part 1" for entering "death mode part 2"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 1),
                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"), #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_15", "$g_multiplayer_round_max_seconds", 15),
                 (lt, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_15")], #death mod cannot start at last 15 seconds
       [
         (assign, "$g_battle_death_mode_started", 2),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_start_death_mode"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_start_death_mode),
         (try_end),

         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         #death mode started make 4 item related to death mode visible.
         (store_random_in_range, "$g_random_entry_point", 0, 3),
         (val_add, "$g_random_entry_point", multi_death_mode_point),

         (entry_point_get_position, pos0, "$g_random_entry_point"),
         (position_set_z_to_ground_level, pos0),
         
         (position_move_x, pos0, 100), 
         (prop_instance_set_position, ":pole_1_id", pos0),

         (position_move_x, pos0, -200), 
         (prop_instance_set_position, ":pole_2_id", pos0),

         (prop_instance_get_position, pos0, ":pole_1_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_1_id", pos0),
         
         (prop_instance_get_position, pos0, ":pole_2_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_2_id", pos0),

         (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
         ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 1),
                 
                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (val_sub, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", 20), #in last 20 seconds to master of field below code effects
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"),], #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds            
        [
                 (assign, ":there_are_fighting_agents", 0),

                 (try_for_agents, ":agent_no_1"),
                   (eq, ":there_are_fighting_agents", 0),
                   (agent_is_human, ":agent_no_1"),
                   (try_for_agents, ":agent_no_2"),
                     (agent_is_human, ":agent_no_2"),
                     (neq, ":agent_no_1", ":agent_no_2"),

                     (agent_get_team, ":agent_no_1_team", ":agent_no_1"),
                     (agent_get_team, ":agent_no_2_team", ":agent_no_2"),

                     (neq, ":agent_no_1_team", ":agent_no_2_team"),
                 
                     (agent_get_position, pos1, ":agent_no_1"),
                     (agent_get_position, pos2, ":agent_no_2"),

                     (get_sq_distance_between_positions_in_meters, ":sq_dist_in_meters", pos1, pos2),

                     (le, ":sq_dist_in_meters", multi_max_sq_dist_between_agents_to_longer_mof_time),

                     (assign, ":there_are_fighting_agents", 1),
                   (try_end),   
                 (try_end),

                 (try_begin),
                   (eq, ":there_are_fighting_agents", 1),
                   (val_add, "$g_reduced_waiting_seconds", 3),
                   #(display_message, "@{!}DEBUG : there are fighting agents"),
                 (try_end),
        ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 1),
                 
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_60", "$g_multiplayer_round_max_seconds", 66),
                 (ge, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_60"),

                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_20", "$g_multiplayer_round_max_seconds", 24),
                 (le, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_20"),
                 ],
       [
         (val_add, "$g_reduced_waiting_seconds", 1),
         ]),

      (0, 0, 0, [(multiplayer_is_server),  
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag
         
           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),                 
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),                 
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),           
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),             
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),             
           (try_end),

           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team		
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),     

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),       
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),         
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up         
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),       
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),         
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up         
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),
                
      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
               (neq, ":player_no", -1), ##
               (player_is_active, ":player_no"),
               (player_get_agent_id, ":player_agent", ":player_no"),
               (ge, ":player_agent", 0),
               (agent_is_alive, ":player_agent"),
               (player_save_picked_up_items_for_next_spawn, ":player_no"),
               #(player_get_value_of_original_items, ":old_items_value", ":player_no"),
               #(player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
               #Equipment cost fix
               (assign, reg0, 0),
               (player_get_troop_id, ":player_no_troop_id", ":player_no"),
               (call_script, "script_player_get_value_of_original_items", ":player_no", ":player_agent", ":player_no_troop_id"),
               (assign, ":old_items_value", reg0),
               (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
               #Debugging 
               #(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, "@{reg0}g for your old items value added to your total gold"),
               ###
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),		   
		   (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),

           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),

           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"), 
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end
           #(get_max_players, ":num_players"),
	       #(try_for_range, ":player_no", 0, ":num_players"),
           #  (neq, ":player_no", -1), ##
           #  (player_is_active, ":player_no"),
           #  (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           #  (player_get_agent_id, ":player_agent", ":player_no"),
           #  (ge, ":player_agent", 0),
           #  (agent_is_alive, ":player_agent"),
           #  (player_save_picked_up_items_for_next_spawn, ":player_no"),
           #  #(player_get_value_of_original_items, ":old_items_value", ":player_no"),
           #  #(player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
           #  #Equipment cost fix
           #  (player_get_agent_id, ":agent_no", ":player_no"),
           #  (neq, ":agent_no", -1),
           #  #(display_message, "@Calculating value of original items!"),
           #  (player_get_troop_id, ":player_no_troop_id", ":player_no"),
           #  (call_script, "script_player_get_value_of_original_items", ":player_no", ":agent_no", ":player_no_troop_id"),
           #  (assign, ":old_items_value", reg0),
           #  (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
           #  ###
           #(try_end),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),

         (try_begin),
           (eq, "$g_battle_death_mode_started", 2),
           (call_script, "script_move_death_mode_flags_down"),
         (try_end),

         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),
         
         #initialize moveable object positions
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
                  
         (assign, "$g_round_ended", 0), 

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),         
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),    
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0), 
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),
         
               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
               #(player_control_agent, ":player_no", ":cur_agent"),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (try_begin),
          (eq, "$g_battle_death_mode_started", 2),
          (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
        (try_end),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),


    (
    "multiplayer_fd",mtf_battle_mode,-1, #fight and destroy mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),         
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_destructible_target_1", "spr_catapult_destructible"),
         (assign, "$g_destructible_target_2", "spr_trebuchet_destructible"),

         #assigning destructible object team nos to 0. (0 is also used for showing defender team in siege mode)
         (scene_prop_get_num_instances, ":num_destructible_target_1", "$g_destructible_target_1"),
         (try_for_range, ":destructible_target_1_no", 0, ":num_destructible_target_1"),
           (scene_prop_get_instance, ":destructible_target_1_id", "$g_destructible_target_1", ":destructible_target_1_no"),
           (ge, ":destructible_target_1_id", 0),
           (scene_prop_set_team, ":destructible_target_1_id", 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_destructible_target_2", "$g_destructible_target_2"),
         (try_for_range, ":destructible_target_2_no", 0, ":num_destructible_target_2"),
           (scene_prop_get_instance, ":destructible_target_2_id", "$g_destructible_target_2", ":destructible_target_2_no"),
           (ge, ":destructible_target_2_id", 0),
           (scene_prop_set_team, ":destructible_target_2_id", 0),
         (try_end),

         (try_begin),
           (scene_prop_get_num_instances, ":num_catapults", "spr_catapult_destructible"),
           (ge, ":num_catapults", 1),
           (scene_prop_get_instance, ":catapult_scene_prop_id", "spr_catapult_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":catapult_scene_prop_id"),
         (else_try),         
           (scene_prop_get_num_instances, ":num_trebuchets", "spr_trebuchet_destructible"),
           (ge, ":num_trebuchets", 1),
           (scene_prop_get_instance, ":trebuchet_scene_prop_id", "spr_trebuchet_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":trebuchet_scene_prop_id"),
         (try_end),

         (assign, "$g_number_of_targets_destroyed", 0),

         (try_begin),
           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 
         (try_end),

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
        ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
          
         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
        
             (start_presentation, "prsnt_multiplayer_destructible_targets_display"),
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),  
         (try_end),         
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),         
             (try_begin),
               (agent_is_alive, ":cur_agent"),  
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),                    
           (try_begin),         
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),                
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),
                 (else_try),
                   (eq, "$g_defender_team", 1), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #1 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #1 or -1 is winner team
                 (try_end),        
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),         
                 (else_try),
                   (eq, "$g_defender_team", 0), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #0 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #0 or -1 is winner team
                 (try_end),         
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),


               (try_begin), #destroy score (condition : remained no one)
                 (multiplayer_is_server),
                 (ge, "$g_winner_team", 0),
                 (lt, "$g_winner_team", 2),
                 (neq, "$g_winner_team", -1),

                 (team_get_score, ":team_score", "$g_winner_team"),
                 (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
                 (val_add, ":team_score", ":num_targets_remained"),

                 #for only server itself-----------------------------------------------------------------------------------------------
                 (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
                 #for only server itself-----------------------------------------------------------------------------------------------
                 (get_max_players, ":num_players"),
                 (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                   (player_is_active, ":player_no"),
                   (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
                 (try_end),
               (try_end), #destroy score end

         
               (try_begin),
                 (neq, "$g_defender_team", "$g_winner_team"),
                 (neq, "$g_winner_team", -1),
                 (assign, "$g_number_of_targets_destroyed", 2),              
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),
         
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),    
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_number_of_targets_destroyed", 2),
                 ],
       [
         (store_mission_timer_a, "$g_round_finish_time"),
         (assign, "$g_round_ended", 1),         

         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", -9),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, -9),
         (try_end),
         ]),
      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),                          
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -9),
         
         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.

         (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), 
         #for only server itself-----------------------------------------------------------------------------------------------     
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"),
         (try_end),

         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),
                         
         (try_begin), #destroy score (condition : time is up)
           (multiplayer_is_server),
           (assign, "$g_winner_team", "$g_defender_team"),         
         
           (team_get_score, ":team_score", "$g_winner_team"),
           (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
           (val_add, ":team_score", ":num_targets_remained"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
           (try_end),
         (try_end), #destroy score end        
        ]),          

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),

      (0, 0, 0, [(multiplayer_is_server),  
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag
         
           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),           
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),             
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),             
           (try_end),
	
           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team     
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),    

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),       
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),         
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up         
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),       
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),         
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up         
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),
                
      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),           
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         
         (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
         (store_mul, ":defender_money_add", ":num_targets_remained", multi_destroy_save_or_destroy_target_money_add),
         (store_mul, ":attacker_money_add", "$g_number_of_targets_destroyed", multi_destroy_save_or_destroy_target_money_add),
         (val_add, ":defender_money_add", 100), #defenders cannot get money from destroying catapult thats why they get more money per round.
         (val_sub, ":attacker_money_add", 100), #attackers also get money from destroying catapult thats why they get less money per round.
         (get_max_players, ":num_players"),

         (val_mul, ":defender_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":defender_money_add", 100),
         (val_mul, ":attacker_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":attacker_money_add", 100),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
		   (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),           
           (val_add, ":player_gold", ":per_round_gold_addition"), #standard           
           (try_begin), 
             (eq, ":player_team", "$g_defender_team"),
             (val_add, ":player_gold", ":defender_money_add"),
           (else_try), 
             (val_add, ":player_gold", ":attacker_money_add"),
           (try_end),
         
           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),
         
         (get_max_players, ":num_players"),                               
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_1, 0),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_2, 0),
         (try_end),
         
         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
                  
         (assign, "$g_round_ended", 0),

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         #initializing catapult & trebuchet positions and hit points for destroy mod.
         (call_script, "script_initialize_objects"),

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),         
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),    
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0), 
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),
         
               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 
      
      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      custom_commander_camera_mp, ## CC
      ],
  ),
#INVASION MODE START
    ###############################################
  ####################################  WAVE MODE
  ###############################################
  
  
	( 	"multiplayer_ccoop",mtf_battle_mode,-1, #captain_coop mode, aka "Invasion"
		"You lead your men to battle.",
    [
		  (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
          
		  (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
          
		  (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
          
		  (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
		  (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
          
		  (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
          
		  (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
          
		  (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
          
		  (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  
		  
		  (64,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (65,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (66,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (67,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (68,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (69,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  
		  # prison cart entry points
		  (70,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (71,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (72,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (73,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (74,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),	
          
		  # empty slots
		  (75,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (76,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (77,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (78,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (79,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  
		  # enemy wave spawn points
		  (80,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (81,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (82,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (83,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (84,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),	
		  (85,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (86,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
		  (87,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),	
	],
	
    [      
		common_battle_init_banner,

		multiplayer_server_check_polls,

		(ti_on_agent_spawn, 0, 0, [],
		[
			(store_trigger_param_1, ":agent_no"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
			##check team and multipliers to enemies after certain wave
			(agent_get_team, ":agent_team_no", ":agent_no"),
            #(try_begin),
            #  (eq, "$g_mp_coop_last_king_wave", "$g_multiplayer_ccoop_wave_no"),
            #  (store_sub, ":elite_checker", "$g_mp_coop_king_waves", 1),
            #(else_try),
            #  (assign, ":elite_checker", "$g_mp_coop_king_waves"),
            #(try_end),
			(try_begin),
                (multiplayer_is_server),
			#	(eq, ":agent_team_no", 1), # enemies
			#	(agent_set_max_hit_points, ":agent_no", 1),
			#	(agent_set_damage_modifier, ":agent_no", 1),
            #
            #(else_try),
				(eq, ":agent_team_no", 1), # enemies
                (try_begin),
                  (eq, "$g_multiplayer_ccoop_difficulty", 0),
                  (assign, ":hp_boost", 50),
                  (assign, ":dmg_boost", 50),
				  (agent_set_max_hit_points, ":agent_no", ":hp_boost"),
				  (agent_set_damage_modifier, ":agent_no", ":dmg_boost"),
                (else_try),
				  (ge, "$g_mp_coop_king_waves", 1), # wave++
				  #(neq, "$g_mp_coop_last_king_wave", "$g_multiplayer_ccoop_wave_no"), # wave++
                  (store_mul, ":hp_boost", "$g_mp_coop_king_waves", 35),
                  (val_add, ":hp_boost", 100),
                  (store_mul, ":dmg_boost", "$g_mp_coop_king_waves", 25),
                  (val_add, ":dmg_boost", 100),
				  (agent_set_max_hit_points, ":agent_no", ":hp_boost"),
				  (agent_set_damage_modifier, ":agent_no", ":dmg_boost"),
				  #(agent_set_max_hit_points, ":agent_no", 10),
				  #(agent_set_damage_modifier, ":agent_no", 10),
                (try_end),
			#(else_try),
			#	(eq, ":agent_team_no", 1), # enemies
			#	(gt, "$g_multiplayer_ccoop_wave_no", 10), # wave+
			#	(agent_set_max_hit_points, ":agent_no", 175),
			#	(agent_set_damage_modifier, ":agent_no", 150),
			(try_end),
            
            (try_begin),
              (multiplayer_is_server),
              (eq, ":agent_team_no", 0),
              (agent_is_active, ":agent_no"),
              (agent_is_alive, ":agent_no"),
              (agent_is_non_player, ":agent_no"),
              (agent_get_group, ":agent_group", ":agent_no"),
              (player_is_active, ":agent_group"),
              (agent_get_troop_id, ":troop_no", ":agent_no"),
              (try_begin),
                (troop_get_slot, ":horse_no", ":troop_no", slot_troop_coop_lord_spawned),
                (gt, ":horse_no", 0),
                (troop_add_item, ":troop_no", ":horse_no"),
              (try_end),
              (call_script, "script_cf_multiplayer_upgrade_companion_equipment", ":agent_no"),
              (troop_get_type, ":is_female", ":troop_no"),
              (try_begin),
                (eq, ":is_female", 0),
                (store_add, ":random_max", ccoop_companion_sounds_end, 20),
                (store_random_in_range, ":sound_id", ccoop_companion_sounds_start, ":random_max"),
                (lt, ":sound_id", ccoop_companion_sounds_end),
                (agent_get_position, pos60, ":agent_no"),
                (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
              (try_end),
            (try_end),

            
            (try_begin),
              (multiplayer_is_server),
              (eq, ":agent_team_no", 0),
              (agent_is_active, ":agent_no"),
              (agent_is_alive, ":agent_no"),
              (agent_is_human, ":agent_no"),
              (neg|agent_is_non_player, ":agent_no"),
              (agent_get_player_id, ":player_no", ":agent_no"),
              #(player_get_slot, ":player_spawn_status", ":player_no", slot_player_companion_ids_locked),
              (player_set_slot, ":player_no", slot_player_companion_ids_locked, 1),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_lock_companions, 1),
                
            (try_end),

		]),

		(ti_server_player_joined, 0, 0, [],
		[
			(store_trigger_param_1, ":player_no"),
			(call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
			
			# player has to wait for next round to respawn (make it -1 instead of 0 to prevent the player from spawning from prison cart this round)
			(player_set_slot, ":player_no", slot_player_first_spawn, -1),
            #(player_get_slot, ":player_spawn_status", ":player_no", slot_player_first_spawn),
            (player_set_slot, ":player_no", slot_player_companion_ids_locked, 0),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_lock_companions, 0),

			# clear squad info
			#(call_script, "script_mp_clear_squad_info", ":player_no"),
			
			(call_script, "script_multiplayer_ccoop_send_troop_data_to_client", ":player_no"),
			
			(try_begin),
				(gt, "$g_multiplayer_ccoop_game_started", 0),
				
				(try_begin),
					(le, "$g_multiplayer_ccoop_enemy_respawn_secs", 45), # if 45 secs left to respawn
					(multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_count_down_visible, "$g_multiplayer_ccoop_enemy_respawn_secs", "$g_multiplayer_ccoop_wave_no"),
				(else_try),
					(multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_count_down_invisible, "$g_multiplayer_ccoop_enemy_respawn_secs", "$g_multiplayer_ccoop_wave_no"),
				(try_end),
			(try_end),			
            
            #Frank
            (try_begin),
              (multiplayer_is_server),
              #Frank
              #Reset levels for player companions
              (try_for_range, ":cur_slot", slot_player_companion_levels_begin, slot_player_companion_levels_end),
                (player_set_slot, ":player_no", ":cur_slot", 0),
              (try_end),
              
              #Reset chest opened data
              (try_for_range, ":cur_slot", slot_player_coop_opened_chests_begin, slot_player_coop_opened_chests_end),
                (player_set_slot, ":player_no", ":cur_slot", 0),
              (try_end),
            (try_end),
		]),

		(ti_before_mission_start, 0, 0, [],
		[
			(assign, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),	
            
            
            (store_current_scene, ":cur_scene"),
            (scene_get_slot, "$g_ccoop_disallow_horses", ":cur_scene", slot_scene_ccoop_disallow_horses),
            (try_begin),
              (eq, "$g_ccoop_disallow_horses", 1),
              (try_for_range, ":cur_entry", 0, 100),
                (mission_tpl_entry_set_override_flags, "mt_multiplayer_ccoop", ":cur_entry", af_override_horse),
              (try_end),
            (else_try),
              (try_for_range, ":cur_entry", 0, 100),
                (mission_tpl_entry_set_override_flags, "mt_multiplayer_ccoop", ":cur_entry", 0),
              (try_end),
            (try_end),
            
			(call_script, "script_multiplayer_server_before_mission_start_common"),

			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags"),
		]),

		(ti_after_mission_start, 0, 0, [], 
		[
			(set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
			(set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

			(call_script, "script_initialize_all_scene_prop_slots"),         
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			
            (store_random_in_range, "$g_presentation_obj_coop_companion_0", multiplayer_coop_companion_equipment_sets_begin, multiplayer_coop_companion_first_equipment_sets_end),
            (store_random_in_range, "$g_presentation_obj_coop_companion_1", multiplayer_coop_companion_equipment_sets_begin, multiplayer_coop_companion_first_equipment_sets_end),
            (try_begin),
              (eq, "$g_presentation_obj_coop_companion_1", "$g_presentation_obj_coop_companion_0"),
              (val_add, "$g_presentation_obj_coop_companion_1", 1),
            (try_end),
            (try_begin),
              (ge, "$g_presentation_obj_coop_companion_1", multiplayer_coop_companion_first_equipment_sets_end),
              (assign, "$g_presentation_obj_coop_companion_1", multiplayer_coop_companion_equipment_sets_begin),
            (try_end),
            
            (store_sub, ":value", "$g_presentation_obj_coop_companion_0", multiplayer_coop_companion_equipment_sets_begin),
            (val_add, ":value", multiplayer_coop_companion_equipment_sets_begin),
            #(val_add, ":value", 1),
            (assign, "$g_presentation_obj_coop_companion_class_0", ":value"),
            
            (store_sub, ":value", "$g_presentation_obj_coop_companion_1", multiplayer_coop_companion_equipment_sets_begin),
            (val_add, ":value", multiplayer_coop_companion_equipment_sets_begin),
            #(val_add, ":value", 1),
            (assign, "$g_presentation_obj_coop_companion_class_1", ":value"),
            
            (try_for_range, ":cur_troop", lords_begin, lords_end),
              (troop_set_slot, ":cur_troop", slot_troop_coop_lord_spawned, 0),
            (try_end),

            (try_for_range, ":cur_troop", quick_battle_troops_begin, quick_battle_troops_end),
              (troop_set_slot, ":cur_troop", slot_troop_coop_lord_spawned, 0),
            (try_end),

            (assign, "$g_mp_coop_lord_waves", 0),
            (assign, "$g_mp_coop_king_waves", 0),
            (assign, "$g_mp_coop_last_king_wave", 0),

            
            #Frank
            (try_begin),
              (multiplayer_is_server),
			  (get_max_players, ":max_players"),
			  (try_for_range, ":cur_player", 0, ":max_players"),
			  	(player_is_active, ":cur_player"),
                  #Frank
                  #Reset levels for player companions
                  (try_for_range, ":cur_slot", slot_player_companion_levels_begin, slot_player_companion_levels_end),
                    (player_set_slot, ":cur_player", ":cur_slot", 0),
                    (multiplayer_send_3_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_events_change_companion_level, ":cur_slot", 0),
                  (try_end),
                  
                  #Reset chest opened data
                  (try_for_range, ":cur_slot", slot_player_coop_opened_chests_begin, slot_player_coop_opened_chests_end),
                    (player_set_slot, ":cur_player", ":cur_slot", 0),
                  (try_end),
		      (try_end),
            (try_end),
            

            
			(try_begin),
				(multiplayer_is_server),

				#(assign, "$g_multiplayer_ccoop_enemy_respawn_secs", multi_captain_coop_round_duration_in_sec), #count down time: 10mins
				(assign, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 0),
				(assign, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 0),
				(assign, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots", -1),
                
			(try_end),
			
			(assign, "$g_multiplayer_ccoop_wave_no", 0),
			(assign, "$g_multiplayer_ccoop_game_started", 0),
			(assign, "$g_multiplayer_ccoop_enable_count_down", 0),
			(assign, "$g_multiplayer_ccoop_change_map", 0),
			(assign, "$g_round_ended", 0),

			# destroy prison cart (since it is invisible when mission starts)
			(call_script, "script_multiplayer_ccoop_destroy_prison_cart"),
            
            (get_max_players, ":max_players"),
            (try_for_range, ":cur_player", 0, ":max_players"),
                (player_is_active, ":cur_player"),
                (player_set_slot, ":cur_player", slot_player_companion_ids_locked, 0),
                (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_lock_companions, 0),
			(try_end),
                
           
		]),

		(ti_on_multiplayer_mission_end, 0, 0, [],
		[
			# disable count down
			(assign, "$g_multiplayer_ccoop_enable_count_down", 0),
			(assign, "$g_multiplayer_ccoop_enemy_respawn_secs", 100000),
			(assign, "$g_multiplayer_ccoop_game_started", 0),
			
			
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),			
		]),
		
		(ti_on_player_exit, 0, 0, [],
		[
			# force kill all squad agents of the exiting player
			(store_trigger_param_1, ":exiting_player_no"),
			(call_script, "script_cf_multiplayer_event_team_change", ":exiting_player_no"),
		]),

		(ti_on_agent_killed_or_wounded, 0, 0, [],
		[
			(store_trigger_param_1, ":dead_agent_no"), 
			(store_trigger_param_2, ":killer_agent_no"), 
            
            
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
			
			(agent_get_team, ":dead_agent_team", ":dead_agent_no"),			
            
            #Frank 
            #level down dead companions                    
            (try_begin),
              (multiplayer_is_server),
              (agent_is_non_player, ":dead_agent_no"),
              (agent_get_group, ":dead_agent_group", ":dead_agent_no"),
              (player_is_active, ":dead_agent_group"),
              (agent_get_troop_id, ":dead_agent_troop", ":dead_agent_no"),
              
              (try_for_range, ":cur_slot", slot_player_companion_ids_begin, slot_player_companion_ids_end),
                (player_get_slot, ":companion_no", ":dead_agent_group", ":cur_slot"),
                (eq, ":dead_agent_troop", ":companion_no"),
                (val_sub, ":cur_slot", slot_player_companion_ids_begin),
                (val_add, ":cur_slot", slot_player_companion_levels_begin),
                (player_get_slot, ":companion_level", ":dead_agent_group", ":cur_slot"),
                (val_sub, ":companion_level", 1),
                (val_max, ":companion_level", 0),
                (player_set_slot, ":dead_agent_group", ":cur_slot", ":companion_level"),
                (multiplayer_send_3_int_to_player, ":dead_agent_group", multiplayer_event_other_events, multiplayer_event_other_events_change_companion_level, ":cur_slot", ":companion_level"),
                #(call_script, "script_multiplayer_upgrade_companion_equipment", ":cur_agent"),
              (try_end),
            (try_end),
            
            (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),       
            (try_begin),
              (neq, ":dead_agent_troop_no", -1),
              (eq, ":dead_agent_troop_no", "$g_ccoop_king_troop"),
              (assign, "$g_mp_coop_last_king_wave", "$g_multiplayer_ccoop_wave_no"),
              (val_add, "$g_mp_coop_king_waves", 1),
            (try_end),
            
            (try_begin),
              (multiplayer_is_server),
              
              (try_begin),
                (try_begin),
                  (eq, ":dead_agent_team", 1),
                  (store_random_in_range, ":random", 0, 15),
                (else_try),
                  (assign, ":random", 0),
                (try_end),
                (this_or_next|eq, ":random", 14),
                (this_or_next|is_between, ":dead_agent_troop_no", lords_begin, lords_end),
                (this_or_next|is_between, ":dead_agent_troop_no", kings_begin, kings_end),
                (is_between, ":dead_agent_troop_no", quick_battle_troops_begin, quick_battle_troops_end),
                (agent_get_position, pos0, ":dead_agent_no"),
                #(position_move_z, pos0, -15),
                (set_spawn_position, pos0),
                (spawn_scene_prop, "spr_multiplayer_coop_item_drop"),
                #(display_message, "@{reg0}"),
                
                (scene_prop_get_instance, ":prison_cart_instance", "spr_prison_cart", 0),
                
                (assign, ":overwrite", 1),
                (try_for_range, ":cur_slot", scene_prop_ccoop_item_drop_start, scene_prop_ccoop_item_drop_end),
                  (eq, ":overwrite", 1),
                  (scene_prop_get_slot, ":cur_instance", ":prison_cart_instance", ":cur_slot"),
                  (eq, ":cur_instance", 0),
                  (scene_prop_set_slot, ":prison_cart_instance", ":cur_slot", reg0),
                  (assign, ":overwrite", 0),
                (try_end),
                (try_begin),
                  (eq, ":overwrite", 1),
                  (scene_prop_get_slot, ":culled_instance", ":prison_cart_instance", scene_prop_ccoop_item_drop_start),
                  (prop_instance_get_position, pos1, ":culled_instance"),
                  (position_move_z, pos1, -2000), 
                  (prop_instance_set_position, ":culled_instance", pos1),
                  (try_for_range, ":cur_slot", scene_prop_ccoop_item_drop_start, scene_prop_ccoop_item_drop_end),
                    (store_add, ":cur_slot_plus_one", ":cur_slot", 1),
                    (try_begin),
                      (eq, ":cur_slot_plus_one", scene_prop_ccoop_item_drop_end),
                      (assign, ":overwriting_instance", reg0),
                    (else_try),
                      (scene_prop_get_slot, ":overwriting_instance", ":prison_cart_instance", ":cur_slot_plus_one"),
                    (try_end),
                    (scene_prop_set_slot, ":prison_cart_instance", ":cur_slot", ":overwriting_instance"),
                  (try_end),
                  (get_max_players, ":max_players"),
                  (try_for_range, ":cur_player", 0, ":max_players"),
                    (player_is_active, ":cur_player"),
                    (try_for_range, ":cur_slot", slot_player_coop_opened_chests_begin, slot_player_coop_opened_chests_end),
                      (player_slot_eq, ":cur_player", ":cur_slot", ":culled_instance"),
                      (player_set_slot, ":cur_player", ":cur_slot", 0),
                      (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_coop_chest_opened, ":cur_slot", 0),
                    (try_end),
                  (try_end),
                (try_end),
                  
                #(prop_instance_set_position, reg0, pos0),
              (try_end),
            (try_end),
			
			#add 1 score points to killer agent's team.
			(try_begin),
				(ge, ":killer_agent_no", 0),
				(agent_is_human, ":dead_agent_no"),
				(agent_is_human, ":killer_agent_no"),
				(agent_get_team, ":killer_agent_team", ":killer_agent_no"),
				(le, ":killer_agent_team", 1), #0 or 1 is ok
				(team_get_score, ":team_score", ":killer_agent_team"),
				(neq, ":killer_agent_team", ":dead_agent_team"),
				(val_add, ":team_score", 1),
				(team_set_score, ":killer_agent_team", ":team_score"),
			(try_end),
			 
			# if dead agent is in wave team
			(try_begin),
				(multiplayer_is_server),				
				(eq, ":dead_agent_team", 1),  # enemy (wave) side
				
				#(call_script, "script_multiplayer_ccoop_check_reinforcement"),
				
                
                
                (assign, ":has_agents", 0),
                (try_for_agents, ":cur_agent"),
                    (try_begin),
                        (agent_is_human, ":cur_agent"),
                        (agent_is_alive, ":cur_agent"),
                        (agent_get_team, ":cur_agent_team", ":cur_agent"),
                        (eq, ":cur_agent_team", 1),
                        (val_add, ":has_agents", 1),
                    (try_end),
                    (gt, ":has_agents", 0), # break
                (try_end),				
                
                (eq, ":has_agents", 0), # if all enemies are dead
				
                (try_begin),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
                    (agent_is_human, ":dead_agent_no"),
                    (play_sound, "snd_team_scored_a_point"), # play victory sound
                (try_end),				
			    
                
                (try_begin),
                    (neq, "$g_multiplayer_ccoop_difficulty", 2),
                    (eq, "$g_multiplayer_ccoop_wave_no", "$g_mp_coop_last_king_wave"),
                    (assign, "$g_multiplayer_ccoop_change_map", 10),
                    (set_cheer_at_no_enemy, 1),
                    (get_max_players, ":max_players"),
                    (team_get_faction, ":wave_faction", 1),
                    (str_store_faction_name, s0, ":wave_faction"),
                    (store_add, ":difficulty_string_i", "str_ccoop_easy", "$g_multiplayer_ccoop_difficulty"),
                    (str_store_string, s1, ":difficulty_string_i"),
                    (try_begin),
                      (is_between, ":wave_faction", kingdoms_begin, kingdoms_end),
                      (assign, reg1, 0),
                    (else_try),
                      (assign, reg1, 1),
                    (try_end),
                    
                    (str_store_string, s2, "str_ccoop_s0_enemy_defeated_s1"),
                    
                    (try_for_range, ":cur_player", 0, ":max_players"),
                      (player_is_active, ":cur_player"),
                      (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_ccoop_victory_message, ":difficulty_string_i"),
                    (try_end),
                (else_try),
				
                    # round cleared
                    (assign, "$g_multiplayer_ccoop_enemy_respawn_secs", 32), # set 32 secs left for next wave
                    
                    # refill everyone's health (for refilling players' and squad members' health)
                    (try_for_agents, ":cur_agent"),
                        (agent_is_alive, ":cur_agent"),
                        (agent_is_human, ":cur_agent"),
                        
                        # refill agent heath and ammo
                        (agent_set_hit_points, ":cur_agent", 100),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
                        (agent_refill_wielded_shield_hit_points, ":cur_agent"),
                        (agent_refill_ammo, ":cur_agent"),
                        
                        #Frank 
                        #level up living companions                    
                        (try_begin),
                          (agent_is_non_player, ":cur_agent"),
                          (agent_get_group, ":cur_agent_group", ":cur_agent"),
                          (gt, ":cur_agent_group", -1),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
                          (player_is_active, ":cur_agent_group"),
                          (agent_get_troop_id, ":cur_troop", ":cur_agent"),
                          
                          (try_for_range, ":cur_slot", slot_player_companion_ids_begin, slot_player_companion_ids_end),
                              (player_get_slot, ":companion_no", ":cur_agent_group", ":cur_slot"),
                              (eq, ":cur_troop", ":companion_no"),
                              (val_sub, ":cur_slot", slot_player_companion_ids_begin),
                              (val_add, ":cur_slot", slot_player_companion_levels_begin),
                              (player_get_slot, ":companion_level", ":cur_agent_group", ":cur_slot"),
                              (val_add, ":companion_level", 1),
                              (val_min, ":companion_level", 3),
                              (player_set_slot, ":cur_agent_group", ":cur_slot", ":companion_level"),
                              #(assign, reg0, ":cur_agent_group"),
                              #(assign, reg1, ":cur_slot"),
                              #(assign, reg2, ":companion_level"),
                              #(display_message, "@levelling up companion of player: {reg0}  slot: {reg1}  level: {reg2}"),
                              (multiplayer_send_3_int_to_player, ":cur_agent_group", multiplayer_event_other_events, multiplayer_event_other_events_change_companion_level, ":cur_slot", ":companion_level"),
                              (call_script, "script_cf_multiplayer_upgrade_companion_equipment", ":cur_agent"),
                          (try_end),
                        (try_end),
                        
                        
                        
                        (try_begin),
                            # if agent has a horse
                            (agent_get_horse, ":horse_agent", ":cur_agent"), 
                            (gt, ":horse_agent", -1), 
                            (agent_is_alive, ":horse_agent"),
                            # refill horse health
                            (agent_set_hit_points, ":horse_agent", 100),
                        #(else_try),
                            # if player's horse is dead, we cannot respawn the horse due to restrictions in the engine
                        (try_end),
                        
                        
                        
                    (try_end),
                    (try_begin),
                        (eq, "$g_multiplayer_ccoop_difficulty", 2),
                        (eq, "$g_multiplayer_ccoop_wave_no", "$g_mp_coop_last_king_wave"),
                        (val_add, "$g_multiplayer_ccoop_enemy_respawn_secs", 10),
                        (get_max_players, ":max_players"),
                        (team_get_faction, ":wave_faction", 1),
                        (str_store_faction_name, s0, ":wave_faction"),
                        (assign, reg0, "$g_mp_coop_king_waves"),
                        (try_begin),
                          (is_between, ":wave_faction", kingdoms_begin, kingdoms_end),
                          (assign, reg1, 0),
                        (else_try),
                          (assign, reg1, 1),
                        (try_end),
                        (str_store_string, s2, "str_ccoop_s0_enemy_defeated_endless_reg0"),
                        
                        (try_for_range, ":cur_player", 0, ":max_players"),
                          (player_is_active, ":cur_player"),
                          (multiplayer_send_string_to_player, ":cur_player", multiplayer_event_ccoop_victory_message, -1),
                        (try_end),
                    (try_end),
                (try_end),
				
			(else_try),				
				(multiplayer_is_server),
				(eq, ":dead_agent_team", 0),  # players side
				
				#(display_debug_message, "@{!}dead agent is on our team!"),
				
				(assign, ":has_agents", 0),
				(try_for_agents, ":cur_agent"),
					(try_begin),
						(agent_is_human, ":cur_agent"),
						(agent_is_alive, ":cur_agent"),
						(agent_get_team, ":cur_agent_team", ":cur_agent"),
						(eq, ":cur_agent_team", 0),
						(val_add, ":has_agents", 1),						
					(try_end),
					(gt, ":has_agents", 0), #break
				(try_end),
				
				(eq, ":has_agents", 0),  # no player and bots left alive		

				
				(assign, "$g_multiplayer_ccoop_change_map", 5), #5 secs
                (set_cheer_at_no_enemy, 1),
				
			(else_try),	
				(neg|multiplayer_is_server), # client side
				
				(eq, ":dead_agent_team", 1),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
                (agent_is_human, ":dead_agent_no"),  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
                  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
				(assign, ":has_agents", 0),
				(try_for_agents, ":cur_agent"),
					(try_begin),
						(agent_is_human, ":cur_agent"),
						(agent_is_alive, ":cur_agent"),
						(agent_get_team, ":cur_agent_team", ":cur_agent"),
						(eq, ":cur_agent_team", 1),
						(val_add, ":has_agents", 1),
					(try_end),
					(gt, ":has_agents", 0), # break
				(try_end),				
				
				(eq, ":has_agents", 0), # if all enemies are dead
				
                (play_sound, "snd_team_scored_a_point"), # play victory sound  ## NMCml NativeFix: 1.171: 0x0A(LF)->0x0D0A(CR+LF)
				
			(try_end),
		]),
		 
		# one time execute
		(0, 0, ti_once, [],
		[
			(set_cheer_at_no_enemy, 0), # no cheer after all enemies are dead
		]),

		# if count down is enabled
		(1, 0, 0, [(gt, "$g_multiplayer_ccoop_enable_count_down", 0)],
		[
			(try_begin),
				(gt, "$g_multiplayer_ccoop_change_map", 0),
				
				(try_begin),
					(eq, "$g_multiplayer_ccoop_change_map", 4),
					(call_script, "script_multiplayer_ccoop_destroy_prison_cart"),
				(try_end),
				
				(val_sub, "$g_multiplayer_ccoop_change_map", 1),
				(eq, "$g_multiplayer_ccoop_change_map", 0),				
				(assign, "$g_multiplayer_ccoop_enable_count_down", 0),
				(assign, "$g_round_ended", 1),
                
                # #Frank
				#(get_max_players, ":max_players"),
				#(try_for_range, ":cur_player", 0, ":max_players"),
				#	(player_is_active, ":cur_player"),
                #    #Frank
                #    #Reset levels for player companions
                #    (try_for_range, ":cur_slot", slot_player_companion_levels_begin, slot_player_companion_levels_end),
                #      (assign, reg0, ":cur_slot"),
                #      (display_message, "@cleaning slot {reg0}"),
                #      (player_set_slot, ":cur_player", ":cur_slot", 0),
                #    (try_end),
                #    
                #    #Reset chest opened data
                #    (try_for_range, ":cur_slot", slot_player_coop_opened_chests_begin, slot_player_coop_opened_chests_end),
                #      (player_set_slot, ":cur_player", ":cur_slot", 0),
                #    (try_end),
			    #(try_end),
                
			(else_try),
				(gt, "$g_multiplayer_ccoop_enemy_respawn_secs", 0),
				(val_sub, "$g_multiplayer_ccoop_enemy_respawn_secs", 1),

				(try_begin),
					(gt, "$g_multiplayer_ccoop_enemy_respawn_secs", 59),
					(store_mod, ":mod", "$g_multiplayer_ccoop_enemy_respawn_secs", 60),
					(eq, ":mod", 0),
					(store_div, reg0, "$g_multiplayer_ccoop_enemy_respawn_secs", 60),
					(neg|multiplayer_is_dedicated_server),
					(display_message, "str_next_wave_in_reg0_mins", 0xFFDE6300),
				(try_end),
				
				(try_begin),
					(eq, "$g_multiplayer_ccoop_enemy_respawn_secs", 30), #if 30secs left to next wave
					(multiplayer_is_server),

					# give round bonus gold at the start of each wave (whether the previous wave is cleared or it is timed out)
					(call_script, "script_multiplayer_ccoop_give_round_bonus_gold"),
					
					(val_add, "$g_multiplayer_ccoop_wave_no", 1), # increment wave no

					#(try_begin),
					#	(eq, "$g_multiplayer_ccoop_wave_no", 31),
					#	# game end win condition
					#	# initiate round end/change map duration
					#	(assign, "$g_multiplayer_ccoop_change_map", 5), #5 secs
                    #    (set_cheer_at_no_enemy, 1),
					#(try_end),
					
					# destroy prison cart (since current wave is timed out and next wave is coming in 30 seconds) or
					# destroy prison cart (since round is cleared and everyone will respawn automatically)
					(call_script, "script_multiplayer_ccoop_destroy_prison_cart"),
					
					# respawn all dead players (with some delay)
					(call_script, "script_multiplayer_ccoop_start_player_and_squad_respawn_period", 1),
										
					# sync clients count down counter
					(get_max_players, ":max_players"),
					(store_sub, ":respawn_secs", "$g_multiplayer_ccoop_enemy_respawn_secs", 1), # send to clients as 1 sec decreased					
					(try_for_range, ":cur_player", 1, ":max_players"),						
						(player_is_active, ":cur_player"),
						(multiplayer_send_3_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_count_down_visible, ":respawn_secs", "$g_multiplayer_ccoop_wave_no"),
					(try_end),
					
					(call_script, "script_multiplayer_ccoop_prepare_spawn_wave"),
					
					(store_mission_timer_a, "$g_multiplayer_ccoop_next_wave_start_time"),
					(val_add, "$g_multiplayer_ccoop_next_wave_start_time", "$g_multiplayer_ccoop_enemy_respawn_secs"),
					(start_presentation, "prsnt_multiplayer_ccoop_next_wave_time_counter"),
					(start_presentation, "prsnt_multiplayer_flag_projection_display_ccoop_wave"),
				(else_try),
					(lt, "$g_multiplayer_ccoop_enemy_respawn_secs", 1),
					(multiplayer_is_server),
					
					# generate count down
					(call_script, "script_multiplayer_ccoop_calculate_round_duration"),
					
					# spawn wave
					(call_script, "script_multiplayer_ccoop_spawn_wave", 1000),
				(try_end),
				
			(try_end),
		]),
				
		# prison cart and player&bot spawn management
		(1, 0, 0, [(multiplayer_is_server),],		
		[
			(get_max_players, ":max_players"),
			
			# prison cart management
			(try_begin),
				# if move underground is initiated
				(gt, "$g_multiplayer_ccoop_move_prison_cart", 0),  
					
				(store_mission_timer_a, ":current_time"),
				(store_sub, ":time_left", "$g_multiplayer_ccoop_move_prison_cart", ":current_time"),
				
				(try_begin),
					(le, ":time_left", 0),
					
					(display_debug_message, "@{!}sending prisoner cart 6 feet underground!"),
					
					(set_fixed_point_multiplier, 100), 
					
					(scene_prop_get_instance, ":prison_cart", "spr_prison_cart", 0),
					(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
					(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
					
					(prop_instance_get_position, pos1, ":prison_cart"),
					(position_set_z, pos1, -4000), #40m down
					(prop_instance_set_position, ":prison_cart", pos1),	
					(prop_instance_set_position, ":prison_cart_door_left", pos1),
					(prop_instance_set_position, ":prison_cart_door_right", pos1),
					
					(assign, "$g_multiplayer_ccoop_move_prison_cart", 0),
				(try_end),
			
			(else_try),
				(gt, "$g_prison_cart_point", 0), # if visible				
				
				(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
				(scene_prop_get_hit_points, ":left_door", ":prison_cart_door_left"),
				
				(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
				(scene_prop_get_hit_points, ":right_door", ":prison_cart_door_right"),
					
				(try_begin),
					(this_or_next|lt, ":left_door", 1),  # left door's broken
					(lt, ":right_door", 1),  # right door's broken
										
					# destroy prison cart (since doors are cracked)
					(call_script, "script_multiplayer_ccoop_destroy_prison_cart"),
					
					# respawn all dead players (with some delay)
					(call_script, "script_multiplayer_ccoop_start_player_and_squad_respawn_period", 0),
					
				(try_end),
				
				# check if prison cart is spawned and there is no dead player (may occur if dead players quit the game or change their faction to spectator)
				(assign, ":is_anyone_dead", 0),
				(try_for_range, ":cur_player", 0, ":max_players"),
					(eq, ":is_anyone_dead", 0),
					(player_is_active, ":cur_player"),
					(player_get_team_no, ":player_team", ":cur_player"),
					(eq, ":player_team", 0),
					(player_get_agent_id, ":player_agent", ":cur_player"),
					(try_begin),
						(ge, ":player_agent", 0),
						(try_begin),
							(neg|agent_is_alive, ":player_agent"),
							(assign, ":is_anyone_dead", 1),
						(try_end),
					(else_try),
						(assign, ":is_anyone_dead", 1),
					(end_try),
				(try_end),
				(try_begin),
					(eq, ":is_anyone_dead", 0),
					# destroy prison cart (since there is no dead player left in the game)
					(call_script, "script_multiplayer_ccoop_destroy_prison_cart"),
				(try_end),
				
			(else_try),
			
				# if prison cart is not spawned and there is a dead player, then spawn the prison cart
				(assign, ":is_anyone_dead", 0),
				(try_for_range, ":cur_player", 0, ":max_players"),
					(eq, ":is_anyone_dead", 0),				
					(player_is_active, ":cur_player"),
					(player_get_team_no, ":player_team", ":cur_player"),
					(eq, ":player_team", 0),
					(player_get_agent_id, ":player_agent", ":cur_player"),
					(ge, ":player_agent", 0),
					(neg|agent_is_alive, ":player_agent"),
					(assign, ":is_anyone_dead", 1),
				(try_end),
				(try_begin),
					(eq, ":is_anyone_dead", 1),
					(eq, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots", 1), # if cart is not spawned before in this round, otherwise that value would be 0
					# spawn prison cart with 5 second delay
					(le, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 0), # if not in player spawn period
					(eq, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 0), # if not in prison cart spawn period
					(assign, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 5),
					(display_debug_message, "@{!}spawn prison cart 5 secs initiated!"),
				(try_end),
				
				(try_begin),
					(gt, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 0),
					(val_sub, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 1),
					(display_debug_message, "@{!}spawn prison cart!"),
					(try_begin),
						(eq, "$g_multiplayer_ccoop_spawn_prison_cart_counter", 0),
						(call_script, "script_multiplayer_ccoop_spawn_prison_cart"),
					(try_end),
				(try_end),
				
			(try_end),
			
			# player&bot spawn management
			(try_begin),
				(multiplayer_is_server),
				(gt, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 0),
				(val_sub, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 1),
				(try_begin),
					(lt, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 25),
					
					# respawn all dead players
					(get_max_players, ":max_players"),
					(try_for_range, ":cur_player", 0, ":max_players"),
						(player_is_active, ":cur_player"),
						(player_get_team_no, ":player_team", ":cur_player"), # if player is not spectator
						(lt, ":player_team", multi_team_spectator),
						(player_get_agent_id, ":player_agent", ":cur_player"),
						
						(try_begin),
							(this_or_next|lt, ":player_agent", 0), #if not spawned or
							(neg|agent_is_alive, ":player_agent"), #if agent is dead
							
							(try_begin),
								# if first spawn this round
								(player_get_slot, ":player_first_spawn", ":cur_player", slot_player_first_spawn),
								(eq, ":player_first_spawn", 1),
                                
								
								(call_script, "script_multiplayer_ccoop_spawn_player_and_bots", ":cur_player"),
								
								# if spawned
								(try_begin),
									(eq, reg0, 1),
									(player_set_slot, ":cur_player", slot_player_first_spawn, 0),
								(try_end),
								
							(try_end),
							
						(else_try),
							(assign, reg0, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots"),
							(display_debug_message, "@{!}g_multiplayer_ccoop_spawn_alive_player_squad: {reg0}"),
						
							(eq, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots", 1),
							(neg|player_is_busy_with_menus, ":cur_player"), # if player is not busy with menus
							(player_get_troop_id, ":player_troop", ":cur_player"), # if troop is not selected do not spawn his bots	
							(ge, ":player_troop", 0),
							
							# buy squads of alive player
							(call_script, "script_multiplayer_spawn_player_bot_squad_at_point", ":cur_player", 0, reg0),
							(call_script, "script_multiplayer_upgrade_player_equipment", ":cur_player"),
                            (try_for_agents, ":cur_agent"),
                              (agent_is_active, ":cur_agent"),
                              (agent_is_alive, ":cur_agent"),
                              (agent_is_non_player, ":cur_agent"),
                              (agent_get_group, ":cur_agent_group", ":cur_agent"),
                              (eq, ":cur_agent_group", ":cur_player"),
							  (call_script, "script_cf_multiplayer_upgrade_companion_equipment", ":cur_agent"),
                            (try_end),
							#(call_script, "script_multiplayer_get_spawn_point_close_to_bots", ":cur_player"),
							(call_script, "script_multiplayer_get_spawn_point_close_to_player", ":cur_player"),
						(try_end),
						
						
					(try_end),
					
					
					
				(try_end),
				
			(try_end),
		]),

				
		# first spawn
		(1, 0, 0, 
		[			
			(eq, "$g_multiplayer_ccoop_game_started", 0),
			(multiplayer_is_server),
		],
		
		[			
			(assign, ":any_player_spawned", 0),
			
			(get_max_players, ":num_players"),
			(try_for_range, ":player_no", 0, ":num_players"),
				(player_is_active, ":player_no"),
				
				(call_script, "script_multiplayer_ccoop_spawn_player_and_bots", ":player_no"),
                

				
				(try_begin),
					(eq, ":any_player_spawned", 0),
					(gt, reg0, 0),
					(assign, ":any_player_spawned", 1),
				(try_end),
			(try_end),
			
			(try_begin),
				(ge, ":any_player_spawned", 1),
                
			
				#(display_debug_message, "@{!}first spawn" ),
				(assign, "$g_multiplayer_ccoop_game_started", 1),
				
				(assign, "$g_multiplayer_ccoop_enemy_respawn_secs", 31), # set 31 secs left for next wave
				(assign, "$g_multiplayer_ccoop_enable_count_down", 1), # enable count down
				
				(call_script, "script_multiplayer_ccoop_start_player_and_squad_respawn_period", 1),
			(try_end),
		]),
    
		multiplayer_server_check_end_map,

		(ti_tab_pressed, 0, 0, [],
		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
			(try_end),
		]),

		multiplayer_once_at_the_first_frame,
		#multiplayer_battle_window_opened,
		(ti_battle_window_opened, 0, 0, [], [
			#(start_presentation, "prsnt_multiplayer_round_time_counter"),
			#(start_presentation, "prsnt_multiplayer_team_score_display"),
			(start_presentation, "prsnt_multiplayer_flag_projection_display_ccoop"),
			(start_presentation, "prsnt_multiplayer_flag_projection_display_ccoop_wave"),
			(start_presentation, "prsnt_multiplayer_ccoop_next_wave_time_counter"),
        ]),

		(ti_escape_pressed, 0, 0, [],
		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu"),
		]),
        
		(ti_on_agent_hit, 0, 0, [(multiplayer_is_server),],
		[
            (multiplayer_is_server),
            
            (store_trigger_param_1, ":agent_no"),
            (store_trigger_param_2, ":attacker_no"),
            (store_trigger_param_3, ":damage"),
                        
            (agent_get_troop_id, ":attacker_troop_id", ":agent_no"),
            (try_begin),
              (this_or_next|is_between, ":attacker_troop_id", lords_begin, lords_end),
              (is_between, ":attacker_troop_id", kings_begin, kings_end),
              (store_random_in_range, ":random", 0, 10),
              (try_begin),
                (eq, ":random", 0),
                (agent_get_position, pos60, ":attacker_no"),
                (call_script, "script_multiplayer_server_play_sound_at_position", ccoop_noble_sounds_start),
              (try_end),
            (else_try),
              (is_between, ":attacker_troop_id", multiplayer_coop_companion_equipment_sets_begin, multiplayer_coop_companion_first_equipment_sets_end),
              (store_random_in_range, ":random", 0, 30),
              (try_begin),
                (eq, ":random", 0),
                (agent_get_position, pos60, ":attacker_no"),
                (store_random_in_range, ":sound_id", ccoop_companion_sounds_start, ccoop_companion_sounds_end),
                (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
              (try_end),
            (else_try),
              (this_or_next|eq, ":attacker_troop_id", "trp_sea_raider"),
              (eq, ":attacker_troop_id", "trp_sea_raider_leader"),
              (store_random_in_range, ":random", 0, 30),
              (try_begin),
                (eq, ":random", 0),
                (agent_get_position, pos60, ":attacker_no"),
                (store_random_in_range, ":sound_id", ccoop_sea_raider_sounds_start, ccoop_sea_raider_sounds_end),
                (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
              (try_end),
            (else_try),
              (eq, ":attacker_troop_id", "trp_looter"),
              (store_random_in_range, ":random", 0, 20),
              (try_begin),
                (eq, ":random", 0),
                (agent_get_position, pos60, ":attacker_no"),
                (store_random_in_range, ":sound_id", ccoop_looter_sounds_start, ccoop_looter_sounds_end),
                (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
              (try_end),
            (else_try),
              (is_between, ":attacker_troop_id", bandits_begin, bandits_end),
              (store_random_in_range, ":random", 0, 60),
              (try_begin),
                (eq, ":random", 0),
                (agent_get_position, pos60, ":attacker_no"),
                (store_random_in_range, ":sound_id", ccoop_bandit_sounds_start, ccoop_bandit_sounds_end),
                (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
              (try_end),
            (try_end),
        
			(try_begin),
              (eq, reg0, "itm_knockdown_mace"),
              (agent_is_human, ":agent_no"),
              (agent_get_horse, ":horse", ":agent_no"),
              (le, ":horse", -1),
              (agent_set_animation, ":agent_no", "anim_strike_fall_back_rise"),
            (else_try),
              (eq, reg0, "itm_blood_drain_throwing_knives"),
              (store_agent_hit_points, ":agent_health", ":attacker_no", 1),
              (val_add, ":agent_health", ":damage"),
              (agent_set_hit_points, ":attacker_no", ":agent_health", 1),
              (store_agent_hit_points, ":agent_health", ":attacker_no", 0),
              (ge, ":agent_health", 100),
              (agent_set_hit_points, ":attacker_no", ":agent_health", 100),
            (else_try),
              (eq, reg0, "itm_instakill_knife"),
              #(store_trigger_param_2, ":attacker_no"),
              #(store_agent_hit_points, ":agent_health", ":agent_no", 1),
              (agent_set_hit_points, ":agent_no", 0),
            (else_try),
              (eq, reg0, "itm_backstabber"),
              (try_begin),
                (agent_get_action_dir, ":attacker_action_dir", ":attacker_no"),
                (eq, ":attacker_action_dir", 0),
                (agent_get_position, pos0, ":agent_no"),
                (agent_get_position, pos1, ":attacker_no"),
                (position_is_behind_position, pos1, pos0),
                #(store_agent_hit_points, ":agent_health", ":agent_no", 1),
                (agent_set_hit_points, ":agent_no", 0),
              (try_end),
            (else_try),
              (eq, reg0, "itm_disarming_throwing_axe"),
              (try_begin),
                (agent_is_human, ":agent_no"),
                (try_for_range, ":hand_no", 0, 2),
                  (agent_get_wielded_item, ":item_no", ":agent_no", ":hand_no"),
                  (neq, ":item_no", -1),
                  (agent_unequip_item, ":agent_no", ":item_no"),
                  (agent_get_position, pos0, ":agent_no"),
                  (set_spawn_position, pos0),
                  (spawn_item, ":item_no"),
                (try_end),
              (try_end),
            (else_try),
              (eq, reg0, -1),
              (try_begin),
                (agent_is_human, ":attacker_no"),
                (agent_is_human, ":agent_no"),
                (agent_get_item_slot, ":agent_boots", ":attacker_no", 6),
                (eq, ":agent_boots", "itm_kicking_boots"),
                (store_agent_hit_points, ":agent_health", ":agent_no", 1),
                (assign, reg2, ":agent_health"),
                (val_max, ":damage", 2),
                (val_mul, ":damage", 6),
                (val_sub, ":agent_health", ":damage"),
                (val_max, ":agent_health", 0),
                (agent_set_hit_points, ":agent_no", ":agent_health", 1),
                (agent_get_item_id, ":horse", ":agent_no"),
                (eq, ":horse", -1),
                (agent_set_animation, ":agent_no", "anim_strike_fall_back_rise"),
              (try_end),
            (else_try),
              (eq, reg0, "itm_doom_javelins"),
              (agent_get_slot, ":num_doom_javs", ":agent_no", slot_agent_doom_javelin_count),
              (val_add, ":num_doom_javs", 1),
              (agent_set_slot, ":agent_no", slot_agent_doom_javelin_count, ":num_doom_javs"),
              #(agent_get_player_id, ":player_no", ":attacker_no"),
              #(agent_set_slot, ":agent_no", slot_agent_doom_javelin_attacker, ":player_no"),
            (else_try),
              (eq, reg0, "itm_team_change_dart"),
              (try_begin),
                (agent_is_non_player, ":agent_no"),
                (agent_get_team, ":agent_team", ":agent_no"),
                (assign, ":team_has_other_agents", 0),
                (try_for_agents, ":cur_agent"),
                  (neq, ":cur_agent", ":agent_no"),
                  (agent_is_active, ":cur_agent"),
                  (agent_is_alive, ":cur_agent"),
                  (agent_is_human, ":cur_agent"),
                  (agent_get_team, ":cur_agent_team", ":cur_agent"),
                  (eq, ":cur_agent_team", 1),
                  (assign, ":team_has_other_agents", 1),
                (try_end),
                (eq, ":team_has_other_agents", 1),
                (try_begin),
                  (eq, ":agent_team", 0),
                  (agent_set_team, ":agent_no", 1),
                (else_try),
                  (eq, ":agent_team", 1),
                  (agent_set_team, ":agent_no", 0),
                (try_end),
                (try_begin),
                  (agent_is_non_player, ":attacker_no"),
                  (agent_get_group, ":group_no", ":attacker_no"),
                (else_try),
                  (agent_get_player_id, ":group_no", ":attacker_no"),
                (try_end),
                (try_begin),
                  (player_is_active, ":group_no"),
                  (agent_set_group, ":agent_no", ":group_no"),
                (try_end),
                (agent_get_team, ":agent_new_team", ":agent_no"),
                (get_max_players, ":num_players"),						
                (try_for_range, ":cur_player", 1, ":num_players"),						
                  (player_is_active, ":cur_player"),
                  (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_coop_set_agent_team_and_group,
                    ":agent_no", ":agent_new_team", ":attacker_no"),							
                (try_end),        
                (agent_force_rethink, ":agent_no"),              
              (try_end),
            (else_try),
              (eq, reg0, "itm_weak_beserker_dart"),
              #(store_trigger_param_2, ":attacker_no"),
              (agent_ai_set_aggressiveness, ":agent_no", 1000),
              (agent_set_speed_modifier, ":agent_no", 150),
              (agent_set_damage_modifier, ":agent_no", 200),
              (agent_set_hit_points, ":agent_no", 10, 0),
            #(else_try),
            #  (eq, reg0, "itm_scatter_crossbow"),
            #  (store_trigger_param_1, ":agent_no"),
            #  (store_trigger_param_2, ":attacker_no"),
            #  #(assign, ":min_dist", 1000),
            #  #(try_for_range, ":cur_bone_no", 0, 20),
            #  #  (agent_get_bone_position, pos1, ":agent_no", ":cur_bone_no"),
            #  #  (get_distance_between_positions, ":dist", pos0, pos1),
            #  #  (lt, ":dist", ":min_dist"),
            #  #  (assign, ":hit_bone", ":cur_bone_no"),
            #  #  (val_min, ":min_dist", ":dist"),
            #  #(try_end),
            #  (try_begin),
            #    #(eq, ":hit_bone", 9),
            #    (copy_position, pos1, pos0),
            #    (try_for_agents, ":cur_agent", pos1, 5),
            #      (agent_is_active, ":cur_agent"),
            #      (agent_is_alive, ":cur_agent"),
            #      (agent_get_team, ":cur_agent_team", ":cur_agent"),
            #      (eq, ":cur_agent_team", 1),
            #      (agent_set_look_target_agent, ":agent_no", ":cur_agent"),
            #      #(agent_get_bone_position, pos2, ":agent_no", 9),
            #      (agent_get_look_position, pos2, ":agent_no"),
            #      (add_missile, ":attacker_no", pos2, 90, "itm_scatter_crossbow", 0, "itm_scatter_bolts", 0),
            #      
            #    (try_end),
            #  (try_end),
            (try_end),
		]),
        
		# for leeching effects such as the doom jav and healing armour.
		(2, 0, 0, [(multiplayer_is_server),],
		[
          (multiplayer_is_server),
          (try_for_agents, ":agent_no"),
            (agent_is_active, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_get_item_slot, ":body_armour", ":agent_no", 5),
            (try_begin),
              (eq, ":body_armour", "itm_restore_health_armour"),
              (store_agent_hit_points, ":agent_health", ":agent_no", 1),
              (val_add, ":agent_health", 5),
              (agent_set_hit_points, ":agent_no", ":agent_health", 1),
              (store_agent_hit_points, ":agent_health", ":agent_no", 0),
              (val_min, ":agent_health", 100),
              (agent_set_hit_points, ":agent_no", ":agent_health", 0),
            (try_end),
              
            (agent_get_slot, ":num_doom_javs", ":agent_no", slot_agent_doom_javelin_count),
            (try_begin),
              (gt, ":num_doom_javs", 0),
              (assign, reg1, ":num_doom_javs"),
              (store_mul, ":damage", ":num_doom_javs", 5),
              #(agent_get_slot, ":player_no", ":agent_no", slot_agent_doom_javelin_attacker),
              #(try_begin),
              ##  (player_is_active, ":player_no"),
              ##  (player_get_agent_id, ":attacker_no", ":player_no"),
              ##(else_try),
              #  (assign, ":attacker_no", ":agent_no"),
              #(try_end),
              (store_agent_hit_points, ":agent_health", ":agent_no", 1),
              (assign, reg2, ":agent_health"),
              (val_sub, ":agent_health", ":damage"),
              (val_max, ":agent_health", 0),
              (agent_set_hit_points, ":agent_no", ":agent_health", 1),
              #(assign, reg3, ":agent_health"),
              #(assign, reg0, ":agent_no"),
              #(display_message, "@agent no {reg0} - num javs {reg1} - initial health {reg2} - resulting health {reg3}"),
              (try_begin),
                (eq, ":agent_health", 0),
                (agent_deliver_damage_to_agent, ":agent_no", ":agent_no", 1),
              (try_end),
            (try_end),
          (try_end),
            

		]),
        
	]),
  
  
  
  #############################  END OF WAVE MODE
  ###############################################
#INVASION MODE END
  
  (
	"bandit_lair",mtf_battle_mode,charge,
    "Ambushing a bandit lair",
    [
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse, aif_start_alarmed, 7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (6,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (7,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (8,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (9,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (10,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
    ],
    [
      common_battle_init_banner,
    
      common_inventory_not_available,
      
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        
        (assign, "$relative_of_merchant_is_found", 0),
              
        (try_begin),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),

          (agent_get_position, pos4, ":agent_no"),
          (agent_set_scripted_destination, ":agent_no", pos4, 1),
        (try_end),  
        
        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
          (agent_set_team, ":agent_no", 7),
          (team_set_relation, 0, 7, 0),          
        (try_end),                
        ]),
        
	   (0, 0, 0, 
	   [	     
         (party_get_template_id, ":template", "$g_encountered_party"),
         (eq, ":template", "pt_looter_lair"),
         (check_quest_active, "qst_save_relative_of_merchant"),	   
         (eq, "$relative_of_merchant_is_found", 0),
	   ],
	   [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),    
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),
          #(assign, "$g_talk_troop", "trp_relative_of_merchant"),
          (start_mission_conversation, "trp_relative_of_merchant"),
        (try_end),
	   ]),
        
      (ti_tab_pressed, 0, 0,
       [
        (display_message, "str_cannot_leave_now"),
       ], []),
     
      (1, 0, ti_once, [],
       [
        (assign, "$defender_reinforcement_stage", 0),
        (assign, "$bandits_spawned_extra", 0),
	   ]),
	   
	   (1, 0, 0, [],
	   [
        (try_for_agents, ":bandit_id"),
          (agent_is_alive, ":bandit_id"),          
          (agent_get_team, ":agent_team_1", ":bandit_id"),
          (eq, ":agent_team_1", 1),
          (agent_is_in_special_mode, ":bandit_id"),
          (agent_is_human, ":bandit_id"),
          
          (agent_get_position, pos0, ":bandit_id"),
          (try_for_agents, ":player_team_agent_id"),
            (agent_is_alive, ":player_team_agent_id"),
            (agent_get_team, ":agent_team_2", ":player_team_agent_id"),
            (eq, ":agent_team_2", 0),
            (agent_is_human, ":player_team_agent_id"),
                      
            (store_agent_hit_points, ":bandit_hit_points", ":bandit_id"),
            
            (assign, ":continue", 0),
            (try_begin),
              (lt, ":bandit_hit_points", 100),
                            
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),

                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                             
              
              (assign, ":continue", 1),
            (else_try),  
              (agent_get_position, pos1, ":bandit_id"),
              (agent_get_position, pos2, ":player_team_agent_id"),                        
              (get_distance_between_positions, ":distance", pos1, pos2),                                                                        
              (le, ":distance", 4000),
              
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),
                
                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                

              (assign, ":continue", 1),
            (try_end),  
            
            (eq, ":continue", 1),
            
            (agent_clear_scripted_mode, ":bandit_id"),            
          (try_end),
        (try_end),
	   ]),
	   
	   (30, 0, 0, 
	   [
	     (le, "$defender_reinforcement_stage", 1),
	   ],
	   [          
          (store_character_level, ":player_level", "trp_player"),                   
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),

          (lt, "$bandits_spawned_extra", ":number_of_bandits_will_be_spawned_at_each_period"),
          (val_add, "$bandits_spawned_extra", 1),                   

          (party_get_template_id, ":template", "$g_encountered_party"),
          ## CC-D begin: add chief
          (store_random_in_range, ":random_value", 0, 4),  ## CC-D 2->4
          
          (assign, ":bandit_troop", "trp_looter"),  ##fix
          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_sea_raider"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_sea_raider"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_forest_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_forest_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_desert_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_desert_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_mountain_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_mountain_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_taiga_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_taiga_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_steppe_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_steppe_bandit"),
            (try_end),
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (ge, ":random_value", 3),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),
          ## CC-D end

          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (store_random_in_range, ":random_entry_point", 2, 11),
          (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
       ]),	   	   

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (try_begin),
            (neg|agent_is_ally, ":dead_agent_no"),
            (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties            
            (try_begin),
              (eq, ":is_wounded", 1),
              (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
            (try_end),  
          (try_end),  
          
          (party_add_members, "p_temp_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties            
          
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_temp_casualties", ":dead_agent_troop_id", 1), 
        (try_end),
        
        (assign, ":number_of_enemies", 0),
        (try_for_agents, ":cur_agent"),
          (agent_is_non_player, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":number_of_enemies", 1),
        (try_end),
        
        (try_begin),
          (le, ":number_of_enemies", 2),
          (le, "$defender_reinforcement_stage", 1),
          (val_add, "$defender_reinforcement_stage", 1),

          (store_character_level, ":player_level", "trp_player"),                   
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),
          (try_begin),
            (ge, "$defender_reinforcement_stage", 2),
            (val_sub, ":number_of_bandits_will_be_spawned_at_each_period", "$bandits_spawned_extra"),
          (try_end),
          
          (party_get_template_id, ":template", "$g_encountered_party"),          
          ## CC-D begin: add chief
          (store_random_in_range, ":random_value", 0, 4),  ## CC-D 2->4
          
          (assign, ":bandit_troop", "trp_looter"),  ##fix
          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_sea_raider"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_sea_raider"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_forest_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_forest_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_desert_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_desert_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_mountain_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_mountain_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_taiga_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_taiga_bandit"),
            (try_end),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (try_begin),
              (le, ":random_value", 1),
              (assign, ":bandit_troop", "trp_steppe_bandit"),
            (else_try),
              (eq, ":random_value", 2),
              (assign, ":bandit_troop", "trp_chief_steppe_bandit"),
            (try_end),
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (ge, ":random_value", 3),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),
          ## CC-D end
                                                                       
          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (try_for_range, ":unused", 0, ":number_of_bandits_will_be_spawned_at_each_period"),            
            (store_random_in_range, ":random_entry_point", 2, 11),
            (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
          (try_end),
        (try_end),

        #no need to adjust courage in bandit lair for now
        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
       ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (2, 0, ti_once, 
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),         
       ],
       [
         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),

           (store_faction_of_party, ":starting_town_faction", "$g_starting_town"),
           
           (try_begin),
             (eq, ":starting_town_faction", "fac_kingdom_1"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),  
             (eq, ":starting_town_faction", "fac_kingdom_2"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),                   
             (eq, ":starting_town_faction", "fac_kingdom_3"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),  
             (eq, ":starting_town_faction", "fac_kingdom_4"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),  
             (eq, ":starting_town_faction", "fac_kingdom_5"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           (else_try),  
             (eq, ":starting_town_faction", "fac_kingdom_6"),
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
	       (else_try),  #occc
             (assign, ":troop_of_merchant", "trp_relative_of_merchant"),

           (try_end),
           
           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos0, ":player_agent"),
           (assign, ":minimum_distance", 100000),
           (try_for_range, ":entry_no", 1, 10),
             (entry_point_get_position, pos1, ":entry_no"),
             (get_distance_between_positions, ":dist", pos0, pos1),
             (le, ":dist", ":minimum_distance"),
             (ge, ":dist", 1000),
             (assign, ":nearest_entry_point", ":entry_no"),
             (assign, ":minimum_distance", ":dist"),
           (try_end),                     
                          
           (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_merchant", 1, 0),                      
         (try_end),
       ]),

       common_battle_order_panel,
       common_battle_order_panel_tick,
	   common_battle_order_panel_tick_low_freq,

       (1, 4, ti_once,
       [
         (assign, ":continue", 0),
       
         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),       
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),
           
           (this_or_next|main_hero_fallen),
           (eq, "$relative_of_merchant_is_found", 1),
           
           (assign, ":continue", 1),
         (else_try),
           (this_or_next|neq|eq, ":template", "pt_looter_lair"),
           (neg|check_quest_active, "qst_save_relative_of_merchant"),

           (store_mission_timer_a,":cur_time"),
           (ge, ":cur_time", 5),
           
           (this_or_next|main_hero_fallen),
           (num_active_teams_le, 1),
           
           (assign, ":continue", 1),
         (try_end),  
         
         (eq, ":continue", 1),
       ],
       [
         (try_begin),
           (main_hero_fallen),
         (else_try),
           (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
         (try_end),
         
         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers, ## CC
    ),
        
  (
	"alley_fight", mtf_battle_mode,charge,
    "Alley fight",
    [    
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse,aif_start_alarmed,7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    ],    
    [
      common_battle_init_banner,
	  
      common_inventory_not_available,
      
	  
	  #occc start
	  occc_vyrn_ai,
	  #occc end
	  
	  
      (ti_on_agent_spawn, 0, 0, [],
      [              
        (store_trigger_param_1, ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent_no", ":player_agent"),
        (assign, "$g_main_attacker_agent", ":agent_no"),
        (agent_ai_set_aggressiveness, ":agent_no", 199),
        
        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_team, ":agent_no", 7),          
          (team_set_relation, 0, 7, 0), 
        (try_end),                
      ]),
              
	   (0, 0, 0, 
	   [
	     (eq, "$talked_with_merchant", 0), 
	   ],
	   [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),     
          (assign, "$talk_context", tc_back_alley),     
          (start_mission_conversation, ":troop_no"),
        (try_end),
	   ]),
     
      (1, 0, 0, [], 
      [      
        (get_player_agent_no, ":player_agent"),       
        (ge, "$g_main_attacker_agent", 0),
        (ge, ":player_agent", 0),
        (agent_is_active, "$g_main_attacker_agent"),
        (agent_is_active, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),
        (agent_get_position, pos1, "$g_main_attacker_agent"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (ge, ":dist", 5),
        (agent_set_scripted_destination, "$g_main_attacker_agent", pos0),
      ]),

      (ti_tab_pressed, 0, 0, [], 
      [
        (display_message, "str_cannot_leave_now"),
      ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (0, 0, ti_once, 
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),
       ],
       [
		 #occc begin
		 (neq,"$g_starting_town","p_town_16"),
		 #occc end

         (store_faction_of_party, ":starting_town_faction", "$g_starting_town"),
          
         (try_begin),
           (eq, ":starting_town_faction", "fac_kingdom_1"),
           (assign, ":troop_of_merchant", "trp_swadian_merchant"),
         (else_try),  
           (eq, ":starting_town_faction", "fac_kingdom_2"),
           (assign, ":troop_of_merchant", "trp_vaegir_merchant"),
         (else_try),                   
           (eq, ":starting_town_faction", "fac_kingdom_3"),
           (assign, ":troop_of_merchant", "trp_khergit_merchant"),
         (else_try),  
           (eq, ":starting_town_faction", "fac_kingdom_4"),
           (assign, ":troop_of_merchant", "trp_nord_merchant"),
         (else_try),  
           (eq, ":starting_town_faction", "fac_kingdom_5"),
           (assign, ":troop_of_merchant", "trp_rhodok_merchant"),
         (else_try),  
           (eq, ":starting_town_faction", "fac_kingdom_6"),
           (assign, ":troop_of_merchant", "trp_sarranid_merchant"),
         (else_try),  #occc
           (eq, ":starting_town_faction", "fac_kingdom_11"),
           (assign, ":troop_of_merchant", "trp_rhodok_merchant"),
         (else_try),  
           (eq, ":starting_town_faction", "fac_kingdom_12"),
           (assign, ":troop_of_merchant", "trp_vaegir_merchant"),
         (try_end),
                                     
         (add_visitors_to_current_scene, 3, ":troop_of_merchant", 1, 0),                      
       ]),
       
      (1, 0, ti_once,
       [        
         (eq, "$talked_with_merchant", 1),         
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),  
         
         (assign, "$current_startup_quest_phase", 1),                  
                  
         (change_screen_return),
         (set_trigger_result, 1),
         
         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),
         
         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),  
       ]),

      (1, 3, ti_once,
       [        
         (main_hero_fallen),         
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),  
         
         (assign, "$current_startup_quest_phase", 1),                  
                  
         (change_screen_return),
         (set_trigger_result, 1),    
         
         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),
         
         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),                
       ]),
     ] + custom_commander_commom_triggers, ## CC
    ),
     
  (
    "meeting_merchant",0,-1,
    "Meeting with the merchant",
    [
      (0,mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [              
        (store_trigger_param_1, ":agent_no"),

        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_team, ":agent_no", 7),          
          (team_set_relation, 0, 7, 0), 
        (try_end),                
      ]),

      (1, 0, ti_once, [], 
      [
        (assign, "$dialog_with_merchant_ended", 0),
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),
      
      (1, 0, 0, 
      [        
        (assign, ":continue", 0),
        (try_begin),
          (ge, "$dialog_with_merchant_ended", 6),
          (assign, ":continue", 1),
        (else_try),
          (ge, "$dialog_with_merchant_ended", 1),
		  (neg|conversation_screen_is_active),          

          (try_begin),
            (eq, "$dialog_with_merchant_ended", 1),
            (check_quest_active, "qst_collect_men"),
            (tutorial_box, "str_start_up_first_quest", "@Tutorial"),
          (try_end),  

          (val_add, "$dialog_with_merchant_ended", 1),
          (assign, ":continue", 0),
        (try_end),  
        
        (try_begin),
          (conversation_screen_is_active), 
          (tutorial_message, -1),
          (assign, ":continue", 0),
        (try_end),
        
        (eq, ":continue", 1),                        
      ],
      [
        (tutorial_message_set_size, 17, 17),
        (tutorial_message_set_position, 500, 650),
        (tutorial_message_set_center_justify, 0),
        (tutorial_message_set_background, 1),
        (tutorial_message, "str_press_tab_to_exit_from_town"),
      ]),
      	  	
      (ti_before_mission_start, 0, 0, [], 
      [      
        #(call_script, "script_change_banners_and_chest"),
	  ]),

      (ti_inventory_key_pressed, 0, 0, 
      [
        (set_trigger_result, 1),        
      ], []),           
            
      (ti_tab_pressed, 0, 0, 
      [ 
        (try_begin),          
          (gt, "$dialog_with_merchant_ended", 0),          

          (assign, ":max_dist", 0),
          (party_get_position, pos1, "$current_town"),
          (try_for_range, ":unused", 0, 10),
            (map_get_random_position_around_position, pos0, pos1, 2),
            (get_distance_between_positions, ":dist", pos0, pos1),
            (ge, ":dist", ":max_dist"),
            (assign, ":max_dist", ":dist"),
            (copy_position, pos2, pos0),
          (try_end),  
    
          (party_set_position, "p_main_party", pos2),          
                            
          ## CC-D begin: over hp fix
          (call_script, "script_ccc_last_agent_hp_fix"),
          ## CC-D end
          (finish_mission),
          
          (assign, "$current_startup_quest_phase", 2),
          
          (tutorial_message, -1),
          
          (tutorial_message_set_background, 0),
          
          (change_screen_map),
          
          (try_begin),
            (check_quest_finished, "qst_save_town_from_bandits"),
            (assign, "$g_do_one_more_meeting_with_merchant", 1),
          (else_try),  
            #will do this at first spawning in the map          
            (set_spawn_radius, 50),
            (try_for_range, ":unused", 0, 20),
              (spawn_around_party, "p_main_party", "pt_looters"),
            (try_end),          
          (try_end),  

          (set_trigger_result, 1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], []),
    ] + custom_commander_commom_triggers, ## CC
   ),

  (
    "town_fight",0,-1,
    "Town Fight",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),          
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source,af_override_horse,0,1,[]),
      (10,mtef_visitor_source,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (14,mtef_visitor_source,af_override_horse,0,1,[]),
      (15,mtef_visitor_source,af_override_horse,0,1,[]),
      (16,mtef_visitor_source,af_override_horse,0,1,[]),
      (17,mtef_visitor_source,af_override_horse,0,1,[]),
      (18,mtef_visitor_source,af_override_horse,0,1,[]),
      (19,mtef_visitor_source,af_override_horse,0,1,[]),
      (20,mtef_visitor_source,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
	  (23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
	  (29,mtef_visitor_source,af_override_horse,0,1,[]),
	  (30,mtef_visitor_source,af_override_horse,0,1,[]), 
	  (31,mtef_visitor_source,af_override_horse,0,1,[]), 
      (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
	  (39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
	  (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
	  (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [
      common_battle_init_banner,
    
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        
        (agent_set_team, ":agent_no", 0),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (mission_disable_talk),        
      
        (assign, "$g_main_attacker_agent", 0),
        (set_party_battle_mode),
        
        (assign, "$number_of_bandits_killed_by_player", 0),
        (assign, "$number_of_civilian_loses", 0),
        
        (set_fixed_point_multiplier, 100),
	  ]),
		 
      (1, 0, ti_once, 
      [
        (call_script, "script_init_town_walker_agents"),
      ], 
      []),
      
      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (try_begin),
          (agent_get_team, ":dead_agent_team_no", ":dead_agent_no"),
          (eq, ":dead_agent_team_no", 1),

          (get_player_agent_no, ":player_agent"),
          (eq, ":player_agent", ":killer_agent_no"),
                
          (val_add, "$number_of_bandits_killed_by_player", 1),
        (else_try),
          (eq, ":dead_agent_team_no", 0),
          
          (val_add, "$number_of_civilian_loses", 1),
        (try_end),  
      ]),
            
      (1, 0, 0, 
      [
        (lt, "$merchant_sign_count", 8),
  	    (val_add, "$merchant_sign_count", 1),
  	    
  	    (try_begin),
  	      (eq, "$merchant_sign_count", 2),
          (get_player_agent_no, ":player_agent"),
  	      (try_for_agents, ":agent_no"),
  	        (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
  	        (ge, ":agent_troop_id", "trp_swadian_merchant"),
  	        (lt, ":agent_troop_id", "trp_startup_merchants_end"),
  	        
  	        (assign, "$g_city_merchant_troop_id", ":agent_troop_id"),
  	        (assign, "$g_city_merchant_agent_id", ":agent_no"),
  	        
  	        (agent_get_position, pos0, ":player_agent"),
  	        (agent_get_position, pos1, ":agent_no"),
  	                    
  	        (assign, ":max_dif", -1000),
            (try_for_range, ":target_entry_point", 0, 64),
              #(neg|entry_point_is_auto_generated, ":target_entry_point"),
              (entry_point_get_position, pos6, ":target_entry_point"),
              (get_distance_between_positions, ":dist_to_player", pos0, pos6),
              (get_distance_between_positions, ":dist_to_merchant", pos1, pos6),
              (store_sub, ":dif", ":dist_to_merchant", ":dist_to_player"),
              (ge, ":dist_to_merchant", 15),
              (ge, ":dif", ":max_dif"),
              (copy_position, pos2, pos6),
              (assign, ":max_dif", ":dif"),
            (try_end),
  	      	    
    	    (agent_set_scripted_destination, ":agent_no", pos2, 0),
            (agent_set_speed_limit, ":agent_no", 10),
          (try_end),
        (else_try),
  	      (eq, "$merchant_sign_count", 5),
  	                 
          (get_player_agent_no, ":player_agent"),
	      (agent_get_position, pos0, ":player_agent"),

  	      (agent_set_scripted_destination, "$g_city_merchant_agent_id", pos0, 0),
          (agent_set_speed_limit, "$g_city_merchant_agent_id", 10),
        (else_try),
  	      (eq, "$merchant_sign_count", 7),
  	      
  	      (agent_clear_scripted_mode, "$g_city_merchant_agent_id"),
  	                 
  	      (assign, "$talk_context", tc_town_talk),
  	      (start_mission_conversation, "$g_city_merchant_troop_id"),  	        	      
  	    (try_end),  	      
  	  ], 
	  []),
	  
	  (1, 0, 0, [],
	  [	  
	    (ge, "$merchant_sign_count", 8),
	   
	    (get_player_agent_no, ":player_agent"),
	    	    
        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 0),
          
          (agent_get_position, pos0, ":agent_no"),
        
          (assign, ":minimum_distance", 10000),  
          (try_for_agents, ":bandit_no"),
            (agent_is_alive, ":bandit_no"),
            (agent_get_team, ":bandit_team", ":bandit_no"),
            (eq, ":bandit_team", 1),
            
            (agent_get_position, pos1, ":bandit_no"),
  
            (get_distance_between_positions, ":dist", pos0, pos1),
            (le, ":dist", ":minimum_distance"),
            (assign, ":minimum_distance", ":dist"),
            (copy_position, pos2, pos1),
          (try_end),
         
          (assign, reg1, ":dist"),
          (try_begin),
            (le, ":minimum_distance", 500),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),  
            (lt, ":minimum_distance", 10000),
            (agent_set_scripted_destination, ":agent_no", pos2, 0),
          (try_end),
        (try_end),                  	      
      ]),

      (3, 0, 0, 
      [
        (lt, "$merchant_sign_count", 8),
  	    (call_script, "script_tick_town_walkers")
  	  ], 
	  []),	  	  
	
      (2, 0, 0, 
      [
        (call_script, "script_center_ambiance_sounds")
      ], 
      []),
    
      (ti_before_mission_start, 0, 0, 
      [], 
      [
        (call_script, "script_change_banners_and_chest")
      ]),
        
      (1, 4, ti_once,
       [                  
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1),
         
         (ge, "$merchant_sign_count", 8),
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),
         
         (assign, "$current_startup_quest_phase", 4),

         (mission_enable_talk),        

         ## CC-D begin: over hp fix
         (call_script, "script_ccc_last_agent_hp_fix"),
         ## CC-D end
         (finish_mission),         
         
         (unlock_achievement, ACHIEVEMENT_GET_UP_STAND_UP),        
         (call_script, "script_ccd_record_achievement", ACHIEVEMENT_GET_UP_STAND_UP),  ## CC-D add: for local achievement
                  
         (change_screen_return),
         (set_trigger_result, 1),         
       ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ], []),
       
      (ti_tab_pressed, 0, 0,
      [
        (display_message, "str_cannot_leave_now"),
      ], []),
    ] + custom_commander_commom_triggers, ## CC
  ),
    (
    "multiplayer_duel",mtf_battle_mode,-1, #duel mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_duel),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         #make everyone see themselves as allies, no friendly fire
         (team_set_relation, 0, 0, 1),
         (team_set_relation, 0, 1, 1),
         (team_set_relation, 1, 1, 1),
         (mission_set_duel_mode, 1),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly 
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext. 

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (call_script, "script_initialize_all_scene_prop_slots"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),
           (get_player_agent_no, ":player_agent"),
           (agent_is_active, ":player_agent"),
           (agent_slot_ge, ":player_agent", slot_agent_in_duel_with, 0),
           (try_begin),
             (eq, ":dead_agent_no", ":player_agent"),
             (display_message, "str_you_have_lost_a_duel"),
           (else_try),
             (agent_slot_eq, ":player_agent", slot_agent_in_duel_with, ":dead_agent_no"),
             (display_message, "str_you_have_won_a_duel"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_slot_ge, ":dead_agent_no", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duelist_agent_no", ":dead_agent_no", slot_agent_in_duel_with),
           (agent_set_slot, ":dead_agent_no", slot_agent_in_duel_with, -1),
           (try_begin),
             (agent_is_active, ":duelist_agent_no"),
             (agent_set_slot, ":duelist_agent_no", slot_agent_in_duel_with, -1),
             (agent_clear_relations_with_agents, ":duelist_agent_no"),
             (try_begin),
               (agent_get_player_id, ":duelist_player_no", ":duelist_agent_no"),
               (neg|player_is_active, ":duelist_player_no"), #might be AI
               (agent_force_rethink, ":duelist_agent_no"),
             (try_end),
           (try_end),
         (try_end),
         ]),
      
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),
         
           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),
         
           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      
      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),

      (1, 0, 0, [],
       [
         (store_mission_timer_a, ":mission_timer"),
         (store_sub, ":duel_start_time", ":mission_timer", 3),
         (try_for_agents, ":cur_agent"),
           (agent_slot_ge, ":cur_agent", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duel_time", ":cur_agent", slot_agent_duel_start_time),
           (ge, ":duel_time", 0),
           (le, ":duel_time", ":duel_start_time"),
           (agent_set_slot, ":cur_agent", slot_agent_duel_start_time, -1),
           (agent_get_slot, ":opponent_agent", ":cur_agent", slot_agent_in_duel_with),
           (agent_is_active, ":opponent_agent"),
           (agent_add_relation_with_agent, ":cur_agent", ":opponent_agent", -1),
           (agent_force_rethink, ":cur_agent"),
         (try_end),
         ]),
      ],
  ),


###############################################################################
#CC-C begin
## Cave Mission
###############################################################################
# Cave
("ccc_cave_battle_7_unmount",mtf_battle_mode,charge,"cave",
[
    (0,mtef_team_0|mtef_no_regulars|mtef_use_exact_number,af_override_horse,aif_start_alarmed,7,[]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (5,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (6,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (7,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (8,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (9,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (10,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (11,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (12,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (13,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (14,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (15,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (64,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (65,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (66,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (67,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (68,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (69,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (70,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (71,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    
],
[
    common_battle_init_banner,
    #common_inventory_not_available,
    # Battle panel
    common_battle_order_panel,
    common_battle_order_panel_tick,
	common_battle_order_panel_tick_low_freq,
	
    (0.5, 0, ti_once,
    [], 
      [
      (try_begin),
      (neq,"$g_player_troop","trp_player"),
      (assign,":party_alive_cnt",0),
      (try_for_agents, ":agent_id"),
        (agent_is_alive, ":agent_id"),
        (agent_get_team, ":agent_team", ":agent_id"),
        (eq, ":agent_team", "p_main_party"),
        (val_add, ":party_alive_cnt",1),
      (try_end),
      (lt,":party_alive_cnt",7),
      
      (store_troop_health, "$g_player_begin_hp", "trp_player"),
      (neg|troop_is_wounded, "trp_player"),
      (get_player_agent_no, ":player_agent"),
      (ge, ":player_agent", 0),
      (agent_get_team, ":player_team", ":player_agent"),
      (agent_get_position, pos49, ":player_agent"),
      (position_move_x, pos49, -100),
      (set_spawn_position, pos49),
      (troop_get_inventory_slot, ":player_horse_item", "trp_player", ek_horse),
      (troop_get_inventory_slot_modifier, ":player_horse_item_modifier", "trp_player", ek_horse),
      (troop_set_inventory_slot, "trp_player", ek_horse, -1),
      (spawn_agent,"trp_player"),
      (agent_set_team, reg0, ":player_team"),
      (troop_set_inventory_slot, "trp_player", ek_horse, ":player_horse_item"),
      (troop_set_inventory_slot_modifier, "trp_player", ek_horse, ":player_horse_item_modifier"),
    (try_end),
    ]),
    
    (0, 0, ti_once, [], 
      [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (team_give_order, ":player_team", grc_everyone, mordr_follow),
      ]),
  ]+ccc_cave_triggers+custom_commander_commom_triggers,
),

("ccc_cave_battle_7_all_unmount",mtf_battle_mode,charge,"cave",
[
    (0,mtef_team_0|mtef_no_regulars|mtef_use_exact_number,af_override_horse,aif_start_alarmed,7,[]),
    (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (48,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (49,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (50,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (51,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (52,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (53,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (54,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (55,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (56,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (57,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (58,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (59,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (60,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (61,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (62,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (63,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (64,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (65,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (66,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (67,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (68,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (69,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (70,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    (71,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
],
[
    common_battle_init_banner,
    #common_inventory_not_available,
    # Battle panel
    common_battle_order_panel,
    common_battle_order_panel_tick,
	common_battle_order_panel_tick_low_freq,
	
    (0.5, 0, ti_once,
    [], 
      [
      (try_begin),
      (neq,"$g_player_troop","trp_player"),
      (assign,":party_alive_cnt",0),
      (try_for_agents, ":agent_id"),
        (agent_is_alive, ":agent_id"),
        (agent_get_team, ":agent_team", ":agent_id"),
        (eq, ":agent_team", "p_main_party"),
        (val_add, ":party_alive_cnt",1),
      (try_end),
      (lt,":party_alive_cnt",7),
      
      (store_troop_health, "$g_player_begin_hp", "trp_player"),
      (neg|troop_is_wounded, "trp_player"),
      (get_player_agent_no, ":player_agent"),
      (ge, ":player_agent", 0),
      (agent_get_team, ":player_team", ":player_agent"),
      (agent_get_position, pos49, ":player_agent"),
      (position_move_x, pos49, -100),
      (set_spawn_position, pos49),
      (troop_get_inventory_slot, ":player_horse_item", "trp_player", ek_horse),
      (troop_get_inventory_slot_modifier, ":player_horse_item_modifier", "trp_player", ek_horse),
      (troop_set_inventory_slot, "trp_player", ek_horse, -1),
      (spawn_agent,"trp_player"),
      (agent_set_team, reg0, ":player_team"),
      (troop_set_inventory_slot, "trp_player", ek_horse, ":player_horse_item"),
      (troop_set_inventory_slot_modifier, "trp_player", ek_horse, ":player_horse_item_modifier"),
    (try_end),
    ]),
    
    (0, 0, ti_once, [], 
      [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (team_give_order, ":player_team", grc_everyone, mordr_follow),
      ]),

  ]+ccc_cave_triggers+custom_commander_commom_triggers,
),

## CC-D begin
("ccd_zombie_run_away",0,charge,"Run away from zombies",
[
    (0,mtef_team_0|mtef_no_regulars|mtef_use_exact_number,af_override_weapons|af_override_horse,aif_start_alarmed,1,[itm_ccc_shot_shells]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (5,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (6,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (7,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (8,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (9,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (10,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (11,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (12,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (13,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (14,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (15,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (16,mtef_visitor_source|mtef_team_1,0,0,20,[]),
    (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
],
[
    common_battle_init_banner,
    ccc_init_troop_hp,
    #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    ccc_healing_item_used,
    ccc_item_damage_effect,
    cry_victory,

    (1, 0, ti_once, [], [
      (music_set_situation, mtf_sit_fight|mtf_sit_ambushed),
      (play_track, "track_fight_as_darkknight", 1),
      
      (reset_mission_timer_a),
      
      (assign, ":cur_entry", 20),
      (entry_point_get_position, pos1, ":cur_entry"),
      (set_spawn_position, pos1),
      (spawn_item, "itm_ccc_rifle_shotgun_b", 0),
    ]),

    (1, 0, 5, [
      (store_mission_timer_a, ":cur_time"),
      (lt, ":cur_time", 30),
    ], [
      (try_for_range, ":cur_entry", 2, 6),
        (set_visitors, ":cur_entry", "trp_ccd_zombie", 2),
      (try_end),
    ]),

    (1, 0, 5, [
      (store_mission_timer_a, ":cur_time"),
      (ge, ":cur_time", 60),
      (lt, ":cur_time", 90),
    ], [
      (try_for_range, ":cur_entry", 17, 20),
        (set_visitors, ":cur_entry", "trp_ccd_zombie", 2),
      (try_end),
    ]),

    (1, 0, ti_once, [
      (store_mission_timer_a, ":cur_time"),
      (ge, ":cur_time", 50),
    ], [
      (get_player_agent_no, ":player_agent"),
      (scene_prop_get_num_instances, ":num_instances", "spr_castle_e_sally_door_a"),
      (try_for_range, ":cur_instance", 0, ":num_instances"),
        (scene_prop_get_instance, ":spr_instance", "spr_castle_e_sally_door_a", ":cur_instance"),
        (prop_instance_receive_damage, ":spr_instance", ":player_agent", 10000000),
      (try_end),
    ]),

    (1, 0, ti_once, [
      (store_mission_timer_a, ":cur_time"),
      (ge, ":cur_time", 60),
    ], [
      (assign, ":cur_entry", 10),
      (entry_point_get_position, pos1, ":cur_entry"),
      #(set_spawn_position, pos1),
      #(spawn_agent, "trp_ccd_dark_knight_shadow", 0),
      (set_visitors, ":cur_entry", "trp_ccd_zombiedog", 2),
    ]),

    (1, 0, ti_once, [
      (store_mission_timer_a, ":cur_time"),
      (ge, ":cur_time", 70),
    ], [
      (assign, ":cur_entry", 10),
      (entry_point_get_position, pos1, ":cur_entry"),
      #(set_spawn_position, pos1),
      #(spawn_agent, "trp_ccd_dark_knight_shadow", 0),
      (set_visitor, ":cur_entry", "trp_ccd_dark_knight_shadow"),
      (play_sound_at_position, "snd_horse_snort", pos1),
    ]),

    (ti_on_agent_killed_or_wounded, 0, 0, [], [
      (store_trigger_param_1, ":dead_agent_no"),
      (store_trigger_param_2, ":killer_agent_no"),
      
      (agent_get_troop_id, ":troop_id", ":dead_agent_no"),
      (eq, ":troop_id", "trp_ccd_dark_knight_shadow"),
      (get_player_agent_no, ":player_agent"),
      (eq, ":killer_agent_no", ":player_agent"),
      
      (try_begin),
        (store_mod, ":p_one", "$g_ccd_reward_zombie2_flag", 100),
        (lt, ":p_one", 10),
        (val_add, "$g_ccd_reward_zombie2_flag", 10),
      (try_end),
    ]),

    (0, 0, 0, [
      (neg|main_hero_fallen),
    ], [
      (get_player_agent_no, ":player_agent"),
      (agent_get_position, pos1, ":player_agent"),
      
      (assign, ":cur_entry", 1),
      (entry_point_get_position, pos2, ":cur_entry"),
      
      (get_sq_distance_between_positions, ":dist", pos1, pos2),
      (lt, ":dist", 1000),
      
      (store_mission_timer_a_msec, "$ccd_cur_lap"),
      (val_div, "$ccd_cur_lap", 10),
      (display_message, "@Goal!!"),
      
      (try_begin),
        (store_mod, ":p_one", "$g_ccd_reward_zombie2_flag", 10),
        (lt, ":p_one", 1),
        (lt, "$ccd_cur_lap", 10000),
        (val_add, "$g_ccd_reward_zombie2_flag", 1),
      (try_end),
      
      (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
      (call_script, "script_ccc_last_agent_hp_fix"),
      (finish_mission),
    ]),

    (ti_battle_window_opened, 0, 0, [], [
      (start_presentation, "prsnt_ccd_display_lap_time")
    ]),

    (0, 0, 0, [
      (call_script, "script_iterate_pointer_arrow"),
    ], []),

    (ti_tab_pressed, 0, 0, [
      (question_box, "str_do_you_wish_to_surrender"),
    ], []),

    (ti_question_answered, 0, 0, [],
    [
      (store_trigger_param_1, ":answer"),
      (eq, ":answer", 0),
      (call_script, "script_ccc_last_agent_hp_fix"),
      (finish_mission),
    ]),

    (4, 0, ti_once, [(main_hero_fallen)], [
      (call_script, "script_ccc_last_agent_hp_fix"),
      (finish_mission),
    ]),
]),
## CC-D end

#hide house
("ccc_cave_hide_house",0,-1,"Cave hide house",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (1,mtef_visitor_source,af_override_horse,0,1,[]),
  (2,mtef_visitor_source,af_override_horse,0,1,[]),
  (3,mtef_visitor_source,af_override_horse,0,1,[]),
  (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
  (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (6,mtef_visitor_source,af_override_horse,0,1,[]),
  (7,mtef_visitor_source,af_override_horse,0,1,[]),
  (8,mtef_visitor_source,af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(assign,"$g_ccc_scens_use_door",0),(set_trigger_result,1)], []),
         
    (1, 0, ti_once, [], [
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
    ]),
    
    (2,0,ti_once,[],
       [         
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_get_troop_id  ,":troop_no", ":agent_no"),
        (troop_get_type, ":is_female", ":troop_no"),
         (try_begin),
		  (this_or_next|eq, ":is_female", tf_elf_female),
		  (this_or_next|eq, ":is_female", tf_gaolu_female),
		  (this_or_next|eq, ":is_female", tf_girl),
          (eq,":is_female",1),
          (agent_set_stand_animation,":agent_no","anim_stand_lady"),
         (else_try),  
          (agent_set_stand_animation,":agent_no","anim_stand_lord"),
         (try_end),
      (try_end),
    ]),
         
    (0, 0, 0.5, [], [
      (key_is_down, key_right_mouse_button),
      (scene_prop_get_instance, ":chest", "spr_container_chest_b", 0),
      (ge, ":chest", 0),
      (prop_instance_get_position, pos1, ":chest"),
      (get_player_agent_no, ":player_agent"),
      (agent_get_position, pos2, ":player_agent"),
      (get_distance_between_positions, ":dist", pos1, pos2),
      (lt, ":dist", 350),
      (start_presentation, "prsnt_deposit_withdraw_money"),
    ]),
## CC-D begin
    (1, 0, ti_once, [
      (store_current_scene,":scene"),
      (eq,":scene","scn_ccc_hide_house"),
    ], [
      (assign, ":cur_entry", 11),
      (troop_get_inventory_capacity, ":inv_cap", "trp_ccd_horse_trainer"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item", "trp_ccd_horse_trainer", ":i_slot"),
        (ge, ":item", 0),
        (item_get_type, ":type", ":item"),
        (eq, ":type", itp_type_horse),
        (troop_get_inventory_slot_modifier, ":imod", "trp_ccd_horse_trainer", ":i_slot"),
        (entry_point_get_position, pos1, ":cur_entry"),
        (set_spawn_position, pos1),
        (spawn_horse, ":item", ":imod"),
        (val_add, ":cur_entry", 1),
        (try_begin),
          (ge, ":cur_entry", 16),
          (assign, ":inv_cap", ":i_slot"), #break loop
        (try_end),
      (try_end),
    ]),

    ## CC-D begin: camera integrate
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
## CC-D end
]),

("ccc_cave_hide_house_prison",0,-1,"Cave hide house Prison",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (1,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (3,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (4,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (5,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (6,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (7,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (8,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (9,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (10,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (11,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (12,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (13,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (14,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (15,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (16,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (17,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (18,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (19,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (20,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (21,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (22,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (23,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (24,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (25,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (26,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (27,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (28,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (29,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (30,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (31,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (32,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (33,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (34,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (35,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (36,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (37,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (38,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (39,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (40,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (41,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (42,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (43,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (44,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (45,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (46,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (47,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (48,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (49,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (50,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (51,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (52,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (53,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (54,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (55,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (56,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (57,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (58,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (59,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (60,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (61,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (62,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (63,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (64,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (65,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (66,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (67,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (68,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (69,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (70,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (71,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (72,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (73,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (74,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (75,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (76,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (77,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (78,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (79,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (80,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (81,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (82,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (83,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (84,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (85,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (86,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (87,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (88,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (89,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (90,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (91,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (92,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (93,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (94,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (95,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (96,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (97,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (98,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (99,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (100,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (101,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (102,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (103,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (104,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (105,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (106,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (107,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (108,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (109,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (110,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (111,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (112,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (113,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (114,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (115,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (116,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (117,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (118,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (119,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (120,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (121,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (122,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (123,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (124,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (125,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (126,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (127,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(assign,"$g_ccc_fuck_flag",0),(assign,"$g_ccc_scens_use_door",0),(set_trigger_result,1)], []),#instant fuck

    (1, 0, ti_once, [], [
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_night),
      (assign,"$ccc_dance_time",0),
      (assign,"$g_ccc_fuck_flag",0),
      #(assign,"$g_ccc_fuck_flag",1), #CC-C debug
    ]),

    (0, 0, ti_once, [(eq,"$g_ccc_fuck_flag",0),(key_is_down, key_home),], 
    [(assign,"$g_ccc_fuck_flag",1),(display_message,"@My wolf awoke."),(play_sound,"snd_distant_dog_bark"),]),
         
## CC-D begin: default stand anim
    (ti_on_agent_spawn, 1, 0, [
      (store_trigger_param_1, ":agent_no"),
      (try_begin),
        (neg|agent_is_non_player, ":agent_no"),
        (agent_set_stand_animation, ":agent_no", "anim_stand"),
      (else_try),
        (agent_get_troop_id  ,":troop_no", ":agent_no"),
        (troop_get_type, ":is_female", ":troop_no"),
        (try_begin),
		  (this_or_next|eq, ":is_female", tf_elf_female),
		  (this_or_next|eq, ":is_female", tf_gaolu_female),
		  (this_or_next|eq, ":is_female", tf_girl),
          (eq, ":is_female", 1),
          (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
          (store_random_in_range, ":r", 0, 800),
          (agent_set_animation_progress, ":agent_no", ":r"),
        (else_try),
          (agent_set_stand_animation, ":agent_no", "anim_stand_lord"),
          (store_random_in_range, ":r", 0, 100),
          (agent_set_animation_progress, ":agent_no", ":r"),
        (try_end),
      (try_end),
    ],[]),
## CC-D end
    (4,0,0,
      [
      (eq,"$ccc_dance_time",2),
    ],
    [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_set_slot, ":agent_no", slot_agent_cur_animation, 0),
        (neq,":player_agent",":agent_no"),
        (store_random_in_range,":r",0,4),
        (try_begin),
          (eq,":r",0),
          (agent_set_stand_animation,":agent_no","anim_dancer_1"),
        (else_try),
          (eq,":r",1),
          (agent_set_stand_animation,":agent_no","anim_dancer_2"),
        (else_try),
          (eq,":r",2),
          (agent_set_stand_animation,":agent_no","anim_dancer_3"),
        (else_try),
          (eq,":r",3),
          (agent_set_stand_animation,":agent_no","anim_dancer_4"),
        (try_end),
      (try_end),
      (assign,"$ccc_dance_time",3),
  ]),
    
    (4,0,0,
    [
      (eq,"$ccc_dance_time",1),
     ],
    [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_set_slot, ":agent_no", slot_agent_cur_animation, 0),
        (agent_get_troop_id  ,":troop_no", ":agent_no"),
        (troop_get_type, ":is_female", ":troop_no"),
        (try_begin),
          (eq,":player_agent",":agent_no"),
          (agent_set_stand_animation,":agent_no","anim_stand"),
        (else_try),
		  (this_or_next|eq, ":is_female", tf_elf_female),
		  (this_or_next|eq, ":is_female", tf_gaolu_female),
		  (this_or_next|eq, ":is_female", tf_girl),
          (eq,":is_female",1),
          (agent_set_stand_animation,":agent_no","anim_stand_lady"),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
          (agent_set_stand_animation,":agent_no","anim_stand_lord"),
        (else_try),
          (agent_set_stand_animation,":agent_no","anim_stand_lord"),
        (else_try),
        (try_end),
      (try_end),
      (assign,"$ccc_dance_time",0),
    ]),
    
    ccc_battle_init,
    ccc_help_msg,
    ccc_fuck_init,
    ccc_fuck_spawn_agent,
    ccc_fuck_sound,
    ccc_fuck_change,
    ccc_fuck_come_on_key_v,
    ccc_fuck_key_k,
    ccc_fuck_key_j,
    ccc_fuck_key_comma,
    ccc_fuck_key_period,
    ccc_fuck_start,
    ccc_fuck_del,
    ccc_fuck_anime,
    ccc_fuck_shot,
    ccc_fuck_finish,

    ## CC-D begin: camera integrate
    #custom_commander_camera,
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
]),

("ccc_prison_hide_room",0,-1,"Cave hide room",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,0,1,[]), # in
  (1,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,0,1,[]), # play
  (2,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,0,1,[]), # lady
  (3,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,0,1,[]), # on bad
  (4,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,0,1,[]), # load
  (5,mtef_visitor_source|mtef_team_1,af_override_weapons|af_override_horse,0,1,[]), # enemy
  (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
  (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
  (8,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
  (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(question_box,"@Easy fuck?"),], []),

    (ti_question_answered, 0, 0, [],
       [
      (store_trigger_param_1,":answer"),
      (eq,":answer",0),
      (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
      (agent_get_troop_id,":troop_no","$ccc_fuck_agent"),
      (call_script,"script_ccc_mission_fuck_score",":troop_no",0),
         ]),
      

    (ti_before_mission_start, 0,0, [], 
    [
      (scene_set_day_time, 24),
    ]),
    
    (0, 0, ti_once, [(key_is_down, key_home),], 
    [(assign,"$ccc_fuck_agent_ero_hp",99999),(display_message,"@You are as tough as the cow."),(play_sound,"snd_cow_moo"),]),

    ccc_battle_init,
    ccc_help_msg,
    ccc_fuck_init,
    ccc_fuck_spawn_agent,
    ccc_fuck_sound,
    ccc_fuck_change,
    ccc_fuck_come_on_key_v,
    ccc_fuck_key_k,
    ccc_fuck_key_j,
    ccc_fuck_key_comma,
    ccc_fuck_key_period,
    ccc_fuck_start,
    ccc_fuck_del,
    ccc_fuck_anime,
    ccc_fuck_shot,
    ccc_fuck_finish,
    ccc_fuck_finish2,  ## CC-D: extra wrestling

    (1, 0, ti_once, [], [
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_night),
      (get_player_agent_no, ":player_agent"),
      (call_script,"script_ccc_agent_check_nearest",":player_agent"),
      (assign,"$ccc_fuck_agent",reg1),
      (agent_get_troop_id,":troop_no","$ccc_fuck_agent"),
      (troop_get_slot, ":ero",":troop_no",slot_troop_eros_power),
      (store_add,":init_hp",80,":ero"),
      (assign,"$ccc_fuck_agent_ero_hp",":init_hp"),
      (assign,"$g_ccc_fuck_flag",1),
      ## CC-D begin: extra wrestling
      #(assign,"$g_ccc_fuck_key_k",0),
      (start_presentation, "prsnt_ccd_display_ex_gage"),
      ## CC-D end
      (play_sound,"snd_distant_owl"),
         ]),

## CC-D begin: extra wrestling
##k
#  (1, 0, 0, 
#  [(gt,"$ccc_fuck_stage",0),(key_is_down, key_k),],
#       [
#    (try_begin),
#      (ge,"$g_ccc_fuck_key_k",1),
#      (assign,"$g_ccc_fuck_key_k",0),
#    (else_try),
#      (assign,"$g_ccc_fuck_key_k",1),
#    (try_end),
#         ]),
  (0, 0, 0,
  [(eq, "$g_ccc_fuck_flag", 1),],
    [
      (try_begin),
        (neg|is_presentation_active,"prsnt_ccd_display_ex_gage"),
        (start_presentation, "prsnt_ccd_display_ex_gage"),
      (try_end),
    ]),
## CC-D end

#ero statce
  (1, 0, 0, 
  [(eq,"$g_ccc_fuck_flag",1),(lt,"$ccc_fuck_stage",99),(neq,"$ccc_fuck_stage",1),],  ## CC-D: extra wrestling: dance:3->1
       [
      (get_player_agent_no, ":player_agent"),
      (assign,":agent_hp","$ccc_fuck_agent_ero_hp"),
      ## CC-D begin: extra wrestling
      (agent_get_troop_id, ":troop_no", "$ccc_fuck_agent"),
      (troop_get_slot, ":ero", ":troop_no", slot_troop_eros_power),
      (store_mod, ":weak_style", ":ero", 10),
      (val_add, ":weak_style", 3),
      (try_begin),
        (ge, ":weak_style", 11),
        (val_add, ":weak_style", 1),
      (try_end),  #weak_style: 3-13 except 11
      
      (try_begin),
        (eq,"$ccc_fuck_stage",0),
        (store_random_in_range,":recover",0,3),
        (val_add,":agent_hp",":recover"),

        (store_random_in_range,":recover",3,6),
        (store_agent_hit_points,":player_hp",":player_agent",1),
        (val_add,":player_hp",":recover"),
        (agent_set_hit_points,":player_agent",":player_hp",1),
      (else_try),
        (gt,"$ccc_fuck_stage",1),
        (store_random_in_range,":damage",1,4),
        (val_sub,":agent_hp",":damage"),
        (try_begin),
          (eq,"$g_ccc_fuck_key_k",1),
          (val_sub,":agent_hp",":damage"),
        (try_end),
        (try_begin),
          (eq, "$ccc_fuck_stage", 11),  #11:icha
          (neq, "$ccc_fuck_atk_agent", ":player_agent"),
          (val_sub,":agent_hp",":damage"),
        (else_try),
          (eq, "$ccc_fuck_stage", ":weak_style"),
          (val_sub,":agent_hp",":damage"),
        (try_end),

        (store_random_in_range,":damage",0,2),
        (store_agent_hit_points,":player_hp",":player_agent",1),
        (val_sub,":player_hp",":damage"),
        (try_begin),
          (eq,"$g_ccc_fuck_key_k",1),
          (val_sub,":player_hp",1),
        (try_end),
        (try_begin),
          (eq, "$ccc_fuck_stage", 11),  #11:icha
          (eq, "$ccc_fuck_atk_agent", ":player_agent"),
          (val_sub,":player_hp",":damage"),
        (try_end),
        (lt,":agent_hp",10000),
        (agent_set_hit_points,":player_agent",":player_hp",1),
      (try_end),
      
      (try_begin),
        (le,":agent_hp",0),
        (remove_agent,"$ccc_fuck_agent"),
        (assign,"$ccc_fuck_stage",101),#he dead
      (else_try),
        (assign,"$ccc_fuck_agent_ero_hp",":agent_hp"),
        (try_begin),
          (le,"$ccc_fuck_agent_ero_hp",50),
          (store_random_in_range,":random", 0, 2),
          (try_begin),
            (eq,":random",0),
            (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
          (try_end),
        (else_try),
          (le,"$ccc_fuck_agent_ero_hp",20),
          (call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),
        (try_end),
      (try_end),
      
      (try_begin),
        (le,":player_hp",0),
        (remove_agent,":player_agent"),
        (assign,"$ccc_fuck_stage",100), #dead
      (try_end),
      ## CC-D end
  ]),

  (1, 0, 0, 
  [
    (ge,"$ccc_fuck_stage",100),
    (store_mission_timer_c,":time_c"),
           (try_begin),
      (ge,":time_c",20),
      (mission_cam_set_screen_color, 0xFF000000),
      (mission_cam_animate_to_screen_color, 0x00000000, 3000),
      (reset_mission_timer_c),
    (else_try),
      (ge,":time_c",5),
      (show_object_details_overlay, 1),
      (mission_enable_talk),
      (assign,"$ccc_fuck_agent",reg1),
      (agent_get_troop_id,":troop_no","$ccc_fuck_agent"),
      (store_mission_timer_a,":time_a"),
      (call_script,"script_ccc_mission_fuck_score",":troop_no",":time_a"),
      #(finish_mission,0),
    (try_end),
  ],[]),

  (0.4, 0, 0, 
  [
    (gt,"$ccc_fuck_stage",0),
    (le,"$ccc_fuck_agent_ero_hp",10),
    (agent_is_alive,"$ccc_fuck_agent"),
    ## CC-D begin: extra wrestling
    (assign, ":continue", 1),
    (store_mission_timer_b, ":time_b"),
    (try_begin),
      (eq, "$ccc_fuck_stage", 99),
      (ge, ":time_b", 12),  # fire after about 12sec from key-x down
      (assign, ":continue", 0),
    (try_end),
    (this_or_next|lt,"$ccc_fuck_stage",99),
    (eq, ":continue", 1),
    ## CC-D end
  ],[(call_script,"script_ccc_ero_sound","$ccc_fuck_def_agent"),]),

    ## CC-D begin: camera integrate
    #custom_commander_camera,
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
]),

("ccc_cave_hide_house_council_room",0,-1,"Cave hide house council room",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (1,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (2,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (3,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (4,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (6,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (7,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (8,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (9,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (10,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (11,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (12,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (13,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (14,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (15,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (16,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (17,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (18,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (19,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (20,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (21,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (22,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (23,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (24,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (25,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (26,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (27,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (28,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (29,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (30,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (31,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (32,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (33,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (34,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (35,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (36,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (37,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (38,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (39,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (40,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (41,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (42,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (43,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (44,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (45,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (46,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (47,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (48,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (49,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (50,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (51,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (52,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (53,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (54,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (55,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (56,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (57,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (58,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (59,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (60,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (61,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (62,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (63,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (64,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (65,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (66,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (67,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (68,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (69,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (70,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (71,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (72,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (73,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (74,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (75,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (76,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (77,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (78,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (79,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (80,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (81,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (82,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (83,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (84,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (85,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (86,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (87,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (88,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (89,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (90,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (91,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (92,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (93,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (94,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (95,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (96,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (97,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (98,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (99,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (100,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (101,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (102,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (103,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (104,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (105,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (106,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (107,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (108,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (109,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (110,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (111,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (112,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (113,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (114,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (115,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (116,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (117,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (118,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (119,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (120,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (121,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (122,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (123,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (124,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (125,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (126,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (127,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(assign,"$g_ccc_scens_use_door",0),(set_trigger_result,1)], []),

    (1, 0, ti_once, [], [
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (assign,"$g_ccc_fuck_flag",0),
    ]),
## CC-D begin: default stand anim
#    (ti_on_agent_spawn, 1, 0, [
#      (store_trigger_param_1, ":agent_no"),
#      (try_begin),
#        (agent_get_position, pos3, ":agent_no"),
#        (try_for_range, ":entry_no", 6, 32),  #on chair EP 6-31
#          (entry_point_get_position, pos4, ":entry_no"),
#          (get_distance_between_positions, ":distance", pos3, pos4),
#          (lt, ":distance", 20),
#          (agent_set_stand_animation, ":agent_no", "anim_sitting_low"),
#          (agent_set_animation, ":agent_no", "anim_sitting_low"),
#          (store_random_in_range, ":r", 0, 300),
#          (agent_set_animation_progress, ":agent_no", ":r"),
#        (try_end),
#      (try_end),
#    ],[]),
    (ti_on_agent_spawn, 1, 0, [
      (store_trigger_param_1, ":agent_no"),
      (try_begin),
        (neg|agent_is_non_player, ":agent_no"),
        (agent_set_stand_animation, ":agent_no", "anim_stand"),
      (else_try),
        (agent_get_troop_id  ,":troop_no", ":agent_no"),
        (troop_get_type, ":is_female", ":troop_no"),
        (try_begin),
		  (this_or_next|eq, ":is_female", tf_elf_female),
		  (this_or_next|eq, ":is_female", tf_gaolu_female),
		  (this_or_next|eq, ":is_female", tf_girl),
          (eq, ":is_female", 1),
          (agent_set_stand_animation, ":agent_no", "anim_stand_lady"),
          (store_random_in_range, ":r", 0, 800),
          (agent_set_animation_progress, ":agent_no", ":r"),
        (else_try),
          (agent_set_stand_animation, ":agent_no", "anim_stand_lord"),
          (store_random_in_range, ":r", 0, 100),
          (agent_set_animation_progress, ":agent_no", ":r"),
        (try_end),
      (try_end),
    ],[]),
## CC-D end
    
    ccc_fuck_come_on_key_v,
    ## CC-D begin: camera integrate
    #custom_commander_camera,
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
]),

## CC-D begin
("ccd_cave_hide_house_training_room",0,-1,"Cave hide house training room",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (1,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (2,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (3,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
  (5,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (6,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,aif_start_alarmed,1,[itm_heavy_practice_sword]),
  (7,mtef_visitor_source|mtef_team_0,af_override_weapons|af_override_horse,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
  (8,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (9,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
  (10,mtef_visitor_source,af_override_weapons|af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(assign,"$g_ccc_scens_use_door",0),(set_trigger_result,1)], []),

    (1, 0, ti_once, [], [
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (assign,"$g_ccc_fuck_flag",0),
    ]),

    (1, 0, ti_once, [], [
      (assign, ":cur_entry", 3),
      (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
      (try_for_range, ":i_slot", 10, ":inv_cap"),
        (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
        (ge, ":item", 0),
        (item_get_type, ":type", ":item"),
        (is_between, ":type", itp_type_one_handed_wpn, itp_type_arrows),
        (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
        (entry_point_get_position, pos1, ":cur_entry"),
        (set_spawn_position, pos1),
        (spawn_item, ":item", ":imod"),
        (assign, ":inv_cap", ":i_slot"), #break loop
      (try_end),
    ]),

    (ti_on_agent_spawn, 0, 0, [], [
      (store_trigger_param_1, ":agent_no"),
      
      (get_player_agent_no, ":player_agent"),
      (neq, ":agent_no", ":player_agent"),
      
      (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, -1),
      (agent_get_position, pos1, ":agent_no"),
      (try_for_range, ":cur_entry_point", 0, 11),
        (entry_point_get_position, pos2, ":cur_entry_point"),
        (get_sq_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 100), #10 cm
        (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, ":cur_entry_point"),
      (try_end),
      
      (try_begin),
        #melee
        (agent_slot_eq, ":agent_no", slot_agent_spawn_entry_point, 6),
        (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
        (call_script, "script_ccd_get_troop_nearest_prop", ":agent_no", "spr_dummy_a_undestructable"),
        (assign, ":target_prop", reg0),
        (scene_prop_set_team, ":target_prop", 1),
        (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, ":target_prop"),
      (else_try),
        #range
        (agent_slot_eq, ":agent_no", slot_agent_spawn_entry_point, 7),
        (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
        (call_script, "script_ccd_get_troop_nearest_prop", ":agent_no", "spr_archery_target_with_hit_a"),
        (assign, ":target_prop", reg0),
        (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, ":target_prop"),
      (try_end),
    ]),

    (0, 0, 0, [
      (store_mission_timer_a, ":cur_time"),
      (try_for_agents, ":cur_agent"),
        (try_begin),
          #melee
          (agent_slot_eq, ":cur_agent", slot_agent_spawn_entry_point, 6),
          (agent_get_troop_id, ":troop_id", ":cur_agent"),
          (neq, "$g_talk_troop", ":troop_id"),
          (try_begin),
            (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
            (neq, ":cur_wielded_item", "itm_heavy_practice_sword"),
            (agent_set_wielded_item, ":cur_agent", "itm_heavy_practice_sword"),
          (else_try),
            (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
            (prop_instance_get_position, pos1, ":look_spr"),
            (position_move_z, pos1, 150),
            (agent_set_look_target_position, ":cur_agent", pos1),
            (try_begin),
              (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
              (store_random_in_range,":random", 0, 4),
              (agent_set_attack_action, ":cur_agent", ":random", 0), 
              (store_random_in_range, ":next_action_time", 3, 8),
              (val_add, ":next_action_time", ":cur_time"),
              (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
            (try_end),
          (try_end),
        (else_try),
          #range
          (agent_slot_eq, ":cur_agent", slot_agent_spawn_entry_point, 7),
          (agent_get_troop_id, ":troop_id", ":cur_agent"),
          (neq, "$g_talk_troop", ":troop_id"),
          (try_begin),
            (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
            (neq, ":cur_wielded_item", "itm_practice_bow"),
            (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
          (else_try),
            (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
            (prop_instance_get_position, pos1, ":look_spr"),
            (position_move_z, pos1, 100),
            (agent_set_look_target_position, ":cur_agent", pos1),
            (try_begin),
              (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
              (agent_set_attack_action, ":cur_agent", 0),
              (store_random_in_range, ":next_action_time", 5, 10),
              (val_add, ":next_action_time", ":cur_time"),
              (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
    ], []),

    (10, 0, 0, [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":cur_agent"),
        (agent_slot_eq, ":cur_agent", slot_agent_spawn_entry_point, 7),
        (agent_is_human, ":cur_agent"),
        (neq, ":cur_agent", ":player_agent"),
        (agent_refill_ammo, ":cur_agent"),
      (try_end),
    ], []),

    (300, 0, ti_once, [(is_currently_night)], [
      (store_random_in_range, ":random", 0, 100),
      (try_begin),
        (lt, ":random", 3),
        (assign, ":cur_entry", 4),
        (get_player_agent_no, ":player_agent"),
        (call_script, "script_ccd_get_ep_nearest_prop", ":cur_entry", "spr_ccd_target_helm"),
        (prop_instance_receive_damage, reg0, ":player_agent", 10000000),
        (scene_prop_set_visibility, reg0, 0),
        (call_script, "script_ccd_get_ep_nearest_prop", ":cur_entry", "spr_ccd_target_armor"),
        (prop_instance_receive_damage, reg0, ":player_agent", 10000000),
        (scene_prop_set_visibility, reg0, 0),
        (entry_point_get_position, pos1, ":cur_entry"),
        (set_spawn_position, pos1),
        (set_visitor, ":cur_entry", "trp_ccc_kingdom_1_lord_copy"),
        (play_sound_at_position, "snd_gong", pos1),
      (try_end),
    ]),

    (4, 0, ti_once, [(main_hero_fallen)], [
      (finish_mission),
    ]),

    ccc_item_damage_effect,
    ccc_fuck_come_on_key_v,
    deploy_pavise,
    cry_victory,
    cry_victory_call,
    cry_command,
    horse_whistle,
    ccd_equipped_item_boost,
    ccd_dog_kill,
    ccd_init_variables,
    ccd_gunsight,
    ccd_camera_toggle,
    ccd_free_camera,
    ccd_solid_camera_toggle,
    ccd_solid_camera_main,
    ccd_solid_camera_cruise,
    common_auto_fire_held,
    common_auto_fire_clicked,
    common_auto_fire,
]),
## CC-D end

#duel
("ccc_duel",mtf_battle_mode,charge,"Duel.",
[
    (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]), 
    (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]), 
    (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]), 
    (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]), 
    (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]), 
    (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]), 
    (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]), 
    (7,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]), 
],
[
    common_battle_init_banner,
    common_inventory_not_available,
    ccc_battle_init,
    ccc_help_msg,

    (ti_tab_pressed, 0, 0, [(question_box,"@Do you surrender?"),], []),
    
    (ti_question_answered, 0, 0, [],
    [
      (store_trigger_param_1,":answer"),
      (eq,":answer",0),
             (try_begin),
        (this_or_next|eq,"$g_ccc_duel_type",6),
        (eq,"$g_ccc_duel_type",7),
        (assign,"$g_ccc_duel_result",3),
      (else_try),
        (assign,"$g_ccc_duel_result",2),
         (try_end),
      (display_message,"@You are loser."),
      ## CC-D begin: over hp fix
      (call_script, "script_ccc_last_agent_hp_fix"),
      ## CC-D end
      (finish_mission),
         ]),
      
    (ti_before_mission_start, 0, ti_once, [], [
      (assign,"$g_ccc_duel_result",0),
      (assign,"$ccc_duel_stage",0),
      (assign,"$ccc_duel_round",1),
      (assign,"$g_ccc_duel_rival",0),
    ]),
    
    (ti_on_agent_spawn, 0, 0, [],
       [
       (store_trigger_param_1, ":agent_no"),
       (get_player_agent_no, ":player_agent"),

       (try_begin),
         (eq,"$g_ccc_duel_rival",0),
         (agent_is_human,":agent_no"),
         (neq,":agent_no",":player_agent"),
         (assign,"$g_ccc_duel_rival",":agent_no"),
       (try_end),

    ]),
    
    (0.7, 0, ti_once, [], [
      (assign,"$ccc_help_msg_str","str_ccc_help_message_duel"),
      (store_current_scene, ":cur_scene"),
      (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      (assign,"$g_ccc_scens_use_door",":cur_scene"),
      (get_player_agent_no, ":player_agent"),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_multiplayer_fight),

      (try_begin),
        (eq,"$g_ccc_duel_type",1),
        (assign,reg0,"$ccc_duel_round"),
        (display_message,"@Start Round {reg0}"),
      (else_try),
        (eq,"$g_ccc_duel_type",3),
        (agent_get_position,pos1,":player_agent"),
        (position_move_y,pos1,1000,0),
        (position_rotate_z,pos1,180),
        (agent_set_position,"$g_ccc_duel_rival",pos1),
        (agent_set_scripted_destination,"$g_ccc_duel_rival",pos1), 
        (display_message,"@Duel Start"),
      (else_try),
        (eq,"$g_ccc_duel_type",6),
        (entry_point_get_position, pos54, 4),
        (agent_set_speed_limit,"$g_ccc_duel_rival",25),
        (agent_set_scripted_destination,"$g_ccc_duel_rival",pos54), 
        (agent_set_speed_limit,"$g_ccc_duel_rival",20),         
        (display_message,"@Catch the runaway"),
      (else_try),
        (eq,"$g_ccc_duel_type",7),
        (agent_set_team,":player_agent",0),
        (agent_set_team,"$g_ccc_duel_rival",1),
        (team_set_relation, 0, 1, -1),
        (display_message,"@Catch the runaway"),
      (else_try),
        (display_message,"@Duel Start"),
           (try_end),
      (play_sound, "snd_gong"),
    ]),

    (ti_on_agent_killed_or_wounded, 0, 0, [],[
      (store_trigger_param_1, ":dead_agent_no"),
      #(store_trigger_param_2, ":killer_agent_no"),

      (agent_get_troop_id,":troop_no","$g_ccc_duel_rival"),
      (get_player_agent_no, ":player_agent"),
           (try_begin),
        (agent_is_human, ":dead_agent_no"),
        (eq,":dead_agent_no","$g_ccc_duel_rival"),
        (assign,"$g_ccc_duel_result",1),
        (display_message,"@You Win"),
        (reset_mission_timer_c),
           (else_try),
        (agent_is_human, ":dead_agent_no"),
        (eq,":dead_agent_no",":player_agent"),
        (assign,"$g_ccc_duel_result",2),
        (display_message,"@You Lost"),
        (store_random_in_range,":r",0,4),#CC-C_DEBUG
        (try_begin),
          (eq,":r",0), #run away
          (troop_slot_ge,":troop_no",slot_troop_prisoner_of_party, 0),
          (assign,"$g_ccc_duel_result",3),
          (agent_start_running_away, "$g_ccc_duel_rival"),
           (try_end),
        (reset_mission_timer_c),
         (try_end),
         ]),

    #finish
    (1,0,0,[(gt,"$g_ccc_duel_result",0),],
       [
      (store_mission_timer_c,":time_c"),
           (try_begin),
        (gt,":time_c",5),
        ## CC-D begin: over hp fix
        (call_script, "script_ccc_last_agent_hp_fix"),
        ## CC-D end
        (finish_mission),
           (try_end),
    ]),
    
    (2,0,0,[(neq,"$g_ccc_duel_type",6),(neq,"$g_ccc_duel_type",3),(eq,"$ccc_duel_stage",0),(eq,"$g_ccc_duel_result",0),],
    [(team_give_order, 1, grc_everyone, mordr_charge),]),

    #run away 7
    (4,0,ti_once,
    [(eq,"$g_ccc_duel_type",7),],[(agent_start_running_away, "$g_ccc_duel_rival"),]),

    #run away
    (2,0,ti_once,
    [
      (eq,"$g_ccc_duel_result",0),
      (agent_is_routed,"$g_ccc_duel_rival"),
    ],
    [
      (reset_mission_timer_c),
      (assign,"$g_ccc_duel_result",3),
    ]),
    
    #run away 6
    (10,0,ti_once,[(eq,"$g_ccc_duel_type",6),(eq,"$ccc_duel_stage",0),(eq,"$g_ccc_duel_result",0),],
    [
        (agent_set_speed_limit,"$g_ccc_duel_rival",30), 
    ]),

    #run away 6
    (4,0,0,[(eq,"$g_ccc_duel_type",6),(eq,"$ccc_duel_stage",0),(eq,"$g_ccc_duel_result",0),],
    [
        (agent_get_position,pos1,"$g_ccc_duel_rival"),
        (entry_point_get_position, pos54, 4),
        (get_distance_between_positions,":dist",pos1,pos54),
           (try_begin),
          (lt,":dist",20000),
          (agent_start_running_away, "$g_ccc_duel_rival"),
          (agent_set_speed_limit,"$g_ccc_duel_rival",99),
           (try_end),
         ]),

    (0,0,0,[(eq,"$g_ccc_duel_type",1),(eq,"$ccc_duel_stage",0),(eq,"$g_ccc_duel_result",0),],
       [
      (get_player_agent_no, ":player_agent"),
      (call_script,"script_ccc_agent_check_nearest",":player_agent"),
      (assign,":dist",reg0),
      #(assign,":rival",reg1),

           (try_begin),
        (lt,":dist",200),
        (reset_mission_timer_c),
        (assign,"$ccc_duel_stage",1),
           (try_end),
    ]),

    (0,0,0,[(eq,"$g_ccc_duel_type",1),(eq,"$ccc_duel_stage",1),(eq,"$g_ccc_duel_result",0),],
    [
      (store_mission_timer_c,":time_c"),
      (try_begin),
        (gt,":time_c",3),
        (set_fixed_point_multiplier, 100),
        (get_player_agent_no, ":player_agent"),

        (set_fixed_point_multiplier, 100),

        (entry_point_get_position, pos53, 3),
        (entry_point_get_position, pos54, 4),
         
        (position_move_y,pos53,11000,0),
        (position_move_y,pos54,11000,0),
        
        (agent_get_horse,":player_horse",":player_agent"),
        (agent_get_horse,":rival_horse","$g_ccc_duel_rival"),
        
        (store_mod,":return_flag","$ccc_duel_round",2),
           (try_begin),
          (eq,":return_flag",1),
          #(agent_set_scripted_destination,":player_horse",pos53),
          #(agent_set_scripted_destination,":rival_horse",pos54),
          (agent_set_position,":player_horse",pos53),
          (agent_set_position,":rival_horse",pos54),
           (else_try),
          #(agent_set_scripted_destination,":player_horse",pos53),
          #(agent_set_scripted_destination,":rival_horse",pos54),
          (agent_set_position,":player_horse",pos54),
          (agent_set_position,":rival_horse",pos53),
           (try_end),
        (assign,"$ccc_duel_stage",2),
      (try_end),
    ]),

    (1,0,0,[(eq,"$g_ccc_duel_type",1),(eq,"$ccc_duel_stage",2),(eq,"$g_ccc_duel_result",0),],
    [
      (get_player_agent_no, ":player_agent"),
      (call_script,"script_ccc_agent_check_nearest",":player_agent"),
      (assign,":dist",reg0),

      (try_begin),
        (gt,":dist",12000),
        (agent_clear_scripted_mode,":player_agent"),
        (agent_clear_scripted_mode,"$g_ccc_duel_rival"),
        (team_give_order, 1, grc_everyone, mordr_charge),
        (val_add,"$ccc_duel_round",1),
        (assign,reg0,"$ccc_duel_round"),
        (display_message,"@Start Round {reg0}"),
        (play_sound, "snd_gong"),
        (assign,"$ccc_duel_stage",0),
         (try_end),
         ]),

    ## CC-D begin
    #custom_commander_init_hero_begin_xp,
    #custom_commander_give_hero_extra_xp,

    #custom_commander_init_banners_on_back,
    #custom_commander_clear_banners_on_back,
    #custom_commander_init_hero_begin_xp,
    #custom_commander_give_hero_extra_xp,
    custom_commander_change_weather,
    #ccc_init_troop_hp,
    ## CC-D end
    (ti_on_agent_spawn, 0, 0, [(this_or_next|eq,"$g_ccc_duel_type",5),(eq,"$g_ccc_duel_type",6),],
       [
      (store_trigger_param_1, ":agent_no"),
      ## CC-D begin: over hp fix
      #(get_player_agent_no, ":player_agent"),
      
      (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 0),
         (try_begin),
        #(neq, ":agent_no", ":player_agent"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        
        (call_script, "script_ccc_get_troop_max_hp", ":troop_no"),
        (assign, ":max_hp", reg0),
        
        #(agent_set_slot, ":agent_no", slot_agent_backup_hp, ":max_hp"),
        (agent_set_slot, ":agent_no", slot_agent_max_hp, ":max_hp"),
        
        (call_script, "script_get_troop_max_hp", ":troop_no"),
        (assign, ":sys_max_hp", reg0),
        
        (agent_set_slot, ":agent_no", slot_agent_sys_max_hp, ":sys_max_hp"),
        
        #(try_begin),
        #  (lt,":sys_max_hp",":max_hp"),
        #  (agent_set_hit_points, ":agent_no", ":max_hp", 1),
        # (try_end),
        
         (try_begin),
          #(gt,":max_hp",":sys_max_hp"),
          (neq, ":max_hp", ":sys_max_hp"),
          (agent_set_slot, ":agent_no", slot_agent_over_hp_flag, 1),
          (store_agent_hit_points, ":now_hp", ":agent_no", 1),
          (store_agent_hit_points,":per",":agent_no",0),
          (agent_set_max_hit_points, ":agent_no", ":max_hp", 1),
          (try_begin),
            (le,":now_hp",":sys_max_hp"),
            (agent_set_hit_points, ":agent_no", ":per", 0),
          (else_try),
            (agent_set_hit_points, ":agent_no", ":now_hp", 1),
          (try_end),
          #(agent_set_no_death_knock_down_only, ":agent_no", 1),
      ## CC-D end
        (try_end),
         (try_end),
         ]),
        
    #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    #ccc_agent_refill_hp_when_knocked_down,
    
    ## CC-D begin
    #custom_commander_agent_weapons_backup,
    ## CC-D end
    custom_commander_agent_weapons_fix,
    
    # Battle panel
    common_battle_order_panel,
    common_battle_order_panel_tick,
	common_battle_order_panel_tick_low_freq,
]),

#benchmark option off
("cave_benchmark_option_off",mtf_battle_mode,charge,"Cave benchmark option off.",
[
    (0,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (2,mtef_visitor_source|mtef_team_2,0,aif_start_alarmed,20,[]),
    (3,mtef_visitor_source|mtef_team_2,0,aif_start_alarmed,20,[]),
],
[
    (ti_before_mission_start, 0, 0, [],[
      (assign,"$ccc_score",0),
      (assign,"$ccc_unit_num",0),
    ]),

    (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

    (10, 0, 0, [], [
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_crusaders", 6),
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_elite_knight", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_heavy_musket", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_conquistador", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_fencer", 6),
      (add_visitors_to_current_scene, 0, "trp_ccc_swadian_lancer_knight", 3),
      (add_visitors_to_current_scene, 0, "trp_swadian_knight", 3),


      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_amir", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_elite_guard", 6),
      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_camel_dragoon", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_elite_yeniceri", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_syougun", 6),
      (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_kiba_musya", 3),
      (add_visitors_to_current_scene, 3, "trp_sarranid_mamluke", 3),
    ]),
    
    (ti_on_agent_spawn, 0, 0, [],[
      (store_trigger_param_1, ":agent_no"),
    
         (try_begin),
        #(agent_is_human, ":agent_no"),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (val_add,"$ccc_unit_num",1),
         (try_end),
         ]),

    #common_battle_order_panel,
    #common_battle_order_panel_tick,
      
    (0, 0, 0, [(gt,"$ccc_score",-1),], [
      (val_add,"$ccc_score",1),
         ]),

    (0.1, 0, 0, [(gt,"$ccc_score",0),], [
      (val_sub,"$ccc_score",1),
    ]),

    (5, 0, 0, [(gt,"$ccc_score",-1),], [
      (assign,reg1,"$ccc_score"),
      (store_mission_timer_a,reg2),
      (assign,reg3,"$ccc_unit_num"),
      (display_message,"@Score:{reg1} Mission_time:{reg2}sec Unit:{reg3}"),
    ]),

    (0, 0, ti_once, 
       [
      (store_mission_timer_a,":time_a"),
      (ge,":time_a",120),
    ], 
    [
      (assign,reg1,"$ccc_score"),
      (store_mission_timer_a,reg2),
      (assign,reg3,"$ccc_unit_num"),
      (display_message,"@Last Score:{reg1} Mission_time:{reg2}sec Unit:{reg3} Option OFF Mode"),
      (display_message,"@Please push tab key to leave."),
      (assign,"$ccc_score",-1),
    ]),
]),

#benchmark option on
("cave_benchmark_option_on",mtf_battle_mode,charge,"Cave benchmark option ON.",
[
    (0,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (2,mtef_visitor_source|mtef_team_2,0,aif_start_alarmed,20,[]),
    (3,mtef_visitor_source|mtef_team_2,0,aif_start_alarmed,20,[]),
],
[
    (ti_before_mission_start, 0, 0, [],[
      (assign,"$ccc_score",0),
      (assign,"$ccc_unit_num",0),
      (reset_mission_timer_a),
    ]),

    (ti_tab_pressed, 0, 0, [(set_trigger_result,1),
      ## CC-D begin: over hp fix
      (call_script, "script_ccc_last_agent_hp_fix"),
      ## CC-D end
    ], []),

    (10, 0, 0, [], [
      (add_visitors_to_current_scene, 3, "trp_ccc_valkyrie_npc3", 6),
      (add_visitors_to_current_scene, 3, "trp_ccc_valkyrie_npc2", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_valkyrie_npc1", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_sister_npc3", 3),
      (add_visitors_to_current_scene, 3, "trp_ccc_sister_npc1", 6),


      (add_visitors_to_current_scene, 0, "trp_ccc_yamato_npc7", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_yamato_npc4", 6),
      (add_visitors_to_current_scene, 0, "trp_ccc_yamato_npc8", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_yamato_npc1", 3),
      (add_visitors_to_current_scene, 0, "trp_ccc_yamato_npc3", 6),

	  
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_crusaders", 6),
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_elite_knight", 3),
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_heavy_musket", 3),
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_conquistador", 3),
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_fencer", 6),
      # (add_visitors_to_current_scene, 0, "trp_ccc_swadian_lancer_knight", 3),
      # (add_visitors_to_current_scene, 0, "trp_swadian_knight", 3),


      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_amir", 3),
      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_elite_guard", 6),
      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_camel_dragoon", 3),
      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_elite_yeniceri", 3),
      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_syougun", 6),
      # (add_visitors_to_current_scene, 3, "trp_ccc_sarranid_kiba_musya", 3),
      # (add_visitors_to_current_scene, 3, "trp_sarranid_mamluke", 3),
    ]),
    
    (ti_on_agent_spawn, 0, 0, [],
    [
      (store_trigger_param_1, ":agent_no"),
    
      (try_begin),
        #(agent_is_human, ":agent_no"),
        #(agent_set_no_death_knock_down_only, ":agent_no", 1), occc bug check
        (val_add,"$ccc_unit_num",1),
      (try_end),
    ]),
	##occc test
	    
	#ccc_item_damage_effect,

    ## CC-D begin
    # cry_victory,
    # cry_victory_call,
    # cry_command,
    # horse_whistle,
    # ccd_equipped_item_boost,
    # ccd_dog_kill,
    # ccd_init_variables,
    # ccd_gunsight,
    # common_auto_fire_held,
    # common_auto_fire_clicked,
    # common_auto_fire,
    # ## CC-D begin: camera integrate
    # #custom_commander_camera,
    # ccd_init_variables,
    # ccd_camera_toggle,
    # ccd_free_camera,
    # ccd_solid_camera_toggle,
    # ccd_solid_camera_main,
    # ccd_solid_camera_cruise,
    # ## CC-D end
    # #custom_commander_init_hero_begin_xp,
    # #custom_commander_give_hero_extra_xp,
    # custom_commander_change_weather,
    # custom_commander_npc_proficiency_limit,
    # custom_commander_npc_raise_proficiency,
    # #custom_commander_init_banners_on_back,
    # #custom_commander_clear_banners_on_back,
    # #custom_commander_hero_wounded_by_player,
    # dplmc_horse_speed,
    # deploy_pavise,
    # ## CC-D end
    # ccc_init_troop_hp,
    # #ccc_agent_refill_hp,  ## CC-D over_hp_fix
    # #ccc_agent_refill_hp_when_knocked_down,
    # ccc_healing_item_used,
    # ccc_player_ai_flag,
    # ccc_agent_weapons_set,
    # ccc_agent_weapons_change,
    # ccc_agent_shout_on_mount,
    # #ccc_agent_start_formation,
    # ccc_stand_on,
    # #ccc_stand_off,  ## CC-D del: integrate ccc_stand_on
    # ccc_weapons_priority_all,
    # ccc_weapons_priority_sword,
    # ccc_weapons_priority_polearm,
    # ccc_weapons_priority_range,
    # ccc_weapons_priority_melee,

    common_battle_order_panel,
    common_battle_order_panel_tick,
	common_battle_order_panel_tick_low_freq,
    
    (0, 0, 0, [(gt,"$ccc_score",-1),], [
      (val_add,"$ccc_score",1),
    ]),
    
    (0.1, 0, 0, [(gt,"$ccc_score",0),], [
      (val_sub,"$ccc_score",1),
    ]),

    (5, 0, 0, [(gt,"$ccc_score",-1),], [
      (assign,reg1,"$ccc_score"),
      (store_mission_timer_a,reg2),
      (assign,reg3,"$ccc_unit_num"),
      (display_message,"@Score:{reg1} Mission_time:{reg2}sec Unit:{reg3}"),
    ]),

    (0, 0, ti_once, 
    [
      (store_mission_timer_a,":time_a"),
      (ge,":time_a",120),
    ], 
    [
      (assign,reg1,"$ccc_score"),
      (store_mission_timer_a,reg2),
      (assign,reg3,"$ccc_unit_num"),
      (display_message,"@Last Score:{reg1} Mission_time:{reg2}sec Unit:{reg3} Option ON Mode"),
      (display_message,"@Please push tab key to leave."),
      (assign,"$ccc_score",-1),
    ]),
]+custom_commander_commom_triggers),

("ccc_cave_scene_test",mtf_battle_mode,charge,"scene_test",
[
    (0,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(set_trigger_result,1)], []),

    (1, 0, ti_once, [], [
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
    ]),
    
    ccc_fuck_come_on_key_v,
    ## CC-D begin: camera integrate
    #custom_commander_camera,
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
    common_battle_order_panel,
    common_battle_order_panel_tick,
	common_battle_order_panel_tick_low_freq,
    ccd_fire_damage,  ## CC-D add
    ccd_fire_spawn,  ## CC-D add
    ccd_darknight_caller,  ## CC-D add
    ccd_set_scene_item,  ## CC-D add
    ## CC-D begin: set skybox
    (ti_before_mission_start, 0, 0, [(neq, "$temp", -1),], [
      (assign, ":i_hdr", 0),
      (try_begin),
        (neq, "$temp", 0),
        (store_mod, ":i_hdr", "$temp", 2),
      (try_end),
      (try_begin),
        (eq, ":i_hdr", 0),
        (store_add, ":i_hdr", "$temp", 1),
        (set_skybox, "$temp", ":i_hdr"),
      (else_try),
        (set_skybox, "$temp", "$temp"),
      (try_end),
    ]),
    ## CC-D end
]),
#CC-C end
## CC-D begin
("ccd_bench_endless_war", mtf_battle_mode, charge, "The World of Shura Demo",
[
    (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,200,[]),
    (1,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,200,[]),
    (2,mtef_visitor_source|mtef_team_2,0,aif_start_alarmed,200,[]),
    (3,mtef_visitor_source|mtef_team_3,0,aif_start_alarmed,200,[]),
    (4,mtef_visitor_source|mtef_team_4,0,aif_start_alarmed,200,[]),
    (5,mtef_visitor_source|mtef_team_5,0,aif_start_alarmed,200,[]),
],
[
    (ti_after_mission_start, 0, ti_once, [], [
      (music_set_situation, mtf_sit_fight),
      (reset_mission_timer_a),
      (team_set_slot, 0, slot_team_ccd_score_on, 1),
      (team_set_relation, 1, 5, 1),
      (team_set_relation, 2, 5, 1),
      (team_set_relation, 3, 5, 1),
      (team_set_relation, 4, 5, 1),
      (start_presentation, "prsnt_ccd_display_bench_score"),
      (display_message,"@Please push tab key to leave."),
    ]),
    
    (ti_tab_pressed, 0, 0, [
      (set_trigger_result, 1),
      (call_script, "script_ccc_last_agent_hp_fix"),
    ], []),

    (ti_on_agent_spawn, 0, 0, [], [
      (store_trigger_param_1, ":agent_no"),
      (try_begin),
        (agent_is_non_player, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_team, ":team", ":agent_no"),
        (team_get_slot, ":count", ":team", slot_team_ccd_total_size),
        (val_add, ":count", 1),
        (team_set_slot, ":team", slot_team_ccd_total_size, ":count"),
        (team_get_slot, ":count", ":team", slot_team_ccd_cur_size),
        (val_add, ":count", 1),
        (team_set_slot, ":team", slot_team_ccd_cur_size, ":count"),
      (else_try),
        (neg|agent_is_non_player, ":agent_no"),
        (this_or_next|eq, "$ccc_option_obj_2", 0),
        (eq, "$ccc_option_obj_2", 3),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (eq, "$ccc_option_obj_2", 3),
        (agent_set_visibility, ":agent_no", 0),
      (try_end),
    ]),

    (ti_on_agent_killed_or_wounded, 0, 0, [],[
      (store_trigger_param_1, ":dead_agent_no"),
      #(store_trigger_param_2, ":killer_agent_no"),
      
      (try_begin),
        (agent_get_team, ":team", ":dead_agent_no"),
        (agent_is_non_player, ":dead_agent_no"),
        (agent_is_human, ":dead_agent_no"),
        (team_get_slot, ":count", ":team", slot_team_ccd_cur_size),
        (val_sub, ":count", 1),
        (team_set_slot, ":team", slot_team_ccd_cur_size, ":count"),
      (else_try),
        (neg|agent_is_non_player, ":dead_agent_no"),
        (team_get_slot, ":count", ":team", slot_team_ccd_player_down),
        (val_add, ":count", 1),
        (team_set_slot, 0, slot_team_ccd_player_down, ":count"),
      (try_end),
    ]),

    (30, 0, 0, [
      (main_hero_fallen),
      (eq, "$ccc_option_obj_2", 1),
    ], [
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":team", ":player_agent"),
      (add_visitors_to_current_scene, ":team", "trp_player", 1),
    ]),

    (10, 0, 0, [], [
      (try_for_range, ":team", 1, 5),
        (try_begin),
          (eq, ":team", 1),
          (assign, ":force", "$ccc_option_obj_3"),
        (else_try),
          (eq, ":team", 2),
          (assign, ":force", "$ccc_option_obj_4"),
        (else_try),
          (eq, ":team", 3),
          (assign, ":force", "$ccc_option_obj_5"),
        (else_try),
          (eq, ":team", 4),
          (assign, ":force", "$ccc_option_obj_6"),
        (try_end),
        (gt, ":force", 0),
        
        (store_mul, ":limit", 15, "$ccc_option_obj_7"),
        (team_get_slot, ":count", ":team", slot_team_ccd_cur_size),
        (lt, ":count", ":limit"),
        
        (team_get_slot, ":count", ":team", slot_team_ccd_wave_count),
        (val_add, ":count", 1),
        (team_set_slot, ":team", slot_team_ccd_wave_count, ":count"),
        
        (try_begin),
          (eq, ":force", 10),
          (add_visitors_to_current_scene, ":team", "trp_ccc_swadian_elite_knight", 12),
          (add_visitors_to_current_scene, ":team", "trp_ccc_swadian_lancer_knight", 8),
        (else_try),
          (eq, ":force", 9),
          (add_visitors_to_current_scene, ":team", "trp_ccc_vaegir_grenadier_inf", 10),
          (add_visitors_to_current_scene, ":team", "trp_ccc_vaegir_red_coat_line_inf", 10),
          (add_visitors_to_current_scene, ":team", "trp_occc_vaegir_cavalry_grenadier", 4),
        (else_try),
          (eq, ":force", 8),
          (add_visitors_to_current_scene, ":team", "trp_ccc_khergit_manghit", 20),
          (add_visitors_to_current_scene, ":team", "trp_ccc_khergit_noyan", 4),
        (else_try),
          (eq, ":force", 7),
          (add_visitors_to_current_scene, ":team", "trp_ccc_nord_elite_halberd_huscarl", 6),
          (add_visitors_to_current_scene, ":team", "trp_ccc_nord_halberd_huscarl", 10),
          (add_visitors_to_current_scene, ":team", "trp_ccc_nord_elite_long_bow", 4),
        (else_try),
          (eq, ":force", 6),
          (add_visitors_to_current_scene, ":team", "trp_occc_nord_berserk", 18),
          (add_visitors_to_current_scene, ":team", "trp_occc_nord_berserk_2", 8),
          (add_visitors_to_current_scene, ":team", "trp_ccc_nord_barbarian_legend_cave", 4),
        (else_try),
          (eq, ":force", 5),
          (add_visitors_to_current_scene, ":team", "trp_ccc_rhodok_triarii_spear", 1),
          (add_visitors_to_current_scene, ":team", "trp_ccc_rhodok_triarii", 27),
          (add_visitors_to_current_scene, ":team", "trp_ccc_rhodok_triarii_sling", 7),
        (else_try),
          (eq, ":force", 4),
          (add_visitors_to_current_scene, ":team", "trp_ccc_sarranid_amir", 16),
          (add_visitors_to_current_scene, ":team", "trp_ccc_sarranid_elite_yeniceri", 4),
        (else_try),
          (eq, ":force", 3),
          (add_visitors_to_current_scene, ":team", "trp_taikou_umanori_bushou", 16),
          (add_visitors_to_current_scene, ":team", "trp_taikou_bushou", 6),
        (else_try),
          (eq, ":force", 2),
          (add_visitors_to_current_scene, ":team", "trp_ccc_dark_knight_of_lancer", 6),
          (add_visitors_to_current_scene, ":team", "trp_ccc_dark_knight_of_round", 12),
        (else_try),
          (eq, ":force", 1),
          (add_visitors_to_current_scene, ":team", "trp_custom_knight", 10),
          (add_visitors_to_current_scene, ":team", "trp_custom_woman_knight", 10),
        (try_end),
      (try_end),
    ]),

    (300, 0, 0, [(eq, "$ccc_option_obj_8", 1),], [
      (try_for_range, ":team", 1, 5),
        (try_begin),
          (eq, ":team", 1),
          (assign, ":force", "$ccc_option_obj_3"),
        (else_try),
          (eq, ":team", 2),
          (assign, ":force", "$ccc_option_obj_4"),
        (else_try),
          (eq, ":team", 3),
          (assign, ":force", "$ccc_option_obj_5"),
        (else_try),
          (eq, ":team", 4),
          (assign, ":force", "$ccc_option_obj_6"),
        (try_end),
        (gt, ":force", 0),
        
        (try_begin),
          (eq, ":force", 10),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_1_lord_copy", 1),
        (else_try),
          (eq, ":force", 9),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_2_lord_copy", 1),
        (else_try),
          (eq, ":force", 8),
          (add_visitors_to_current_scene, ":team", "trp_ccc_knight_6_21_copy", 1),
        (else_try),
          (eq, ":force", 7),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_4_lord_copy", 1),
        (else_try),
          (eq, ":force", 6),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_4_lord_copy", 1),
        (else_try),
          (eq, ":force", 5),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_5_lord_copy", 1),
        (else_try),
          (eq, ":force", 4),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_6_lord_copy", 1),
        (else_try),
          (eq, ":force", 3),
          (add_visitors_to_current_scene, ":team", "trp_ccc_shougun_1", 1),
        (else_try),
          (eq, ":force", 2),
          (add_visitors_to_current_scene, ":team", "trp_ccc_kingdom_3_lord_copy", 1),
        (else_try),
          (eq, ":force", 1),
          (add_visitors_to_current_scene, ":team", "trp_ccd_valkyrie", 1),
        (try_end),
      (try_end),
    ]),

    (0, 0, 1, 
    [
      (key_is_down, key_h),
    ],
    [
      (try_begin),
        (team_slot_eq, 0, slot_team_ccd_score_on, 1),
        (team_set_slot, 0, slot_team_ccd_score_on, 0),
        (set_show_messages, 0),
      (else_try),
        (team_set_slot, 0, slot_team_ccd_score_on, 1),
        (set_show_messages, 1),
        (neg|is_presentation_active,"prsnt_ccd_display_bench_score"),
        (start_presentation, "prsnt_ccd_display_bench_score"),
      (try_end),
    ]),

    ccc_init_troop_hp,
    ccc_item_damage_effect,
    cry_victory,
    cry_victory_call,
    cry_command,
    horse_whistle,
    ccd_equipped_item_boost,
    ccd_dog_kill,
    ccd_init_variables,
    ccd_gunsight,
    ccd_camera_toggle,
    ccd_free_camera,
    ccd_solid_camera_toggle,
    ccd_solid_camera_main,
    ccd_solid_camera_cruise,
    common_auto_fire_held,
    common_auto_fire_clicked,
    common_auto_fire,
]),
## CC-D end
##occc start
    (
    "ship_battle",mtf_battle_mode,-1,
    "You close in and board the enemy ships",
    [(0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    (1,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    (2,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    #(3,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    #(4,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    #(5,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    #(6,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),     
    #(7,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,4,[]),
    (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    #(8,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    #(9,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    (12,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    #(13,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    #(14,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
    #(15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         #(agent_ai_set_aggressiveness,":agent_no",200),  ##CC-C add cave09  ## CC-D del
         (assign, ":initial_courage_score", 5000),
                  
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 35),
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700
         
         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"), 
                   
         (agent_get_party_id, ":agent_party", ":agent_no"),
         (ge, ":agent_party", 0), ## CC
         (party_get_morale, ":cur_morale", ":agent_party"),
         
         (store_sub, ":morale_effect_on_courage", ":cur_morale", 70),
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"), 
         
         #average = 5000 + 700 + 1500 = 7200; min : 5700, max : 8700
         #morale effect = min : -2100(party morale is 0), average : 0(party morale is 70), max : 900(party morale is 100)
         #min starting : 3600, max starting  : 9600, average starting : 7200
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"), 
         ]),

	  #occc start
	  occc_extra_music_set,
	  common_battle_init_banner,
	  occc_siege_lance_switch,
	  
	  
	  #occc nord sea bonus
	(ti_on_agent_spawn, 0, 0, [],
	   [
		  (store_trigger_param_1, ":agent_no"),
		  (agent_is_non_player, ":agent_no"),
		  (agent_is_human, ":agent_no"),
		  (agent_is_alive, ":agent_no"),
		  (agent_get_troop_id, ":p_id", ":agent_no"),	   
		  
		  #You can't aim precisely on ship
		  (call_script,"script_occc_tweak_accuracy_modifier",":agent_no",-12),

		  #check trp id 
		  (try_begin),
			(is_between,":p_id","trp_nord_recruit","trp_ccc_rhodok_tribesman"),#nords
			(call_script,"script_occc_tweak_speed_modifier",":agent_no",5),
			(call_script,"script_occc_tweak_accuracy_modifier",":agent_no",10),
			(call_script,"script_occc_tweak_use_speed_modifier",":agent_no",5),
		  (try_end),
		  
		  #weather bonus


	   ]),
	   
	  ##occc begin
	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end
	  ##occc end
	  #occc end

	 # Credits to Vincezo - who made this code better than me
	(   # Drowning script
		  1, 0, 0, [(this_or_next|multiplayer_is_server),(neg|game_in_multiplayer_mode),],
	  [
		(set_fixed_point_multiplier, 100),
		(try_for_agents, ":agent"),
		  (agent_is_active,":agent"),
		  (agent_is_alive,":agent"),
		  (agent_get_position,pos16,":agent"),
		  (position_get_z,":cur_z",pos16), #Getting the elevation of all living agents
		 
		  (try_begin),
			(assign, ":agent_horse", -1),
			(agent_get_horse, ":agent_horse", ":agent"),
			(gt, ":agent_horse", 0),
			(val_add,":cur_z",80), #If the agent is on a horse, add 80(cm)
		  (try_end),
		 
		  (agent_get_slot, ":underwater_time", ":agent", slot_agent_underwater_time),
		  (try_begin),
			(lt,":cur_z",-200),
			(val_sub,":underwater_time",1),
			(try_begin),
			  (eq, ":underwater_time", 0),
			  (store_agent_hit_points, ":current_hp_perc", ":agent", 0),
			  (val_sub, ":current_hp_perc", 5),
			  (agent_set_hit_points,":agent", ":current_hp_perc", 0),
			  (agent_deliver_damage_to_agent, ":agent", ":agent", 1),
			(else_try),
			  (agent_set_slot, ":agent", slot_agent_underwater_time, ":underwater_time"),
			(try_end),
		  (else_try),
			(lt, ":underwater_time", 8),
			(val_add, ":underwater_time", 1),
			(agent_set_slot, ":agent", slot_agent_underwater_time, ":underwater_time"),
		  (try_end),
		(try_end),
	  ]),	 

     (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (str_store_troop_name, s6, ":dead_agent_troop_id"),
          (assign, reg0, ":dead_agent_no"),
          (assign, reg1, ":killer_agent_no"),
          (assign, reg2, ":is_wounded"),
          (agent_get_team, reg3, ":dead_agent_no"),          
          # #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),

        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
       ]),

      
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),
      common_music_situation_update,
      common_battle_check_friendly_kills,
	  
      common_battle_tab_press,
	  (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_place_player_banner_near_inventory_bms"),

         (party_clear, "p_routed_enemies"),

         (assign, "$g_latest_order_1", 1), 
         (assign, "$g_latest_order_2", 1), 
         (assign, "$g_latest_order_3", 1), 
         (assign, "$g_latest_order_4", 1), 
         ]),


      (1, 0, 5, [(lt,"$defender_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_defenders", 0),
                 (lt,":num_defenders",6),
#                 (assign, reg2, ":num_defenders"),
#                 (display_message,"@num_defenders = {reg2}")
                 ],
           [(add_reinforcements_to_entry,0,7),(val_add,"$defender_reinforcement_stage",1)]),
      
      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6),
#                 (assign, reg2, ":num_attackers"),
#                 (display_message,"@num_attackers = {reg2}")
                 ],
           [(add_reinforcements_to_entry,3,7),(val_add,"$attacker_reinforcement_stage",1)]),
      
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4,
      ##diplomacy begin
      0,
      ##diplomacy end
      [(main_hero_fallen)],
          [
              ##diplomacy begin
              (try_begin),
                (eq, "$g_dplmc_battle_continuation", 0),
                (assign, ":num_allies", 0),
                (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
                (try_end),
                (gt, ":num_allies", 0),
                (try_begin),
                  (eq, "$g_dplmc_cam_activated", 0),
                  #(store_mission_timer_a, "$g_dplmc_main_hero_fallen_seconds"),
                  (assign, "$g_dplmc_cam_activated", 1),
                  ## CC-D begin: mix Diplo + PBOD + SmoothDC
                  (try_begin),
                    (neq, "$g_cam_mode", 0),
                    (assign, "$g_cam_mode", 0),
                  (try_end),
                  (try_begin),
                    # Diplomacy Death Camera: already set $g_dplmc_cam_activated
                    (eq, "$g_ccd_death_camera_select", 0),
                    (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                    (display_message, "@To watch the fight you can use 'w, a, s, d, numpad_+/numpad_-' to move and 'numpad_1,2,3,4,6,8' to rotate the cam."),
                    (display_message, "@You can toggle camera mode by LCtrl+T."),
                    (assign, "$g_cam_mode", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_diplomacy"),
                  (else_try),
                    # Smooth Death Camera: set on trigger
                    (eq, "$g_ccd_death_camera_select", 1),
                    (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_smooth"),
                  ## CC-D begin: add ModMerger PBOD
                  #(else_try),
                  #  # PBOD Death Camera: set here, because ModMerger not work
                  #  (eq, "$g_ccd_death_camera_select", 2),
                  #  (neq, "$cam_free", 1),
                  #  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  #  (call_script, "script_cust_cam_init_death_cam", cam_mode_free),
                  #  (assign, "$ccc_help_msg_str", "str_ccd_help_message_dc_pbod"),
                  ## CC-D end
                  (try_end),
                  
                  #Diplomacy Battle Continuation -> PBOD charge
                  #(party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active: add by ModMerger PBOD
                  (set_show_messages, 0),
                  (get_player_agent_no, ":player_agent"),
                  (agent_get_team, ":player_team", ":player_agent"),
                  
                  (try_begin),
                    (team_get_movement_order, ":cur_order", ":player_team", grc_everyone),
                    (neq, ":cur_order", mordr_charge),
                    
                    (team_set_order_listener, ":player_team", grc_everyone),
                    (call_script, "script_ccc_team_clear_destination", ":player_team"),
                    (call_script, "script_ccc_team_set_weapons_priority", ":player_team",use_free),
                    (team_give_order, ":player_team", grc_everyone, mordr_charge),
                    
                    ## CC-D begin: add ModMerger PBOD
                    #(team_set_order_listener, ":player_team", grc_everyone),
                    #(call_script, "script_player_order_formations", mordr_charge),
                    ## CC-D end
                  (try_end),
                  (set_show_messages, 1),
                  ## CC-D end
                (try_end),
              (else_try),
              ##diplomacy end
              (assign, "$pin_player_fallen", 1),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
              ##diplomacy begin
              (try_end),
              ##diplomacy end
            ]),


#Wulf end
      ] + custom_commander_commom_triggers),
	  
#TEMPERED              ##################################### MT_ENTRENCHED_ENCOUNTER ########################################

  (
    "entrenched_encounter",mtf_battle_mode,-1,
    "Defend the camp!!",
    [
     (0,mtef_defenders|mtef_team_1,0,aif_start_alarmed,12,[]),
     (0,mtef_defenders|mtef_team_1,0,aif_start_alarmed,0,[]),
     (10,mtef_attackers|mtef_team_0,0,aif_start_alarmed,0,[]),
     (11,mtef_attackers|mtef_team_0,0,aif_start_alarmed,7,[]),
     (15,mtef_attackers|mtef_team_0,0,aif_start_alarmed,0,[]),

     (40,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (41,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (42,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (43,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (44,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (45,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     (46,mtef_attackers|mtef_team_0|mtef_archers_first,0,aif_start_alarmed,1,[]),
     ],
    [

      common_battle_tab_press,
      common_siege_init,
      common_music_situation_update,

	(0, 0, ti_once,
					[
					(assign, "$defender_team", 0),
					(assign, "$attacker_team", 1),
					(assign, "$defender_team_2", 2),
					(assign, "$attacker_team_2", 3),
					], []
	),

	(0, 0, ti_once,
					[
					(set_show_messages, 0),
					(team_give_order, "$defender_team", grc_infantry, mordr_hold),
					(team_give_order, "$defender_team", grc_archers, mordr_stand_ground),
					(team_give_order, "$defender_team", grc_cavalry, mordr_stand_ground),
					(team_give_order, "$defender_team_2", grc_infantry, mordr_hold),
					(team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
					(team_give_order, "$defender_team_2", grc_cavalry, mordr_stand_ground),
					(set_show_messages, 1),
					], []
	),
      common_siege_ai_trigger_init_after_2_secs,
	(3, 0, 5, [],
				[(lt, "$defender_reinforcement_stage", 7),
				(store_mission_timer_a,":mission_time"),
				(ge,":mission_time",10),
				(store_normalized_team_count,":num_defenders",0),
				(lt,":num_defenders",10),
				(add_reinforcements_to_entry,4, 7),
				(val_add,"$defender_reinforcement_stage",1),
				]
	),
      #common_siege_defender_reinforcement_archer_reposition,##CC-C
      common_siege_attacker_reinforcement_check,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
	  common_battle_order_panel_tick_low_freq,#occc
      common_inventory_not_available,
	  common_camp_supply,
	  common_battle_init_banner,
	  #common_drowning,
	  
	  ##occc begin
	  #Vader Extra AI Setting begin
	# (0, 0, ti_once, [],
		# [
			# (assign,"$occc_boss_agent",0),
		# ]),	
	  # occc_vader_extra_ai,
	  #Vader Extra AI Setting end
	  ##occc end

	(120,0,0,[(party_get_slot,":entrenched","p_main_party",slot_party_entrenched),
					(ge,":entrenched",1),
					], 
					[	(get_player_agent_no, ":player_agent"),
						(try_for_agents,":cur_agent"),
							(neq, ":cur_agent", ":player_agent"),
							(agent_is_alive, ":cur_agent"),
							(agent_is_human, ":cur_agent"),
							(agent_get_team, ":agent_team", ":cur_agent"),
							(eq, ":agent_team", "$defender_team"),
							(agent_refill_ammo, ":cur_agent"),
						(try_end),
					]),
					
    ] + custom_commander_commom_triggers + ccc_siege_triggers,  ##CC,
  ),	
#TEMPERED  MISSION TEMPLATE END
#hide house
("occc_slave_market",0,-1,"Hidden Slave Market",
[
  (0,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (1,mtef_visitor_source,af_override_horse,0,1,[]),
  (2,mtef_visitor_source,af_override_horse,0,1,[]),
  (3,mtef_visitor_source,af_override_horse,0,1,[]),
  (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,20,[]),
  (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
  (6,mtef_visitor_source,af_override_horse,0,1,[]),
  (7,mtef_visitor_source,af_override_horse,0,1,[]),
  (8,mtef_visitor_source,af_override_horse,0,1,[]),
],
[
    (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
    (ti_tab_pressed, 0, 0, [(assign,"$g_ccc_scens_use_door",0),(set_trigger_result,1)], []),
         
    # (1, 0, ti_once, [], [
      # (store_current_scene, ":cur_scene"),
      # (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
      # (assign,"$g_ccc_scens_use_door",":cur_scene"),
      # (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
    # ]),
    
    (2,0,ti_once,[],
       [         
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_get_troop_id  ,":troop_no", ":agent_no"),
        (troop_get_type, ":is_female", ":troop_no"),
         (try_begin),
		  (this_or_next|eq, ":is_female", tf_elf_female),
		  (this_or_next|eq, ":is_female", tf_gaolu_female),
		  (this_or_next|eq, ":is_female", tf_girl),
          (eq,":is_female",1),
          (agent_set_stand_animation,":agent_no","anim_stand_lady"),
         (else_try),  
          (agent_set_stand_animation,":agent_no","anim_stand_lord"),
         (try_end),
      (try_end),
    ]),
         
## CC-D begin

    ## CC-D begin: camera integrate
    ccd_init_variables,
    ccd_camera_toggle,
    ccd_free_camera,
    ## CC-D end
## CC-D end
]),

##occc end
]
# modmerger_start version=201 type=4
try:
    component_name = "mission_templates"
    var_set = { "mission_templates":mission_templates,"multiplayer_server_check_belfry_movement":multiplayer_server_check_belfry_movement,"multiplayer_server_spawn_bots":multiplayer_server_spawn_bots,"multiplayer_server_manage_bots":multiplayer_server_manage_bots,"multiplayer_server_check_polls":multiplayer_server_check_polls,"multiplayer_server_check_end_map":multiplayer_server_check_end_map,"multiplayer_once_at_the_first_frame":multiplayer_once_at_the_first_frame,"multiplayer_battle_window_opened":multiplayer_battle_window_opened,"common_battle_mission_start":common_battle_mission_start,"common_battle_tab_press":common_battle_tab_press,"common_battle_init_banner":common_battle_init_banner,"common_arena_fight_tab_press":common_arena_fight_tab_press,"common_custom_battle_tab_press":common_custom_battle_tab_press,"custom_battle_check_victory_condition":custom_battle_check_victory_condition,"custom_battle_check_defeat_condition":custom_battle_check_defeat_condition,"common_battle_victory_display":common_battle_victory_display,"common_siege_question_answered":common_siege_question_answered,"common_custom_battle_question_answered":common_custom_battle_question_answered,"common_custom_siege_init":common_custom_siege_init,"common_siege_init":common_siege_init,"common_music_situation_update":common_music_situation_update,"common_siege_ai_trigger_init":common_siege_ai_trigger_init,"common_siege_ai_trigger_init_2":common_siege_ai_trigger_init_2,"common_siege_ai_trigger_init_after_2_secs":common_siege_ai_trigger_init_after_2_secs,"common_siege_defender_reinforcement_check":common_siege_defender_reinforcement_check,"common_siege_attacker_reinforcement_check":common_siege_attacker_reinforcement_check,"common_siege_attacker_do_not_stall":common_siege_attacker_do_not_stall,"common_battle_check_friendly_kills":common_battle_check_friendly_kills,"common_battle_check_victory_condition":common_battle_check_victory_condition,"common_battle_victory_display":common_battle_victory_display,"common_siege_refill_ammo":common_siege_refill_ammo,"common_siege_check_defeat_condition":common_siege_check_defeat_condition,"common_battle_order_panel":common_battle_order_panel,"common_battle_order_panel_tick":common_battle_order_panel_tick,"common_battle_inventory":common_battle_inventory,"common_inventory_not_available":common_inventory_not_available,"common_siege_init_ai_and_belfry":common_siege_init_ai_and_belfry,"common_siege_move_belfry":common_siege_move_belfry,"common_siege_rotate_belfry":common_siege_rotate_belfry,"common_siege_assign_men_to_belfry":common_siege_assign_men_to_belfry,"tournament_triggers":tournament_triggers,"ccd_init_variables":ccd_init_variables, }  ## CC-D: add ccd_init_variables
    from modmerger import modmerge
    modmerge(var_set, component_name)
except:
    raise
# modmerger_end
